{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/IdentitiesGUI.js"],"names":[],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(guiURL, idmURL, messageBus) {\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    let _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    this.callIdentityModuleFunc('deployGUI', {}).then((result) => {\n      return this._buildDrawer();\n    }).then((result) => {\n      console.log('READY:', result);\n    });\n\n    this.isLogged = false;\n\n    const drawerEl = document.querySelector('.mdc-temporary-drawer');\n    const MDCTemporaryDrawer = mdc.drawer.MDCTemporaryDrawer;\n    const drawer = new MDCTemporaryDrawer(drawerEl);\n\n    this._drawerEl = drawerEl;\n    this._drawer = drawer;\n\n    document.querySelector('.settings-btn').addEventListener('click', function() {\n      drawer.open = true;\n    });\n\n    drawerEl.addEventListener('MDCTemporaryDrawer:open', () => {\n      console.log('Received MDCTemporaryDrawer:open');\n      this._isDrawerOpen = true;\n    });\n\n    drawerEl.addEventListener('MDCTemporaryDrawer:close', () => {\n      console.log('Received MDCTemporaryDrawer:close');\n      this._isDrawerOpen = false;\n\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n    });\n\n  }\n\n  _buildDrawer() {\n\n    const guiURL = this._guiURL;\n\n    this._messageBus.addListener(guiURL, msg => {\n\n      const funcName = msg.body.method;\n\n      if (msg.type !== 'response') {\n\n\n        if (!this.isLogged) {\n\n          const clickClose = new MouseEvent('click');\n          document.querySelector('.settings-btn').dispatchEvent(clickClose);\n\n        }\n\n      }\n\n      if (funcName === 'openPopup') {\n\n        this.openPopup().then(() => {\n\n          let urlreceived = msg.body.params.urlreceived;\n          this.openPopup(urlreceived).then((returnedValue) => {\n            let value = {type: 'execute', value: returnedValue, code: 200};\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            this._messageBus.postMessage(replyMsg);\n          });\n\n        });\n\n        return;\n\n      }\n\n      const callback = (identityInfo) => {\n\n        this.isLogged = true;\n\n        this._buildMessage(msg, identityInfo);\n\n      };\n\n      this.callback = callback;\n\n      this._getIdentities(callback);\n\n    });\n\n    this._getIdentities();\n\n  }\n\n  _buildMessage(msg, identityInfo) {\n    let replyMsg;\n    let value;\n\n    const from = msg ? msg.from : this._guiURL;\n    const to = msg ? msg.to : this._idmURL;\n\n    console.log('chosen identity: ', identityInfo);\n\n    switch (identityInfo.type) {\n      case 'idp':\n        value = { type: 'idp', value: identityInfo.value, code: 200 };\n        break;\n\n      case 'identity':\n        value = { type: 'identity', value: identityInfo.value, code: 200 };\n        break;\n\n      default:\n        value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n    }\n\n    replyMsg = {id: msg.id, type: 'response', to: from, from: to, body: value };\n\n    this._messageBus.postMessage(replyMsg);\n  }\n\n  _getIdentities(callback) {\n\n    return this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((resultObject) => {\n      if (callback) {\n        return Promise.all([this.showIdps(resultObject.idps, callback), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject, callback)]);\n      } else {\n        return Promise.all([this.showIdps(resultObject.idps), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject)]);\n      }\n    });\n\n  }\n\n  // _openDrawer() {\n\n  //   let _this = this;\n  //   const guiURL = _this._guiURL;\n\n  //   _this.resultURL  = undefined;\n\n  //   _this._messageBus.addListener(guiURL, msg => {\n  //     let identityInfo = msg.body.value;\n  //     let funcName = msg.body.method;\n  //     let value;\n  //     console.log('[IdentitiesGUI] received msg: ', msg);\n\n  //     _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n\n  //       let replyMsg;\n  //       console.log('[IdentitiesGUI] identityInfo from GUI: ', identityInfo);\n\n  //       //hide config page with the identity GUI\n  //       parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n  //       $('.admin-page').addClass('hide');\n\n  //       // document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n  //       $('.identities-section').addClass('hide');\n  //       $('.policies-section').addClass('hide');\n\n  //       switch (identityInfo.type) {\n  //         case 'idp':\n  //           value = { type: 'idp', value: identityInfo.value, code: 200 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //           break;\n\n  //         case 'identity':\n  //           value = { type: 'identity', value: identityInfo.value, code: 200 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //           break;\n\n  //         default:\n  //           value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //       }\n  //     });\n\n  //     if (funcName === 'openPopup') {\n  //       let urlreceived = msg.body.params.urlreceived;\n  //       _this.openPopup(urlreceived).then((returnedValue) => {\n  //         let value = {type: 'execute', value: returnedValue, code: 200};\n  //         let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n  //         _this._messageBus.postMessage(replyMsg);\n  //       });\n  //       return; // this avoids getting stuck in the identities page\n  //     }\n\n  //     // unhide the config page with the identity GUI\n  //     // document.getElementsByTagName('body')[0].style = 'background-color:white;';\n  //     parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n\n  //     const clickOpen = new MouseEvent('click');\n  //     document.querySelector('.settings-btn').dispatchEvent(clickOpen);\n\n  //     $('.admin-page').removeClass('hide');\n\n  //   });\n  // }\n\n  callIdentityModuleFunc(methodName, parameters) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      const message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n        body: { resource: 'identity', method: methodName, params: parameters }};\n\n      this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n\n    });\n  }\n\n  openPopup(urlreceived) {\n\n    return new Promise((resolve, reject) => {\n\n      let win;\n      if (!urlreceived) {\n        win = window.open('', 'openIDrequest', 'location=1,status=1');\n        this.win = win;\n        resolve();\n      } else {\n        win = this.win;\n        win.location.href = urlreceived;\n      }\n\n      // let win = window.open(urlreceived, 'openIDrequest', 'location=1,status=1,scrollbars=1');\n      if (window.cordova) {\n        win.addEventListener('loadstart', function(e) {\n          let url = e.url;\n          let code = /\\&code=(.+)$/.exec(url);\n          let error = /\\&error=(.+)$/.exec(url);\n\n          if (code || error) {\n            win.close();\n            return resolve(url);\n          } else {\n            return reject('openPopup error 1 - should not happen');\n          }\n        });\n      } else {\n\n        let pollTimer = setInterval(function() {\n          try {\n            if (win.closed) {\n              clearInterval(pollTimer);\n              // return reject('Some error occured when trying to get identity.');\n            }\n\n            if ((win.document.URL.indexOf('access_token') !== -1 || win.document.URL.indexOf('code') !== -1) && win.document.URL.indexOf(location.origin) !== -1) {\n              window.clearInterval(pollTimer);\n              let url =   win.document.URL;\n\n              resolve(url);\n              return win.close();\n            }\n          } catch (e) {\n            //return reject('openPopup error 2 - should not happen');\n            // console.log(e);\n          }\n\n        }, 500);\n      }\n\n    });\n  }\n\n  // showIdentitiesGUI(receivedInfo) {\n  //   let _this = this;\n\n  //   return new Promise((resolve, reject) => {\n  //     console.log('[IdentitiesGUI.showIdentitiesGUI] receivedInfo: ', receivedInfo);\n\n  //     let identityInfo;\n  //     let toRemoveID;\n\n  //     let callback = (value) => {\n  //       console.log('chosen identity: ', value);\n\n  //       const clickClose = new MouseEvent('click');\n  //       document.querySelector('.settings-btn').dispatchEvent(clickClose);\n\n  //       resolve({type: 'identity', value: value});\n  //     };\n\n  //     _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\n  //       identityInfo = resultObject.identityInfo;\n  //       toRemoveID = resultObject.toRemoveID;\n\n  //       $('.policies-section').addClass('hide');\n  //       $('.identities-section').removeClass('hide');\n\n  //       _this.showIdps(receivedInfo.idps, callback);\n\n  //       _this.showIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n  //         console.log('chosen identity: ', identity);\n  //         resolve({type: 'identity', value: identity});\n  //       });\n\n  //       let idps = [];\n  //       let idpsObjects = identityInfo.idps;\n\n  //       idpsObjects.forEach(function(entry) {\n  //         if(entry.type && entry.type == 'idToken') {\n  //           idps.push(entry.domain);\n  //         }\n  //       });\n\n  //       $('#idproviders').html(_this._getList(idps));\n  //       $('#idproviders').off();\n  //       // $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\n  //       //$('.back').on('click', (event) => _this.goHome());\n  //       $('.identities-reset').off();\n  //       // $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n  //     });\n  //   });\n  // }\n\n  _checkReceivedInfo(receivedInfo) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n        resolve({identityInfo: identityInfo, toRemoveID: toRemoveID});\n      } else {\n        toRemoveID = true;\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\n        });\n      }\n    });\n  }\n\n  showIdps(idps) {\n\n    console.log('[IdentitiesGUI.showIdps] : ', idps);\n\n    let idpsListEl = document.getElementById('idps-list');\n\n    const clickEvent = (event) => {\n      const el = event.currentTarget;\n      const idp = el.getAttribute('data-idp');\n\n      this.loginWithIDP(idp).then((result) => {\n\n\n        if (this.callback) {\n          this.callback(result);\n        }\n\n      });\n    };\n\n    idps.forEach((key) => {\n\n      let linkEl = document.getElementById('link-' + key.domain);\n\n      if (!linkEl) {\n        linkEl = document.createElement('a');\n        linkEl.setAttribute('id', 'link-' + key.domain);\n        linkEl.setAttribute('data-idp', key.domain);\n        linkEl.classList = 'mdc-list-item link-' + key.domain;\n        linkEl.href = '#';\n\n        const linkElText = document.createTextNode(key.domain);\n\n        let name = key.domain;\n        if (name.indexOf('.') !== -1) {\n          name = name.substring(0, name.indexOf('.'));\n        } else {\n          name = 'question';\n        }\n\n        const imgEl = document.createElement('img');\n        imgEl.classList = 'mdc-list-item__start-detail';\n        imgEl.src = './assets/' + name + '.svg';\n        imgEl.width = 30;\n        imgEl.height = 30;\n\n        imgEl.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\n\n        linkEl.appendChild(imgEl);\n        linkEl.appendChild(linkElText);\n\n        idpsListEl.appendChild(linkEl);\n      } else {\n        linkEl.removeEventListener('click', clickEvent);\n      }\n\n      linkEl.addEventListener('click', clickEvent);\n\n    });\n\n  }\n\n  showDefaultIdentity(identity) {\n\n    if (identity) {\n\n      this.isLogged = true;\n\n      const header = document.querySelector('.mdc-list--avatar-list');\n\n      let itemEl = document.getElementById('item-' + identity.userProfile.userURL);\n\n      if (!itemEl) {\n\n        itemEl = document.createElement('li');\n        itemEl.id = 'item-' + identity.userProfile.userURL;\n        itemEl.classList = 'mdc-list-item item-' + identity.userProfile.userURL;\n        itemEl.setAttribute('data-userURL', identity.userProfile.userURL);\n\n        const profileImage = document.createElement('img');\n        profileImage.classList = 'mdc-list-item__start-detail';\n        profileImage.width = 56;\n        profileImage.height = 56;\n        profileImage.alt = identity.userProfile.name;\n        profileImage.src = identity.userProfile.picture;\n        itemEl.appendChild(profileImage);\n\n        const text1 = document.createElement('span');\n        text1.classList = 'name mdc-list-item__text';\n        text1.textContent = identity.userProfile.name;\n\n        const text2 = document.createElement('span');\n        text2.classList = 'email mdc-list-item__secondary-text';\n        text2.textContent = identity.userProfile.email;\n\n        text1.appendChild(text2);\n        itemEl.appendChild(text1);\n        header.appendChild(itemEl);\n\n      }\n\n    }\n\n  }\n\n  showIdentities(iDs, callback) {\n\n    return new Promise((resolve, reject) => {\n\n      console.log('[IdentitiesGUI.showMyIdentities] : ', iDs.identities, iDs.defaultIdentity);\n\n      const identities = iDs.identities;\n      const current = iDs.defaultIdentity ? iDs.defaultIdentity.userURL : '';\n\n      let activeIdentities = document.getElementById('active-identities');\n\n      Object.keys(identities).forEach((key) => {\n\n        const exist = document.getElementById('link-' + key);\n        if (exist) { return; }\n\n        const linkEl = document.createElement('a');\n        linkEl.href = '#';\n        linkEl.id = 'link-' + key;\n        linkEl.classList = 'mdc-list-item';\n        linkEl.setAttribute('data-userURL', key);\n\n        if (key === current) {\n          linkEl.classList += ' mdc-temporary-drawer--selected';\n        }\n\n        linkEl.addEventListener('click', (event) => {\n\n          event.preventDefault();\n\n          const el = event.currentTarget;\n          const userURL = el.getAttribute('data-userURL');\n\n          console.log('userURL:', userURL, callback, el);\n\n          if (callback) {\n            callback(userURL);\n          }\n\n        });\n\n        const profileImage = document.createElement('img');\n        profileImage.classList = 'mdc-list-item__start-detail';\n        profileImage.width = 40;\n        profileImage.height = 40;\n        profileImage.alt = identities[key].userProfile.name;\n        profileImage.src = identities[key].userProfile.picture;\n        profileImage.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\n\n        const text1 = document.createElement('span');\n        text1.classList = 'name mdc-list-item__text';\n        text1.textContent = identities[key].userProfile.name;\n\n        const text2 = document.createElement('span');\n        text2.classList = 'email mdc-list-item__secondary-text';\n        text2.textContent = identities[key].userProfile.email;\n\n        text1.appendChild(text2);\n\n        linkEl.appendChild(profileImage);\n        linkEl.appendChild(text1);\n\n        activeIdentities.appendChild(linkEl);\n\n      });\n\n      if (identities.length === 1) {\n\n        if (callback) {\n          callback({type: 'identity', value: current});\n        }\n\n        return resolve({type: 'identity', value: current});\n      }\n\n      if (identities.length > 1) {\n        this._drawer.open = true;\n      }\n\n      // let callback = (identity) => {\n      //   resolve(identity);\n      // };\n\n      // if (!toRemoveID) {\n      //   $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\n      // }\n\n      // $('.remove-id').on('click', (event) => _this.removeID(iDs));\n\n    });\n  }\n\n  removeID(event, emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\n      let numEmails = emails.length;\n      for (let i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n\n      // -------------------------------------------------------------------------//\n      _this.showIdentities(emails, true);\n    });\n\n    //_this.identityModule.unregisterIdentity(idToRemove);\n\n  }\n\n  loginWithIDP(idp) {\n\n\n    let _publicKey;\n\n    return this.openPopup()\n      .then((result) => {\n        return this.callIdentityModuleFunc('getMyPublicKey', {});\n      }).then((publicKey) => {\n        _publicKey = publicKey;\n        const data = { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idp };\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\n      })\n      .then((value) => {\n        console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if (url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if (secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n\n        this.resultURL = finalURL || url;\n\n        console.log('[IdentitiesGUI.openPopup]', this.resultURL);\n        return this.openPopup(this.resultURL);\n      }).then((identity) => {\n\n        console.log('[IdentitiesGUI.openPopup.result]', identity);\n\n        const data = { contents: _publicKey, origin: 'origin', usernameHint: identity, idpDomain: idp };\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\n      }).then((result) => {\n\n        console.log('[IdentitiesGUI.sendGenerateMessage.result]', result);\n        return this.callIdentityModuleFunc('addAssertion', result);\n      }).then((value) => {\n\n        this._drawer.open = false;\n        const userURL = {type: 'identity', value: value.userProfile.userURL};\n\n        console.log('[IdentitiesGUI.loginWithIDP final]', value);\n        return userURL;\n      });\n\n  }\n\n  // obtainNewIdentity(event, callback, toRemoveID) {\n  //   let _this = this;\n  //   let idProvider = event.target.textContent;\n  //   let idProvider2 = event.target.text;\n\n  //   _this.callIdentityModuleFunc('getMyPublicKey', {}).then((publicKey) => {\n  //     // let publicKey = btoa(keyPair.public);\n\n  //     _this.callIdentityModuleFunc('sendGenerateMessage',\n  //       { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idProvider, }).then((value) => {\n  //       console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n  //       let url = value.loginUrl;\n  //       let finalURL;\n\n  //       //check if the receivedURL contains the redirect field and replace it\n  //       if (url.indexOf('redirect_uri') !== -1) {\n  //         let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n  //         let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n  //         let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n  //         //check if the reddirect field is the last field of the URL\n  //         if (secondPart.indexOf('&') !== -1) {\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n  //         } else {\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin;\n  //         }\n  //       }\n\n  //       _this.resultURL = finalURL || url;\n\n  //       $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n  //       $('.login').removeClass('hide');\n  //       $('.login-btn').off();\n  //       $('.login-btn').on('click', (event) => {\n  //         $('.login').addClass('hide');\n  //         // _this._authenticateUser(publicKey, value, 'origin', idProvider).then((email) => {\n  //         //   callback(email);\n  //         //   _this.showIdentitiesGUI();\n  //         // });\n  //       });\n  //     });\n  //   }).catch(err => console.log('obtanin new identity', err));\n\n  // }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.openPopup(url).then((identity) => {\n\n        _this.callIdentityModuleFunc('sendGenerateMessage',\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\n\n          if (result) {\n\n            //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n            _this.callIdentityModuleFunc('addAssertion', result).then((value) => {\n              resolve(value.userProfile.userURL);\n            }, (err) => {\n              reject(err);\n            });\n\n          } else {\n            reject('error on obtaining identity information');\n          }\n\n        });\n      }, (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  _resetIdentities() {\n    console.log('_resetIdentities');\n  }\n\n\n}\n\nexport default IdentitiesGUI;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}