{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/IdentitiesGUI.js"],"names":[],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(guiURL, idmURL, messageBus) {\n    console.log('IdentitiesGUI', this);\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    let _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    this.callIdentityModuleFunc('deployGUI', {}).then((result) => {\n      return this._buildDrawer();\n    }).then((result) => {\n      console.log('READY:', result);\n    });\n\n    this.isLogged = false;\n\n    const drawerEl = document.querySelector('.mdc-temporary-drawer');\n    const MDCTemporaryDrawer = mdc.drawer.MDCTemporaryDrawer;\n    const drawer = new MDCTemporaryDrawer(drawerEl);\n\n    this._drawerEl = drawerEl;\n    this._drawer = drawer;\n\n    document.querySelector('.settings-btn').addEventListener('click', function() {\n      drawer.open = true;\n    });\n\n    drawerEl.addEventListener('MDCTemporaryDrawer:open', () => {\n      console.log('Received MDCTemporaryDrawer:open');\n\n      this._isDrawerOpen = true;\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n    });\n\n    drawerEl.addEventListener('MDCTemporaryDrawer:close', () => {\n      console.log('Received MDCTemporaryDrawer:close');\n      this._isDrawerOpen = false;\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n    });\n\n  }\n\n  logOut() {\n    let _this = this;\n    console.log('IdentitiesGUI: logging out');\n    return new Promise((resolve, reject) => {\n\n      console.log('Building drawer');\n      _this._buildDrawer();\n\n      resolve('Gui reset');\n\n\n    });\n  }\n\n  _buildDrawer() {\n\n    const guiURL = this._guiURL;\n\n    this._messageBus.addListener(guiURL, msg => {\n\n      const funcName = msg.body.method;\n\n      if (msg.type !== 'response') {\n\n\n        if (!this.isLogged) {\n\n          const clickClose = new MouseEvent('click');\n          document.querySelector('.settings-btn').dispatchEvent(clickClose);\n\n        }\n\n      }\n\n      if (funcName === 'openPopup') {\n\n        this.openPopup().then(() => {\n\n          let urlreceived = msg.body.params.urlreceived;\n          this.openPopup(urlreceived).then((returnedValue) => {\n            let value = {type: 'execute', value: returnedValue, code: 200};\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            this._messageBus.postMessage(replyMsg);\n          });\n\n        });\n\n        return;\n\n      }\n\n      const callback = (identityInfo) => {\n\n        this.isLogged = true;\n\n        this._buildMessage(msg, identityInfo);\n\n      };\n\n      this.callback = callback;\n\n      this._getIdentities(callback, true);\n\n    });\n\n    this._getIdentities();\n\n  }\n\n  _buildMessage(msg, identityInfo) {\n    let replyMsg;\n    let value;\n\n    const from = msg ? msg.from : this._guiURL;\n    const to = msg ? msg.to : this._idmURL;\n\n    console.log('chosen identity: ', identityInfo);\n\n    switch (identityInfo.type) {\n      case 'idp':\n        value = { type: 'idp', value: identityInfo.value, code: 200 };\n        break;\n\n      case 'identity':\n        value = { type: 'identity', value: identityInfo.value, code: 200 };\n        break;\n\n      default:\n        value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n    }\n\n    replyMsg = {id: msg.id, type: 'response', to: from, from: to, body: value };\n\n    this._messageBus.postMessage(replyMsg);\n  }\n\n  _getIdentities(callback, oPenDrawer) {\n\n    return this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((resultObject) => {\n      if (callback) {\n        return Promise.all([this.showIdps(resultObject.idps, callback), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject, callback, oPenDrawer)]);\n      } else {\n        return Promise.all([this.showIdps(resultObject.idps), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject)]);\n      }\n    });\n\n  }\n\n  // _openDrawer() {\n\n  //   let _this = this;\n  //   const guiURL = _this._guiURL;\n\n  //   _this.resultURL  = undefined;\n\n  //   _this._messageBus.addListener(guiURL, msg => {\n  //     let identityInfo = msg.body.value;\n  //     let funcName = msg.body.method;\n  //     let value;\n  //     console.log('[IdentitiesGUI] received msg: ', msg);\n\n  //     _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n\n  //       let replyMsg;\n  //       console.log('[IdentitiesGUI] identityInfo from GUI: ', identityInfo);\n\n  //       //hide config page with the identity GUI\n  //       parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n  //       $('.admin-page').addClass('hide');\n\n  //       // document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n  //       $('.identities-section').addClass('hide');\n  //       $('.policies-section').addClass('hide');\n\n  //       switch (identityInfo.type) {\n  //         case 'idp':\n  //           value = { type: 'idp', value: identityInfo.value, code: 200 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //           break;\n\n  //         case 'identity':\n  //           value = { type: 'identity', value: identityInfo.value, code: 200 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //           break;\n\n  //         default:\n  //           value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //       }\n  //     });\n\n  //     if (funcName === 'openPopup') {\n  //       let urlreceived = msg.body.params.urlreceived;\n  //       _this.openPopup(urlreceived).then((returnedValue) => {\n  //         let value = {type: 'execute', value: returnedValue, code: 200};\n  //         let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n  //         _this._messageBus.postMessage(replyMsg);\n  //       });\n  //       return; // this avoids getting stuck in the identities page\n  //     }\n\n  //     // unhide the config page with the identity GUI\n  //     // document.getElementsByTagName('body')[0].style = 'background-color:white;';\n  //     parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n\n  //     const clickOpen = new MouseEvent('click');\n  //     document.querySelector('.settings-btn').dispatchEvent(clickOpen);\n\n  //     $('.admin-page').removeClass('hide');\n\n  //   });\n  // }\n\n  callIdentityModuleFunc(methodName, parameters) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      const message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n        body: { resource: 'identity', method: methodName, params: parameters }};\n\n      this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n\n    });\n  }\n\n  openPopup(urlreceived) {\n\n    return new Promise((resolve, reject) => {\n\n      let win;\n      if (!urlreceived) {\n        win = window.open('', 'openIDrequest', 'location=1,status=1');\n        this.win = win;\n        resolve();\n      } else {\n        win = this.win;\n        win.location.href = urlreceived;\n      }\n\n      // let win = window.open(urlreceived, 'openIDrequest', 'location=1,status=1,scrollbars=1');\n      if (window.cordova) {\n        win.addEventListener('loadstart', function(e) {\n          let url = e.url;\n          let code = /\\&code=(.+)$/.exec(url);\n          let error = /\\&error=(.+)$/.exec(url);\n\n          if (code || error) {\n            win.close();\n            return resolve(url);\n          } else {\n            return reject('openPopup error 1 - should not happen');\n          }\n        });\n      } else {\n\n        let pollTimer = setInterval(function() {\n          try {\n            if (win.closed) {\n              clearInterval(pollTimer);\n\n              // return reject('Some error occured when trying to get identity.');\n            }\n\n            if ((win.document.URL.indexOf('access_token') !== -1 || win.document.URL.indexOf('code') !== -1) && win.document.URL.indexOf(location.origin) !== -1) {\n              window.clearInterval(pollTimer);\n              let url =   win.document.URL;\n\n              resolve(url);\n              return win.close();\n            }\n          } catch (e) {\n            //return reject('openPopup error 2 - should not happen');\n            // console.log(e);\n          }\n\n        }, 500);\n      }\n\n    });\n  }\n\n  // showIdentitiesGUI(receivedInfo) {\n  //   let _this = this;\n\n  //   return new Promise((resolve, reject) => {\n  //     console.log('[IdentitiesGUI.showIdentitiesGUI] receivedInfo: ', receivedInfo);\n\n  //     let identityInfo;\n  //     let toRemoveID;\n\n  //     let callback = (value) => {\n  //       console.log('chosen identity: ', value);\n\n  //       const clickClose = new MouseEvent('click');\n  //       document.querySelector('.settings-btn').dispatchEvent(clickClose);\n\n  //       resolve({type: 'identity', value: value});\n  //     };\n\n  //     _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\n  //       identityInfo = resultObject.identityInfo;\n  //       toRemoveID = resultObject.toRemoveID;\n\n  //       $('.policies-section').addClass('hide');\n  //       $('.identities-section').removeClass('hide');\n\n  //       _this.showIdps(receivedInfo.idps, callback);\n\n  //       _this.showIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n  //         console.log('chosen identity: ', identity);\n  //         resolve({type: 'identity', value: identity});\n  //       });\n\n  //       let idps = [];\n  //       let idpsObjects = identityInfo.idps;\n\n  //       idpsObjects.forEach(function(entry) {\n  //         if(entry.type && entry.type == 'idToken') {\n  //           idps.push(entry.domain);\n  //         }\n  //       });\n\n  //       $('#idproviders').html(_this._getList(idps));\n  //       $('#idproviders').off();\n  //       // $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\n  //       //$('.back').on('click', (event) => _this.goHome());\n  //       $('.identities-reset').off();\n  //       // $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n  //     });\n  //   });\n  // }\n\n  _checkReceivedInfo(receivedInfo) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n        resolve({identityInfo: identityInfo, toRemoveID: toRemoveID});\n      } else {\n        toRemoveID = true;\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\n        });\n      }\n    });\n  }\n\n  showIdps(idps) {\n\n    console.log('[IdentitiesGUI.showIdps] : ', idps);\n\n    let idpsListEl = document.getElementById('idps-list');\n\n    const clickEvent = (event) => {\n      const el = event.currentTarget;\n      const idp = el.getAttribute('data-idp');\n\n      this.loginWithIDP(idp).then((result) => {\n        // console.log('value here: ', result.value);\n        // result.value = result.value.userURL\n\n        if (this.callback) {\n          this.callback(result);\n        }\n\n      });\n    };\n\n    idps.forEach((key) => {\n\n      let linkEl = document.getElementById('link-' + key.domain);\n\n      if (!linkEl) {\n        linkEl = document.createElement('a');\n        linkEl.setAttribute('id', 'link-' + key.domain);\n        linkEl.setAttribute('data-idp', key.domain);\n        linkEl.classList = 'mdc-list-item link-' + key.domain;\n        linkEl.href = '#';\n\n        const linkElText = document.createTextNode(key.domain);\n\n        let name = key.domain;\n        if (name.indexOf('.') !== -1) {\n          name = name.substring(0, name.indexOf('.'));\n        } else {\n          name = 'question';\n        }\n\n        const imgEl = document.createElement('img');\n        imgEl.classList = 'mdc-list-item__start-detail';\n        imgEl.src = './assets/' + name + '.svg';\n        imgEl.width = 30;\n        imgEl.height = 30;\n\n        imgEl.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\n\n        linkEl.appendChild(imgEl);\n        linkEl.appendChild(linkElText);\n\n        idpsListEl.appendChild(linkEl);\n      } else {\n        linkEl.removeEventListener('click', clickEvent);\n      }\n\n      linkEl.addEventListener('click', clickEvent);\n\n    });\n\n  }\n\n  showDefaultIdentity(identity) {\n\n    if (identity) {\n\n      this.isLogged = true;\n\n      const header = document.querySelector('.mdc-list--avatar-list');\n\n      let itemEl = document.getElementById('item-' + identity.userProfile.userURL);\n\n      if (!itemEl) {\n\n        itemEl = document.createElement('li');\n        itemEl.id = 'item-' + identity.userProfile.userURL;\n        itemEl.classList = 'mdc-list-item item-' + identity.userProfile.userURL;\n        itemEl.setAttribute('data-userURL', identity.userProfile.userURL);\n\n        const profileImage = document.createElement('img');\n        profileImage.classList = 'mdc-list-item__start-detail';\n        profileImage.width = 56;\n        profileImage.height = 56;\n        profileImage.alt = identity.userProfile.name;\n        profileImage.src = identity.userProfile.picture;\n        itemEl.appendChild(profileImage);\n\n        const text1 = document.createElement('span');\n        text1.classList = 'name mdc-list-item__text';\n        text1.textContent = identity.userProfile.name;\n\n        const text2 = document.createElement('span');\n        text2.classList = 'email mdc-list-item__secondary-text';\n        text2.textContent = identity.userProfile.email;\n\n        text1.appendChild(text2);\n        itemEl.appendChild(text1);\n        header.appendChild(itemEl);\n\n      }\n\n    }\n\n  }\n\n  showIdentities(iDs, callback, oPenDrawer = false) {\n\n    return new Promise((resolve, reject) => {\n\n      console.log('[IdentitiesGUI.showMyIdentities] : ', iDs.identities, iDs.defaultIdentity);\n\n      const identities = iDs.identities;\n      const current = iDs.defaultIdentity ? iDs.defaultIdentity.userURL : '';\n\n      let activeIdentities = document.getElementById('active-identities');\n\n      Object.keys(identities).forEach((key) => {\n\n        const exist = document.getElementById('link-' + key);\n        if (exist) { return; }\n\n        const linkEl = document.createElement('a');\n        linkEl.href = '#';\n        linkEl.id = 'link-' + key;\n        linkEl.classList = 'mdc-list-item';\n        linkEl.setAttribute('data-userURL', key);\n\n        if (key === current) {\n          linkEl.classList += ' mdc-temporary-drawer--selected';\n        }\n\n        linkEl.addEventListener('click', (event) => {\n\n          event.preventDefault();\n\n          const el = event.currentTarget;\n          const userURL = el.getAttribute('data-userURL');\n\n          console.log('userURL:', userURL, callback, el);\n\n          if (callback) {\n            callback(userURL);\n          }\n\n        });\n\n        const profileImage = document.createElement('img');\n        profileImage.classList = 'mdc-list-item__start-detail';\n        profileImage.width = 40;\n        profileImage.height = 40;\n        profileImage.alt = identities[key].userProfile.name;\n        profileImage.src = identities[key].userProfile.picture;\n        profileImage.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\n\n        const text1 = document.createElement('span');\n        text1.classList = 'name mdc-list-item__text';\n        text1.textContent = identities[key].userProfile.name;\n\n        const text2 = document.createElement('span');\n        text2.classList = 'email mdc-list-item__secondary-text';\n        text2.textContent = identities[key].userProfile.email;\n\n        text1.appendChild(text2);\n\n        linkEl.appendChild(profileImage);\n        linkEl.appendChild(text1);\n\n        activeIdentities.appendChild(linkEl);\n\n      });\n\n      if (oPenDrawer) {\n        this._drawer.open = true\n      }\n\n/*\n      if (Object.keys(identities).length === 1) {\n\n        if (callback) {\n          callback({type: 'identity', value: current});\n        }\n\n        return resolve({type: 'identity', value: current});\n      }*/\n\n\n      // let callback = (identity) => {\n      //   resolve(identity);\n      // };\n\n      // if (!toRemoveID) {\n      //   $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\n      // }\n\n      // $('.remove-id').on('click', (event) => _this.removeID(iDs));\n\n    });\n  }\n\n  removeID(event, emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\n      let numEmails = emails.length;\n      for (let i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n\n      // -------------------------------------------------------------------------//\n      _this.showIdentities(emails, true);\n    });\n\n    //_this.identityModule.unregisterIdentity(idToRemove);\n\n  }\n\n  loginWithIDP(idp) {\n\n\n    let _publicKey;\n\n    return this.openPopup()\n      .then((result) => {\n        return this.callIdentityModuleFunc('getMyPublicKey', {});\n      }).then((publicKey) => {\n        _publicKey = publicKey;\n        const data = { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idp };\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\n      })\n      .then((value) => {\n        console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if (url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if (secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n\n        this.resultURL = finalURL || url;\n\n        console.log('[IdentitiesGUI.openPopup]', this.resultURL);\n        return this.openPopup(this.resultURL);\n      }).then((identity) => {\n\n        console.log('[IdentitiesGUI.openPopup.result]', identity);\n\n        const data = { contents: _publicKey, origin: 'origin', usernameHint: identity, idpDomain: idp };\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\n      }).then((result) => {\n\n        console.log('[IdentitiesGUI.sendGenerateMessage.result]', result);\n        return this.callIdentityModuleFunc('addAssertion', result);\n      }).then((value) => {\n\n        this._drawer.open = false;\n        const userURL = {type: 'identity', value: value.userProfile.userURL};\n        // const userIdentity = {type: 'identity', value: value.userProfile};\n\n        console.log('[IdentitiesGUI.loginWithIDP final]', value);\n        return userURL;\n        // return userIdentity;\n      });\n\n  }\n\n  // obtainNewIdentity(event, callback, toRemoveID) {\n  //   let _this = this;\n  //   let idProvider = event.target.textContent;\n  //   let idProvider2 = event.target.text;\n\n  //   _this.callIdentityModuleFunc('getMyPublicKey', {}).then((publicKey) => {\n  //     // let publicKey = btoa(keyPair.public);\n\n  //     _this.callIdentityModuleFunc('sendGenerateMessage',\n  //       { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idProvider, }).then((value) => {\n  //       console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n  //       let url = value.loginUrl;\n  //       let finalURL;\n\n  //       //check if the receivedURL contains the redirect field and replace it\n  //       if (url.indexOf('redirect_uri') !== -1) {\n  //         let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n  //         let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n  //         let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n  //         //check if the reddirect field is the last field of the URL\n  //         if (secondPart.indexOf('&') !== -1) {\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n  //         } else {\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin;\n  //         }\n  //       }\n\n  //       _this.resultURL = finalURL || url;\n\n  //       $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n  //       $('.login').removeClass('hide');\n  //       $('.login-btn').off();\n  //       $('.login-btn').on('click', (event) => {\n  //         $('.login').addClass('hide');\n  //         // _this._authenticateUser(publicKey, value, 'origin', idProvider).then((email) => {\n  //         //   callback(email);\n  //         //   _this.showIdentitiesGUI();\n  //         // });\n  //       });\n  //     });\n  //   }).catch(err => console.log('obtanin new identity', err));\n\n  // }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.openPopup(url).then((identity) => {\n\n        _this.callIdentityModuleFunc('sendGenerateMessage',\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\n\n          if (result) {\n\n            //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n            _this.callIdentityModuleFunc('addAssertion', result).then((value) => {\n              resolve(value.userProfile.userURL);\n            }, (err) => {\n              reject(err);\n            });\n\n          } else {\n            reject('error on obtaining identity information');\n          }\n\n        });\n      }, (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  _resetIdentities() {\n    console.log('_resetIdentities');\n  }\n\n\n}\n\nexport default IdentitiesGUI;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWRtaW4vSWRlbnRpdGllc0dVSS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNBQTs7SUFFTSxhO0FBRUoseUJBQVksTUFBWixFQUFvQixNQUFwQixFQUE0QixVQUE1QixFQUF3QztBQUFBOztBQUFBOztBQUN0QyxZQUFRLEdBQVIsQ0FBWSxlQUFaLEVBQTZCLElBQTdCO0FBQ0E7QUFDQSxRQUFJLENBQUMsVUFBTCxFQUFpQixNQUFNLE1BQU0sc0JBQU4sQ0FBTjtBQUNqQixRQUFJLFFBQVEsSUFBWjtBQUNBLFVBQU0sT0FBTixHQUFnQixNQUFoQjtBQUNBLFVBQU0sT0FBTixHQUFnQixNQUFoQjtBQUNBLFVBQU0sV0FBTixHQUFvQixVQUFwQjs7QUFFQSxTQUFLLHNCQUFMLENBQTRCLFdBQTVCLEVBQXlDLEVBQXpDLEVBQTZDLElBQTdDLENBQWtELFVBQUMsTUFBRCxFQUFZO0FBQzVELGFBQU8sT0FBSyxZQUFMLEVBQVA7QUFDRCxLQUZELEVBRUcsSUFGSCxDQUVRLFVBQUMsTUFBRCxFQUFZO0FBQ2xCLGNBQVEsR0FBUixDQUFZLFFBQVosRUFBc0IsTUFBdEI7QUFDRCxLQUpEOztBQU1BLFNBQUssUUFBTCxHQUFnQixLQUFoQjs7QUFFQSxRQUFNLFdBQVcsU0FBUyxhQUFULENBQXVCLHVCQUF2QixDQUFqQjtBQUNBLFFBQU0scUJBQXFCLElBQUksTUFBSixDQUFXLGtCQUF0QztBQUNBLFFBQU0sU0FBUyxJQUFJLGtCQUFKLENBQXVCLFFBQXZCLENBQWY7O0FBRUEsU0FBSyxTQUFMLEdBQWlCLFFBQWpCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsTUFBZjs7QUFFQSxhQUFTLGFBQVQsQ0FBdUIsZUFBdkIsRUFBd0MsZ0JBQXhDLENBQXlELE9BQXpELEVBQWtFLFlBQVc7QUFDM0UsYUFBTyxJQUFQLEdBQWMsSUFBZDtBQUNELEtBRkQ7O0FBSUEsYUFB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b3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vIGpzaGludCBicm93c2VyOnRydWUsIGpxdWVyeTogdHJ1ZVxuXG5jbGFzcyBJZGVudGl0aWVzR1VJIHtcblxuICBjb25zdHJ1Y3RvcihndWlVUkwsIGlkbVVSTCwgbWVzc2FnZUJ1cykge1xuICAgIGNvbnNvbGUubG9nKCdJZGVudGl0aWVzR1VJJywgdGhpcyk7XG4gICAgLy9pZiAoIWlkZW50aXR5TW9kdWxlKSB0aHJvdyBFcnJvcignSWRlbnRpdHkgTW9kdWxlIG5vdCBzZXQhJyk7XG4gICAgaWYgKCFtZXNzYWdlQnVzKSB0aHJvdyBFcnJvcignTWVzc2FnZSBCdXMgbm90IHNldCEnKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLl9ndWlVUkwgPSBndWlVUkw7XG4gICAgX3RoaXMuX2lkbVVSTCA9IGlkbVVSTDtcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICB0aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2RlcGxveUdVSScsIHt9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9idWlsZERyYXdlcigpO1xuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1JFQURZOicsIHJlc3VsdCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmlzTG9nZ2VkID0gZmFsc2U7XG5cbiAgICBjb25zdCBkcmF3ZXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZGMtdGVtcG9yYXJ5LWRyYXdlcicpO1xuICAgIGNvbnN0IE1EQ1RlbXBvcmFyeURyYXdlciA9IG1kYy5kcmF3ZXIuTURDVGVtcG9yYXJ5RHJhd2VyO1xuICAgIGNvbnN0IGRyYXdlciA9IG5ldyBNRENUZW1wb3JhcnlEcmF3ZXIoZHJhd2VyRWwpO1xuXG4gICAgdGhpcy5fZHJhd2VyRWwgPSBkcmF3ZXJFbDtcbiAgICB0aGlzLl9kcmF3ZXIgPSBkcmF3ZXI7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtYnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGRyYXdlci5vcGVuID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGRyYXdlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ01EQ1RlbXBvcmFyeURyYXdlcjpvcGVuJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIE1EQ1RlbXBvcmFyeURyYXdlcjpvcGVuJyk7XG5cbiAgICAgIHRoaXMuX2lzRHJhd2VyT3BlbiA9IHRydWU7XG4gICAgICBwYXJlbnQucG9zdE1lc3NhZ2UoeyBib2R5OiB7IG1ldGhvZDogJ3Nob3dBZG1pblBhZ2UnIH0sIHRvOiAncnVudGltZTpndWktbWFuYWdlcicgfSwgJyonKTtcbiAgICB9KTtcblxuICAgIGRyYXdlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ01EQ1RlbXBvcmFyeURyYXdlcjpjbG9zZScsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBNRENUZW1wb3JhcnlEcmF3ZXI6Y2xvc2UnKTtcbiAgICAgIHRoaXMuX2lzRHJhd2VyT3BlbiA9IGZhbHNlO1xuICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKHsgYm9keTogeyBtZXRob2Q6ICdoaWRlQWRtaW5QYWdlJyB9LCB0bzogJ3J1bnRpbWU6Z3VpLW1hbmFnZXInIH0sICcqJyk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIGxvZ091dCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnNvbGUubG9nKCdJZGVudGl0aWVzR1VJOiBsb2dnaW5nIG91dCcpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdCdWlsZGluZyBkcmF3ZXInKTtcbiAgICAgIF90aGlzLl9idWlsZERyYXdlcigpO1xuXG4gICAgICByZXNvbHZlKCdHdWkgcmVzZXQnKTtcblxuXG4gICAgfSk7XG4gIH1cblxuICBfYnVpbGREcmF3ZXIoKSB7XG5cbiAgICBjb25zdCBndWlVUkwgPSB0aGlzLl9ndWlVUkw7XG5cbiAgICB0aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGd1aVVSTCwgbXNnID0+IHtcblxuICAgICAgY29uc3QgZnVuY05hbWUgPSBtc2cuYm9keS5tZXRob2Q7XG5cbiAgICAgIGlmIChtc2cudHlwZSAhPT0gJ3Jlc3BvbnNlJykge1xuXG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTG9nZ2VkKSB7XG5cbiAgICAgICAgICBjb25zdCBjbGlja0Nsb3NlID0gbmV3IE1vdXNlRXZlbnQoJ2NsaWNrJyk7XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzLWJ0bicpLmRpc3BhdGNoRXZlbnQoY2xpY2tDbG9zZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGlmIChmdW5jTmFtZSA9PT0gJ29wZW5Qb3B1cCcpIHtcblxuICAgICAgICB0aGlzLm9wZW5Qb3B1cCgpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgbGV0IHVybHJlY2VpdmVkID0gbXNnLmJvZHkucGFyYW1zLnVybHJlY2VpdmVkO1xuICAgICAgICAgIHRoaXMub3BlblBvcHVwKHVybHJlY2VpdmVkKS50aGVuKChyZXR1cm5lZFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB7dHlwZTogJ2V4ZWN1dGUnLCB2YWx1ZTogcmV0dXJuZWRWYWx1ZSwgY29kZTogMjAwfTtcbiAgICAgICAgICAgIGxldCByZXBseU1zZyA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWV9O1xuICAgICAgICAgICAgdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGlkZW50aXR5SW5mbykgPT4ge1xuXG4gICAgICAgIHRoaXMuaXNMb2dnZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2J1aWxkTWVzc2FnZShtc2csIGlkZW50aXR5SW5mbyk7XG5cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgICAgdGhpcy5fZ2V0SWRlbnRpdGllcyhjYWxsYmFjaywgdHJ1ZSk7XG5cbiAgICB9KTtcblxuICAgIHRoaXMuX2dldElkZW50aXRpZXMoKTtcblxuICB9XG5cbiAgX2J1aWxkTWVzc2FnZShtc2csIGlkZW50aXR5SW5mbykge1xuICAgIGxldCByZXBseU1zZztcbiAgICBsZXQgdmFsdWU7XG5cbiAgICBjb25zdCBmcm9tID0gbXNnID8gbXNnLmZyb20gOiB0aGlzLl9ndWlVUkw7XG4gICAgY29uc3QgdG8gPSBtc2cgPyBtc2cudG8gOiB0aGlzLl9pZG1VUkw7XG5cbiAgICBjb25zb2xlLmxvZygnY2hvc2VuIGlkZW50aXR5OiAnLCBpZGVudGl0eUluZm8pO1xuXG4gICAgc3dpdGNoIChpZGVudGl0eUluZm8udHlwZSkge1xuICAgICAgY2FzZSAnaWRwJzpcbiAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZHAnLCB2YWx1ZTogaWRlbnRpdHlJbmZvLnZhbHVlLCBjb2RlOiAyMDAgfTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2lkZW50aXR5JzpcbiAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZGVudGl0eScsIHZhbHVlOiBpZGVudGl0eUluZm8udmFsdWUsIGNvZGU6IDIwMCB9O1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdlcnJvcicsIHZhbHVlOiAnRXJyb3Igb24gaWRlbnRpdHkgR1VJJywgY29kZTogNDAwIH07XG4gICAgfVxuXG4gICAgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IGZyb20sIGZyb206IHRvLCBib2R5OiB2YWx1ZSB9O1xuXG4gICAgdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gIH1cblxuICBfZ2V0SWRlbnRpdGllcyhjYWxsYmFjaywgb1BlbkRyYXdlcikge1xuXG4gICAgcmV0dXJuIHRoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnZ2V0SWRlbnRpdGllc1RvQ2hvb3NlJywge30pLnRoZW4oKHJlc3VsdE9iamVjdCkgPT4ge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5zaG93SWRwcyhyZXN1bHRPYmplY3QuaWRwcywgY2FsbGJhY2spLCB0aGlzLnNob3dEZWZhdWx0SWRlbnRpdHkocmVzdWx0T2JqZWN0LmRlZmF1bHRJZGVudGl0eSksIHRoaXMuc2hvd0lkZW50aXRpZXMocmVzdWx0T2JqZWN0LCBjYWxsYmFjaywgb1BlbkRyYXdlcildKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5zaG93SWRwcyhyZXN1bHRPYmplY3QuaWRwcyksIHRoaXMuc2hvd0RlZmF1bHRJZGVudGl0eShyZXN1bHRPYmplY3QuZGVmYXVsdElkZW50aXR5KSwgdGhpcy5zaG93SWRlbnRpdGllcyhyZXN1bHRPYmplY3QpXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8vIF9vcGVuRHJhd2VyKCkge1xuXG4gIC8vICAgbGV0IF90aGlzID0gdGhpcztcbiAgLy8gICBjb25zdCBndWlVUkwgPSBfdGhpcy5fZ3VpVVJMO1xuXG4gIC8vICAgX3RoaXMucmVzdWx0VVJMICA9IHVuZGVmaW5lZDtcblxuICAvLyAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGd1aVVSTCwgbXNnID0+IHtcbiAgLy8gICAgIGxldCBpZGVudGl0eUluZm8gPSBtc2cuYm9keS52YWx1ZTtcbiAgLy8gICAgIGxldCBmdW5jTmFtZSA9IG1zZy5ib2R5Lm1ldGhvZDtcbiAgLy8gICAgIGxldCB2YWx1ZTtcbiAgLy8gICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSV0gcmVjZWl2ZWQgbXNnOiAnLCBtc2cpO1xuXG4gIC8vICAgICBfdGhpcy5zaG93SWRlbnRpdGllc0dVSShtc2cuYm9keS52YWx1ZSkudGhlbigoaWRlbnRpdHlJbmZvKSA9PiB7XG5cbiAgLy8gICAgICAgbGV0IHJlcGx5TXNnO1xuICAvLyAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUldIGlkZW50aXR5SW5mbyBmcm9tIEdVSTogJywgaWRlbnRpdHlJbmZvKTtcblxuICAvLyAgICAgICAvL2hpZGUgY29uZmlnIHBhZ2Ugd2l0aCB0aGUgaWRlbnRpdHkgR1VJXG4gIC8vICAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7IGJvZHk6IHsgbWV0aG9kOiAnaGlkZUFkbWluUGFnZScgfSwgdG86ICdydW50aW1lOmd1aS1tYW5hZ2VyJyB9LCAnKicpO1xuICAvLyAgICAgICAkKCcuYWRtaW4tcGFnZScpLmFkZENsYXNzKCdoaWRlJyk7XG5cbiAgLy8gICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5zdHlsZSA9ICdiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50JztcbiAgLy8gICAgICAgJCgnLmlkZW50aXRpZXMtc2VjdGlvbicpLmFkZENsYXNzKCdoaWRlJyk7XG4gIC8vICAgICAgICQoJy5wb2xpY2llcy1zZWN0aW9uJykuYWRkQ2xhc3MoJ2hpZGUnKTtcblxuICAvLyAgICAgICBzd2l0Y2ggKGlkZW50aXR5SW5mby50eXBlKSB7XG4gIC8vICAgICAgICAgY2FzZSAnaWRwJzpcbiAgLy8gICAgICAgICAgIHZhbHVlID0geyB0eXBlOiAnaWRwJywgdmFsdWU6IGlkZW50aXR5SW5mby52YWx1ZSwgY29kZTogMjAwIH07XG4gIC8vICAgICAgICAgICByZXBseU1zZyA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlIH07XG4gIC8vICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gIC8vICAgICAgICAgICBicmVhaztcblxuICAvLyAgICAgICAgIGNhc2UgJ2lkZW50aXR5JzpcbiAgLy8gICAgICAgICAgIHZhbHVlID0geyB0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogaWRlbnRpdHlJbmZvLnZhbHVlLCBjb2RlOiAyMDAgfTtcbiAgLy8gICAgICAgICAgIHJlcGx5TXNnID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWUgfTtcbiAgLy8gICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgLy8gICAgICAgICAgIGJyZWFrO1xuXG4gIC8vICAgICAgICAgZGVmYXVsdDpcbiAgLy8gICAgICAgICAgIHZhbHVlID0geyB0eXBlOiAnZXJyb3InLCB2YWx1ZTogJ0Vycm9yIG9uIGlkZW50aXR5IEdVSScsIGNvZGU6IDQwMCB9O1xuICAvLyAgICAgICAgICAgcmVwbHlNc2cgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZSB9O1xuICAvLyAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgaWYgKGZ1bmNOYW1lID09PSAnb3BlblBvcHVwJykge1xuICAvLyAgICAgICBsZXQgdXJscmVjZWl2ZWQgPSBtc2cuYm9keS5wYXJhbXMudXJscmVjZWl2ZWQ7XG4gIC8vICAgICAgIF90aGlzLm9wZW5Qb3B1cCh1cmxyZWNlaXZlZCkudGhlbigocmV0dXJuZWRWYWx1ZSkgPT4ge1xuICAvLyAgICAgICAgIGxldCB2YWx1ZSA9IHt0eXBlOiAnZXhlY3V0ZScsIHZhbHVlOiByZXR1cm5lZFZhbHVlLCBjb2RlOiAyMDB9O1xuICAvLyAgICAgICAgIGxldCByZXBseU1zZyA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWV9O1xuICAvLyAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgLy8gICAgICAgfSk7XG4gIC8vICAgICAgIHJldHVybjsgLy8gdGhpcyBhdm9pZHMgZ2V0dGluZyBzdHVjayBpbiB0aGUgaWRlbnRpdGllcyBwYWdlXG4gIC8vICAgICB9XG5cbiAgLy8gICAgIC8vIHVuaGlkZSB0aGUgY29uZmlnIHBhZ2Ugd2l0aCB0aGUgaWRlbnRpdHkgR1VJXG4gIC8vICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLnN0eWxlID0gJ2JhY2tncm91bmQtY29sb3I6d2hpdGU7JztcbiAgLy8gICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7IGJvZHk6IHsgbWV0aG9kOiAnc2hvd0FkbWluUGFnZScgfSwgdG86ICdydW50aW1lOmd1aS1tYW5hZ2VyJyB9LCAnKicpO1xuXG4gIC8vICAgICBjb25zdCBjbGlja09wZW4gPSBuZXcgTW91c2VFdmVudCgnY2xpY2snKTtcbiAgLy8gICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5ncy1idG4nKS5kaXNwYXRjaEV2ZW50KGNsaWNrT3Blbik7XG5cbiAgLy8gICAgICQoJy5hZG1pbi1wYWdlJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblxuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgY2FsbElkZW50aXR5TW9kdWxlRnVuYyhtZXRob2ROYW1lLCBwYXJhbWV0ZXJzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0geyB0eXBlOiAnZXhlY3V0ZScsIHRvOiBfdGhpcy5faWRtVVJMLCBmcm9tOiBfdGhpcy5fZ3VpVVJMLFxuICAgICAgICBib2R5OiB7IHJlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6IG1ldGhvZE5hbWUsIHBhcmFtczogcGFyYW1ldGVycyB9fTtcblxuICAgICAgdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSByZXMuYm9keS52YWx1ZTtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIG9wZW5Qb3B1cCh1cmxyZWNlaXZlZCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IHdpbjtcbiAgICAgIGlmICghdXJscmVjZWl2ZWQpIHtcbiAgICAgICAgd2luID0gd2luZG93Lm9wZW4oJycsICdvcGVuSURyZXF1ZXN0JywgJ2xvY2F0aW9uPTEsc3RhdHVzPTEnKTtcbiAgICAgICAgdGhpcy53aW4gPSB3aW47XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHRoaXMud2luO1xuICAgICAgICB3aW4ubG9jYXRpb24uaHJlZiA9IHVybHJlY2VpdmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBsZXQgd2luID0gd2luZG93Lm9wZW4odXJscmVjZWl2ZWQsICdvcGVuSURyZXF1ZXN0JywgJ2xvY2F0aW9uPTEsc3RhdHVzPTEsc2Nyb2xsYmFycz0xJyk7XG4gICAgICBpZiAod2luZG93LmNvcmRvdmEpIHtcbiAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBsZXQgdXJsID0gZS51cmw7XG4gICAgICAgICAgbGV0IGNvZGUgPSAvXFwmY29kZT0oLispJC8uZXhlYyh1cmwpO1xuICAgICAgICAgIGxldCBlcnJvciA9IC9cXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpO1xuXG4gICAgICAgICAgaWYgKGNvZGUgfHwgZXJyb3IpIHtcbiAgICAgICAgICAgIHdpbi5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodXJsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnb3BlblBvcHVwIGVycm9yIDEgLSBzaG91bGQgbm90IGhhcHBlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGxldCBwb2xsVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHdpbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChwb2xsVGltZXIpO1xuXG4gICAgICAgICAgICAgIC8vIHJldHVybiByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdhY2Nlc3NfdG9rZW4nKSAhPT0gLTEgfHwgd2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdjb2RlJykgIT09IC0xKSAmJiB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTtcbiAgICAgICAgICAgICAgbGV0IHVybCA9ICAgd2luLmRvY3VtZW50LlVSTDtcblxuICAgICAgICAgICAgICByZXNvbHZlKHVybCk7XG4gICAgICAgICAgICAgIHJldHVybiB3aW4uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvL3JldHVybiByZWplY3QoJ29wZW5Qb3B1cCBlcnJvciAyIC0gc2hvdWxkIG5vdCBoYXBwZW4nKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9LCA1MDApO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvLyBzaG93SWRlbnRpdGllc0dVSShyZWNlaXZlZEluZm8pIHtcbiAgLy8gICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gIC8vICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgLy8gICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5zaG93SWRlbnRpdGllc0dVSV0gcmVjZWl2ZWRJbmZvOiAnLCByZWNlaXZlZEluZm8pO1xuXG4gIC8vICAgICBsZXQgaWRlbnRpdHlJbmZvO1xuICAvLyAgICAgbGV0IHRvUmVtb3ZlSUQ7XG5cbiAgLy8gICAgIGxldCBjYWxsYmFjayA9ICh2YWx1ZSkgPT4ge1xuICAvLyAgICAgICBjb25zb2xlLmxvZygnY2hvc2VuIGlkZW50aXR5OiAnLCB2YWx1ZSk7XG5cbiAgLy8gICAgICAgY29uc3QgY2xpY2tDbG9zZSA9IG5ldyBNb3VzZUV2ZW50KCdjbGljaycpO1xuICAvLyAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtYnRuJykuZGlzcGF0Y2hFdmVudChjbGlja0Nsb3NlKTtcblxuICAvLyAgICAgICByZXNvbHZlKHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogdmFsdWV9KTtcbiAgLy8gICAgIH07XG5cbiAgLy8gICAgIF90aGlzLl9jaGVja1JlY2VpdmVkSW5mbyhyZWNlaXZlZEluZm8pLnRoZW4oKHJlc3VsdE9iamVjdCkgPT4ge1xuICAvLyAgICAgICBpZGVudGl0eUluZm8gPSByZXN1bHRPYmplY3QuaWRlbnRpdHlJbmZvO1xuICAvLyAgICAgICB0b1JlbW92ZUlEID0gcmVzdWx0T2JqZWN0LnRvUmVtb3ZlSUQ7XG5cbiAgLy8gICAgICAgJCgnLnBvbGljaWVzLXNlY3Rpb24nKS5hZGRDbGFzcygnaGlkZScpO1xuICAvLyAgICAgICAkKCcuaWRlbnRpdGllcy1zZWN0aW9uJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblxuICAvLyAgICAgICBfdGhpcy5zaG93SWRwcyhyZWNlaXZlZEluZm8uaWRwcywgY2FsbGJhY2spO1xuXG4gIC8vICAgICAgIF90aGlzLnNob3dJZGVudGl0aWVzKGlkZW50aXR5SW5mby5pZGVudGl0aWVzLCB0b1JlbW92ZUlEKS50aGVuKChpZGVudGl0eSkgPT4ge1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdjaG9zZW4gaWRlbnRpdHk6ICcsIGlkZW50aXR5KTtcbiAgLy8gICAgICAgICByZXNvbHZlKHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogaWRlbnRpdHl9KTtcbiAgLy8gICAgICAgfSk7XG5cbiAgLy8gICAgICAgbGV0IGlkcHMgPSBbXTtcbiAgLy8gICAgICAgbGV0IGlkcHNPYmplY3RzID0gaWRlbnRpdHlJbmZvLmlkcHM7XG5cbiAgLy8gICAgICAgaWRwc09iamVjdHMuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xuICAvLyAgICAgICAgIGlmKGVudHJ5LnR5cGUgJiYgZW50cnkudHlwZSA9PSAnaWRUb2tlbicpIHtcbiAgLy8gICAgICAgICAgIGlkcHMucHVzaChlbnRyeS5kb21haW4pO1xuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgfSk7XG5cbiAgLy8gICAgICAgJCgnI2lkcHJvdmlkZXJzJykuaHRtbChfdGhpcy5fZ2V0TGlzdChpZHBzKSk7XG4gIC8vICAgICAgICQoJyNpZHByb3ZpZGVycycpLm9mZigpO1xuICAvLyAgICAgICAvLyAkKCcjaWRwcm92aWRlcnMnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IF90aGlzLm9idGFpbk5ld0lkZW50aXR5KGV2ZW50LCBjYWxsYmFjaywgdG9SZW1vdmVJRCkpO1xuICAvLyAgICAgICAvLyQoJy5iYWNrJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiBfdGhpcy5nb0hvbWUoKSk7XG4gIC8vICAgICAgICQoJy5pZGVudGl0aWVzLXJlc2V0Jykub2ZmKCk7XG4gIC8vICAgICAgIC8vICQoJy5pZGVudGl0aWVzLXJlc2V0Jykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiBfdGhpcy5fcmVzZXRJZGVudGl0aWVzKGNhbGxiYWNrKSk7XG4gIC8vICAgICB9KTtcbiAgLy8gICB9KTtcbiAgLy8gfVxuXG4gIF9jaGVja1JlY2VpdmVkSW5mbyhyZWNlaXZlZEluZm8pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBpZGVudGl0eUluZm87XG4gICAgICBsZXQgdG9SZW1vdmVJRDtcblxuICAgICAgaWYgKHJlY2VpdmVkSW5mbykge1xuICAgICAgICBpZGVudGl0eUluZm8gPSByZWNlaXZlZEluZm87XG4gICAgICAgIHRvUmVtb3ZlSUQgPSBmYWxzZTtcbiAgICAgICAgcmVzb2x2ZSh7aWRlbnRpdHlJbmZvOiBpZGVudGl0eUluZm8sIHRvUmVtb3ZlSUQ6IHRvUmVtb3ZlSUR9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvUmVtb3ZlSUQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdnZXRJZGVudGl0aWVzVG9DaG9vc2UnLCB7fSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSh7aWRlbnRpdHlJbmZvOiByZXN1bHQsIHRvUmVtb3ZlSUQ6IHRvUmVtb3ZlSUR9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzaG93SWRwcyhpZHBzKSB7XG5cbiAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkuc2hvd0lkcHNdIDogJywgaWRwcyk7XG5cbiAgICBsZXQgaWRwc0xpc3RFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZHBzLWxpc3QnKTtcblxuICAgIGNvbnN0IGNsaWNrRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGVsID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgIGNvbnN0IGlkcCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pZHAnKTtcblxuICAgICAgdGhpcy5sb2dpbldpdGhJRFAoaWRwKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3ZhbHVlIGhlcmU6ICcsIHJlc3VsdC52YWx1ZSk7XG4gICAgICAgIC8vIHJlc3VsdC52YWx1ZSA9IHJlc3VsdC52YWx1ZS51c2VyVVJMXG5cbiAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlkcHMuZm9yRWFjaCgoa2V5KSA9PiB7XG5cbiAgICAgIGxldCBsaW5rRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluay0nICsga2V5LmRvbWFpbik7XG5cbiAgICAgIGlmICghbGlua0VsKSB7XG4gICAgICAgIGxpbmtFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgbGlua0VsLnNldEF0dHJpYnV0ZSgnaWQnLCAnbGluay0nICsga2V5LmRvbWFpbik7XG4gICAgICAgIGxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWRwJywga2V5LmRvbWFpbik7XG4gICAgICAgIGxpbmtFbC5jbGFzc0xpc3QgPSAnbWRjLWxpc3QtaXRlbSBsaW5rLScgKyBrZXkuZG9tYWluO1xuICAgICAgICBsaW5rRWwuaHJlZiA9ICcjJztcblxuICAgICAgICBjb25zdCBsaW5rRWxUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoa2V5LmRvbWFpbik7XG5cbiAgICAgICAgbGV0IG5hbWUgPSBrZXkuZG9tYWluO1xuICAgICAgICBpZiAobmFtZS5pbmRleE9mKCcuJykgIT09IC0xKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUuaW5kZXhPZignLicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYW1lID0gJ3F1ZXN0aW9uJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGltZ0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIGltZ0VsLmNsYXNzTGlzdCA9ICdtZGMtbGlzdC1pdGVtX19zdGFydC1kZXRhaWwnO1xuICAgICAgICBpbWdFbC5zcmMgPSAnLi9hc3NldHMvJyArIG5hbWUgKyAnLnN2Zyc7XG4gICAgICAgIGltZ0VsLndpZHRoID0gMzA7XG4gICAgICAgIGltZ0VsLmhlaWdodCA9IDMwO1xuXG4gICAgICAgIGltZ0VsLm9uZXJyb3IgPSAoZSkgPT4geyBlLnNyY0VsZW1lbnQuc3JjID0gJy4vYXNzZXRzL3F1ZXN0aW9uLnN2Zyc7IH07XG5cbiAgICAgICAgbGlua0VsLmFwcGVuZENoaWxkKGltZ0VsKTtcbiAgICAgICAgbGlua0VsLmFwcGVuZENoaWxkKGxpbmtFbFRleHQpO1xuXG4gICAgICAgIGlkcHNMaXN0RWwuYXBwZW5kQ2hpbGQobGlua0VsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmtFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrRXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBsaW5rRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0V2ZW50KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICBzaG93RGVmYXVsdElkZW50aXR5KGlkZW50aXR5KSB7XG5cbiAgICBpZiAoaWRlbnRpdHkpIHtcblxuICAgICAgdGhpcy5pc0xvZ2dlZCA9IHRydWU7XG5cbiAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZGMtbGlzdC0tYXZhdGFyLWxpc3QnKTtcblxuICAgICAgbGV0IGl0ZW1FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpdGVtLScgKyBpZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMKTtcblxuICAgICAgaWYgKCFpdGVtRWwpIHtcblxuICAgICAgICBpdGVtRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBpdGVtRWwuaWQgPSAnaXRlbS0nICsgaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTDtcbiAgICAgICAgaXRlbUVsLmNsYXNzTGlzdCA9ICdtZGMtbGlzdC1pdGVtIGl0ZW0tJyArIGlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkw7XG4gICAgICAgIGl0ZW1FbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlclVSTCcsIGlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwpO1xuXG4gICAgICAgIGNvbnN0IHByb2ZpbGVJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBwcm9maWxlSW1hZ2UuY2xhc3NMaXN0ID0gJ21kYy1saXN0LWl0ZW1fX3N0YXJ0LWRldGFpbCc7XG4gICAgICAgIHByb2ZpbGVJbWFnZS53aWR0aCA9IDU2O1xuICAgICAgICBwcm9maWxlSW1hZ2UuaGVpZ2h0ID0gNTY7XG4gICAgICAgIHByb2ZpbGVJbWFnZS5hbHQgPSBpZGVudGl0eS51c2VyUHJvZmlsZS5uYW1lO1xuICAgICAgICBwcm9maWxlSW1hZ2Uuc3JjID0gaWRlbnRpdHkudXNlclByb2ZpbGUucGljdHVyZTtcbiAgICAgICAgaXRlbUVsLmFwcGVuZENoaWxkKHByb2ZpbGVJbWFnZSk7XG5cbiAgICAgICAgY29uc3QgdGV4dDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRleHQxLmNsYXNzTGlzdCA9ICduYW1lIG1kYy1saXN0LWl0ZW1fX3RleHQnO1xuICAgICAgICB0ZXh0MS50ZXh0Q29udGVudCA9IGlkZW50aXR5LnVzZXJQcm9maWxlLm5hbWU7XG5cbiAgICAgICAgY29uc3QgdGV4dDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRleHQyLmNsYXNzTGlzdCA9ICdlbWFpbCBtZGMtbGlzdC1pdGVtX19zZWNvbmRhcnktdGV4dCc7XG4gICAgICAgIHRleHQyLnRleHRDb250ZW50ID0gaWRlbnRpdHkudXNlclByb2ZpbGUuZW1haWw7XG5cbiAgICAgICAgdGV4dDEuYXBwZW5kQ2hpbGQodGV4dDIpO1xuICAgICAgICBpdGVtRWwuYXBwZW5kQ2hpbGQodGV4dDEpO1xuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoaXRlbUVsKTtcblxuICAgICAgfVxuXG4gICAgfVxuXG4gIH1cblxuICBzaG93SWRlbnRpdGllcyhpRHMsIGNhbGxiYWNrLCBvUGVuRHJhd2VyID0gZmFsc2UpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5zaG93TXlJZGVudGl0aWVzXSA6ICcsIGlEcy5pZGVudGl0aWVzLCBpRHMuZGVmYXVsdElkZW50aXR5KTtcblxuICAgICAgY29uc3QgaWRlbnRpdGllcyA9IGlEcy5pZGVudGl0aWVzO1xuICAgICAgY29uc3QgY3VycmVudCA9IGlEcy5kZWZhdWx0SWRlbnRpdHkgPyBpRHMuZGVmYXVsdElkZW50aXR5LnVzZXJVUkwgOiAnJztcblxuICAgICAgbGV0IGFjdGl2ZUlkZW50aXRpZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWN0aXZlLWlkZW50aXRpZXMnKTtcblxuICAgICAgT2JqZWN0LmtleXMoaWRlbnRpdGllcykuZm9yRWFjaCgoa2V5KSA9PiB7XG5cbiAgICAgICAgY29uc3QgZXhpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluay0nICsga2V5KTtcbiAgICAgICAgaWYgKGV4aXN0KSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0IGxpbmtFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgbGlua0VsLmhyZWYgPSAnIyc7XG4gICAgICAgIGxpbmtFbC5pZCA9ICdsaW5rLScgKyBrZXk7XG4gICAgICAgIGxpbmtFbC5jbGFzc0xpc3QgPSAnbWRjLWxpc3QtaXRlbSc7XG4gICAgICAgIGxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlclVSTCcsIGtleSk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gY3VycmVudCkge1xuICAgICAgICAgIGxpbmtFbC5jbGFzc0xpc3QgKz0gJyBtZGMtdGVtcG9yYXJ5LWRyYXdlci0tc2VsZWN0ZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgY29uc3QgZWwgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIGNvbnN0IHVzZXJVUkwgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlclVSTCcpO1xuXG4gICAgICAgICAgY29uc29sZS5sb2coJ3VzZXJVUkw6JywgdXNlclVSTCwgY2FsbGJhY2ssIGVsKTtcblxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sodXNlclVSTCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHByb2ZpbGVJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBwcm9maWxlSW1hZ2UuY2xhc3NMaXN0ID0gJ21kYy1saXN0LWl0ZW1fX3N0YXJ0LWRldGFpbCc7XG4gICAgICAgIHByb2ZpbGVJbWFnZS53aWR0aCA9IDQwO1xuICAgICAgICBwcm9maWxlSW1hZ2UuaGVpZ2h0ID0gNDA7XG4gICAgICAgIHByb2ZpbGVJbWFnZS5hbHQgPSBpZGVudGl0aWVzW2tleV0udXNlclByb2ZpbGUubmFtZTtcbiAgICAgICAgcHJvZmlsZUltYWdlLnNyYyA9IGlkZW50aXRpZXNba2V5XS51c2VyUHJvZmlsZS5waWN0dXJlO1xuICAgICAgICBwcm9maWxlSW1hZ2Uub25lcnJvciA9IChlKSA9PiB7IGUuc3JjRWxlbWVudC5zcmMgPSAnLi9hc3NldHMvcXVlc3Rpb24uc3ZnJzsgfTtcblxuICAgICAgICBjb25zdCB0ZXh0MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgdGV4dDEuY2xhc3NMaXN0ID0gJ25hbWUgbWRjLWxpc3QtaXRlbV9fdGV4dCc7XG4gICAgICAgIHRleHQxLnRleHRDb250ZW50ID0gaWRlbnRpdGllc1trZXldLnVzZXJQcm9maWxlLm5hbWU7XG5cbiAgICAgICAgY29uc3QgdGV4dDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRleHQyLmNsYXNzTGlzdCA9ICdlbWFpbCBtZGMtbGlzdC1pdGVtX19zZWNvbmRhcnktdGV4dCc7XG4gICAgICAgIHRleHQyLnRleHRDb250ZW50ID0gaWRlbnRpdGllc1trZXldLnVzZXJQcm9maWxlLmVtYWlsO1xuXG4gICAgICAgIHRleHQxLmFwcGVuZENoaWxkKHRleHQyKTtcblxuICAgICAgICBsaW5rRWwuYXBwZW5kQ2hpbGQocHJvZmlsZUltYWdlKTtcbiAgICAgICAgbGlua0VsLmFwcGVuZENoaWxkKHRleHQxKTtcblxuICAgICAgICBhY3RpdmVJZGVudGl0aWVzLmFwcGVuZENoaWxkKGxpbmtFbCk7XG5cbiAgICAgIH0pO1xuXG4gICAgICBpZiAob1BlbkRyYXdlcikge1xuICAgICAgICB0aGlzLl9kcmF3ZXIub3BlbiA9IHRydWVcbiAgICAgIH1cblxuLypcbiAgICAgIGlmIChPYmplY3Qua2V5cyhpZGVudGl0aWVzKS5sZW5ndGggPT09IDEpIHtcblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayh7dHlwZTogJ2lkZW50aXR5JywgdmFsdWU6IGN1cnJlbnR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNvbHZlKHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogY3VycmVudH0pO1xuICAgICAgfSovXG5cblxuICAgICAgLy8gbGV0IGNhbGxiYWNrID0gKGlkZW50aXR5KSA9PiB7XG4gICAgICAvLyAgIHJlc29sdmUoaWRlbnRpdHkpO1xuICAgICAgLy8gfTtcblxuICAgICAgLy8gaWYgKCF0b1JlbW92ZUlEKSB7XG4gICAgICAvLyAgICQoJy5jbGlja2FibGUtY2VsbCcpLm9uKCdjbGljaycsIChldmVudCkgPT4gX3RoaXMuY2hhbmdlSUQoZXZlbnQsIGNhbGxiYWNrKSk7XG4gICAgICAvLyB9XG5cbiAgICAgIC8vICQoJy5yZW1vdmUtaWQnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IF90aGlzLnJlbW92ZUlEKGlEcykpO1xuXG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVJRChldmVudCwgZW1haWxzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgcm93ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICBsZXQgaWRUb1JlbW92ZSA9IHJvdy5jaGlsZHJlblswXS50ZXh0Q29udGVudDtcbiAgICBsZXQgZG9tYWluID0gcm93LmNoaWxkcmVuWzFdLnRleHRDb250ZW50O1xuXG4gICAgX3RoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygndW5yZWdpc3RlcklkZW50aXR5JywgeyBlbWFpbDogaWRUb1JlbW92ZSB9KS50aGVuKCgpID0+IHtcbiAgICAgIGxldCBudW1FbWFpbHMgPSBlbWFpbHMubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1FbWFpbHM7IGkrKykge1xuICAgICAgICBpZiAoZW1haWxzW2ldLmVtYWlsID09PSBpZFRvUmVtb3ZlKSB7XG4gICAgICAgICAgZW1haWxzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy9cbiAgICAgIF90aGlzLnNob3dJZGVudGl0aWVzKGVtYWlscywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICAvL190aGlzLmlkZW50aXR5TW9kdWxlLnVucmVnaXN0ZXJJZGVudGl0eShpZFRvUmVtb3ZlKTtcblxuICB9XG5cbiAgbG9naW5XaXRoSURQKGlkcCkge1xuXG5cbiAgICBsZXQgX3B1YmxpY0tleTtcblxuICAgIHJldHVybiB0aGlzLm9wZW5Qb3B1cCgpXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2dldE15UHVibGljS2V5Jywge30pO1xuICAgICAgfSkudGhlbigocHVibGljS2V5KSA9PiB7XG4gICAgICAgIF9wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7IGNvbnRlbnRzOiBwdWJsaWNLZXksIG9yaWdpbjogJ29yaWdpbicsIHVzZXJuYW1lSGludDogdW5kZWZpbmVkLCBpZHBEb21haW46IGlkcCB9O1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdzZW5kR2VuZXJhdGVNZXNzYWdlJywgZGF0YSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5vYnRhaW5OZXdJZGVudGl0eV0gcmVjZWl2ZWRVUkwgZnJvbSBpZHAgUHJveHk6ICcgKyB2YWx1ZS5sb2dpblVybC5zdWJzdHJpbmcoMCwgMjApICsgJy4uLicpO1xuXG4gICAgICAgIGxldCB1cmwgPSB2YWx1ZS5sb2dpblVybDtcbiAgICAgICAgbGV0IGZpbmFsVVJMO1xuXG4gICAgICAgIC8vY2hlY2sgaWYgdGhlIHJlY2VpdmVkVVJMIGNvbnRhaW5zIHRoZSByZWRpcmVjdCBmaWVsZCBhbmQgcmVwbGFjZSBpdFxuICAgICAgICBpZiAodXJsLmluZGV4T2YoJ3JlZGlyZWN0X3VyaScpICE9PSAtMSkge1xuICAgICAgICAgIGxldCBmaXJzdFBhcnQgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSk7XG4gICAgICAgICAgbGV0IHNlY29uZEF1eFBhcnQgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSwgdXJsLmxlbmd0aCk7XG5cbiAgICAgICAgICBsZXQgc2Vjb25kUGFydCA9IHNlY29uZEF1eFBhcnQuc3Vic3RyaW5nKHNlY29uZEF1eFBhcnQuaW5kZXhPZignJicpLCB1cmwubGVuZ3RoKTtcblxuICAgICAgICAgIC8vY2hlY2sgaWYgdGhlIHJlZGRpcmVjdCBmaWVsZCBpcyB0aGUgbGFzdCBmaWVsZCBvZiB0aGUgVVJMXG4gICAgICAgICAgaWYgKHNlY29uZFBhcnQuaW5kZXhPZignJicpICE9PSAtMSkge1xuICAgICAgICAgICAgZmluYWxVUkwgPSBmaXJzdFBhcnQgKyAncmVkaXJlY3RfdXJpPScgKyBsb2NhdGlvbi5vcmlnaW4gKyBzZWNvbmRQYXJ0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc3VsdFVSTCA9IGZpbmFsVVJMIHx8IHVybDtcblxuICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkub3BlblBvcHVwXScsIHRoaXMucmVzdWx0VVJMKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlblBvcHVwKHRoaXMucmVzdWx0VVJMKTtcbiAgICAgIH0pLnRoZW4oKGlkZW50aXR5KSA9PiB7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tJZGVudGl0aWVzR1VJLm9wZW5Qb3B1cC5yZXN1bHRdJywgaWRlbnRpdHkpO1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7IGNvbnRlbnRzOiBfcHVibGljS2V5LCBvcmlnaW46ICdvcmlnaW4nLCB1c2VybmFtZUhpbnQ6IGlkZW50aXR5LCBpZHBEb21haW46IGlkcCB9O1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdzZW5kR2VuZXJhdGVNZXNzYWdlJywgZGF0YSk7XG4gICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkuc2VuZEdlbmVyYXRlTWVzc2FnZS5yZXN1bHRdJywgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnYWRkQXNzZXJ0aW9uJywgcmVzdWx0KTtcbiAgICAgIH0pLnRoZW4oKHZhbHVlKSA9PiB7XG5cbiAgICAgICAgdGhpcy5fZHJhd2VyLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdXNlclVSTCA9IHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogdmFsdWUudXNlclByb2ZpbGUudXNlclVSTH07XG4gICAgICAgIC8vIGNvbnN0IHVzZXJJZGVudGl0eSA9IHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogdmFsdWUudXNlclByb2ZpbGV9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5sb2dpbldpdGhJRFAgZmluYWxdJywgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdXNlclVSTDtcbiAgICAgICAgLy8gcmV0dXJuIHVzZXJJZGVudGl0eTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICAvLyBvYnRhaW5OZXdJZGVudGl0eShldmVudCwgY2FsbGJhY2ssIHRvUmVtb3ZlSUQpIHtcbiAgLy8gICBsZXQgX3RoaXMgPSB0aGlzO1xuICAvLyAgIGxldCBpZFByb3ZpZGVyID0gZXZlbnQudGFyZ2V0LnRleHRDb250ZW50O1xuICAvLyAgIGxldCBpZFByb3ZpZGVyMiA9IGV2ZW50LnRhcmdldC50ZXh0O1xuXG4gIC8vICAgX3RoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnZ2V0TXlQdWJsaWNLZXknLCB7fSkudGhlbigocHVibGljS2V5KSA9PiB7XG4gIC8vICAgICAvLyBsZXQgcHVibGljS2V5ID0gYnRvYShrZXlQYWlyLnB1YmxpYyk7XG5cbiAgLy8gICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLFxuICAvLyAgICAgICB7IGNvbnRlbnRzOiBwdWJsaWNLZXksIG9yaWdpbjogJ29yaWdpbicsIHVzZXJuYW1lSGludDogdW5kZWZpbmVkLCBpZHBEb21haW46IGlkUHJvdmlkZXIsIH0pLnRoZW4oKHZhbHVlKSA9PiB7XG4gIC8vICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5vYnRhaW5OZXdJZGVudGl0eV0gcmVjZWl2ZWRVUkwgZnJvbSBpZHAgUHJveHk6ICcgKyB2YWx1ZS5sb2dpblVybC5zdWJzdHJpbmcoMCwgMjApICsgJy4uLicpO1xuXG4gIC8vICAgICAgIGxldCB1cmwgPSB2YWx1ZS5sb2dpblVybDtcbiAgLy8gICAgICAgbGV0IGZpbmFsVVJMO1xuXG4gIC8vICAgICAgIC8vY2hlY2sgaWYgdGhlIHJlY2VpdmVkVVJMIGNvbnRhaW5zIHRoZSByZWRpcmVjdCBmaWVsZCBhbmQgcmVwbGFjZSBpdFxuICAvLyAgICAgICBpZiAodXJsLmluZGV4T2YoJ3JlZGlyZWN0X3VyaScpICE9PSAtMSkge1xuICAvLyAgICAgICAgIGxldCBmaXJzdFBhcnQgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSk7XG4gIC8vICAgICAgICAgbGV0IHNlY29uZEF1eFBhcnQgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSwgdXJsLmxlbmd0aCk7XG5cbiAgLy8gICAgICAgICBsZXQgc2Vjb25kUGFydCA9IHNlY29uZEF1eFBhcnQuc3Vic3RyaW5nKHNlY29uZEF1eFBhcnQuaW5kZXhPZignJicpLCB1cmwubGVuZ3RoKTtcblxuICAvLyAgICAgICAgIC8vY2hlY2sgaWYgdGhlIHJlZGRpcmVjdCBmaWVsZCBpcyB0aGUgbGFzdCBmaWVsZCBvZiB0aGUgVVJMXG4gIC8vICAgICAgICAgaWYgKHNlY29uZFBhcnQuaW5kZXhPZignJicpICE9PSAtMSkge1xuICAvLyAgICAgICAgICAgZmluYWxVUkwgPSBmaXJzdFBhcnQgKyAncmVkaXJlY3RfdXJpPScgKyBsb2NhdGlvbi5vcmlnaW4gKyBzZWNvbmRQYXJ0O1xuICAvLyAgICAgICAgIH0gZWxzZSB7XG4gIC8vICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcbiAgLy8gICAgICAgICB9XG4gIC8vICAgICAgIH1cblxuICAvLyAgICAgICBfdGhpcy5yZXN1bHRVUkwgPSBmaW5hbFVSTCB8fCB1cmw7XG5cbiAgLy8gICAgICAgJCgnLmxvZ2luLWlkcCcpLmh0bWwoJzxwPkNob3NlbiBJRFA6ICcgKyBpZFByb3ZpZGVyICsgJzwvcD4nKTtcbiAgLy8gICAgICAgJCgnLmxvZ2luJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcbiAgLy8gICAgICAgJCgnLmxvZ2luLWJ0bicpLm9mZigpO1xuICAvLyAgICAgICAkKCcubG9naW4tYnRuJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gIC8vICAgICAgICAgJCgnLmxvZ2luJykuYWRkQ2xhc3MoJ2hpZGUnKTtcbiAgLy8gICAgICAgICAvLyBfdGhpcy5fYXV0aGVudGljYXRlVXNlcihwdWJsaWNLZXksIHZhbHVlLCAnb3JpZ2luJywgaWRQcm92aWRlcikudGhlbigoZW1haWwpID0+IHtcbiAgLy8gICAgICAgICAvLyAgIGNhbGxiYWNrKGVtYWlsKTtcbiAgLy8gICAgICAgICAvLyAgIF90aGlzLnNob3dJZGVudGl0aWVzR1VJKCk7XG4gIC8vICAgICAgICAgLy8gfSk7XG4gIC8vICAgICAgIH0pO1xuICAvLyAgICAgfSk7XG4gIC8vICAgfSkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdvYnRhbmluIG5ldyBpZGVudGl0eScsIGVycikpO1xuXG4gIC8vIH1cblxuICBfZ2V0TGlzdChpdGVtcykge1xuICAgIGxldCBsaXN0ID0gJyc7XG4gICAgbGV0IG51bUl0ZW1zID0gaXRlbXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1JdGVtczsgaSsrKSB7XG4gICAgICBsaXN0ICs9ICc8bGkgY2xhc3M9XCJkaXZpZGVyXCI+PC9saT4nO1xuICAgICAgbGlzdCArPSAnPGxpPjxhIGNsYXNzPVwiY2VudGVyLWFsaWduXCI+JyArIGl0ZW1zW2ldICsgJzwvYT48L2xpPic7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBfYXV0aGVudGljYXRlVXNlcihwdWJsaWNLZXksIHZhbHVlLCBvcmlnaW4sIGlkUHJvdmlkZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCB1cmwgPSBfdGhpcy5yZXN1bHRVUkw7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBfdGhpcy5vcGVuUG9wdXAodXJsKS50aGVuKChpZGVudGl0eSkgPT4ge1xuXG4gICAgICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLFxuICAgICAgICAgIHsgY29udGVudHM6IHB1YmxpY0tleSwgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogaWRlbnRpdHksIGlkcERvbWFpbjogaWRQcm92aWRlciB9KS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICAgIGlmIChyZXN1bHQpIHtcblxuICAgICAgICAgICAgLy9fdGhpcy5pZGVudGl0eU1vZHVsZS5zdG9yZUlkZW50aXR5KHJlc3VsdCwga2V5UGFpcikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2FkZEFzc2VydGlvbicsIHJlc3VsdCkudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZS51c2VyUHJvZmlsZS51c2VyVVJMKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIG9idGFpbmluZyBpZGVudGl0eSBpbmZvcm1hdGlvbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9yZXNldElkZW50aXRpZXMoKSB7XG4gICAgY29uc29sZS5sb2coJ19yZXNldElkZW50aXRpZXMnKTtcbiAgfVxuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWRlbnRpdGllc0dVSTtcbiJdfQ=="}