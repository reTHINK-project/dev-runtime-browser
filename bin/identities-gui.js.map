{"version":3,"sources":["node_modules/browser-pack/_prelude.js","identities-gui.js","src/admin/IdentitiesGUI.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","identitiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","IdentitiesGUI","identityModule","_this","guiURL","_runtimeURL","_guiURL","_messageBus","messageBus","deployGUI","resultURL","undefined","addListener","msg","body","document","getElementsByTagName","style","parent","postMessage","method","to","$","removeClass","showIdentitiesGUI","then","identityInfo","replyMsg","addClass","type","id","from","on","receivedInfo","Promise","resolve","reject","toRemoveID","getIdentitiesToChoose","showMyIdentities","identities","identity","console","log","callback","idps","html","_getList","off","event","obtainNewIdentity","_resetIdentities","emails","domain","split","push","email","myIdentities","getElementById","innerHTML","table","createTable","tbody","createElement","numIdentities","_i","tr","createTableRow","appendChild","changeID","removeID","className","thead","thEmail","textContent","td","btn","idToUse","innerText","row","parentNode","idToRemove","children","unregisterIdentity","numEmails","splice","idProvider","text","crypto","generateRSAKeyPair","keyPair","publicKey","btoa","sendGenerateMessage","loginUrl","substring","url","finalURL","indexOf","firstPart","secondAuxPart","secondPart","location","origin","_authenticateUser","items","list","numItems","openPopup","result","storeIdentity","userProfile","username","err"],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.identitiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// jshint browser:true, jquery: true\n\nvar IdentitiesGUI = function () {\n  function IdentitiesGUI(identityModule) {\n    _classCallCheck(this, IdentitiesGUI);\n\n    if (!identityModule) throw Error('Identity Module not set!');\n    var _this = this;\n    var guiURL = identityModule._runtimeURL + '/identity-gui';\n    _this._guiURL = guiURL;\n    _this.identityModule = identityModule;\n    _this._messageBus = identityModule.messageBus;\n    _this.identityModule.deployGUI();\n\n    _this.resultURL = undefined;\n\n    _this._messageBus.addListener(guiURL, function (msg) {\n      var identityInfo = msg.body.value;\n      var value = void 0;\n\n      // unhide the config page with the identity GUI\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      _this.showIdentitiesGUI(msg.body.value).then(function (identityInfo) {\n        var replyMsg = void 0;\n\n        //hide config page with the identity GUI\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n        $('.identities-section').addClass('hide');\n        $('.policies-section').addClass('hide');\n\n        switch (identityInfo.type) {\n          case 'idp':\n            value = { type: 'idp', value: identityInfo.value, code: 200 };\n            replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          case 'identity':\n            value = { type: 'identity', value: identityInfo.value, code: 200 };\n            replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          default:\n            value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n            replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n        }\n      });\n    });\n\n    $('.identities-page-show').on('click', function () {\n      //TODO call a IdM method that requests the identities\n      _this.showIdentitiesGUI();\n    });\n  }\n\n  _createClass(IdentitiesGUI, [{\n    key: 'showIdentitiesGUI',\n    value: function showIdentitiesGUI(receivedInfo) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        var identityInfo = void 0;\n        var toRemoveID = void 0;\n\n        if (receivedInfo) {\n          identityInfo = receivedInfo;\n          toRemoveID = false;\n        } else {\n          toRemoveID = true;\n          identityInfo = _this.identityModule.getIdentitiesToChoose();\n        }\n\n        $('.policies-section').addClass('hide');\n        $('.identities-section').removeClass('hide');\n\n        _this.showMyIdentities(identityInfo.identities, toRemoveID).then(function (identity) {\n          console.log('chosen identity: ', identity);\n          resolve({ type: 'identity', value: identity });\n        });\n\n        var callback = function callback(value) {\n          console.log('chosen identity: ', value);\n          resolve({ type: 'identity', value: value });\n        };\n\n        var idps = identityInfo.idps;\n        $('#idproviders').html(_this._getList(idps));\n        $('#idproviders').off();\n        $('#idproviders').on('click', function (event) {\n          return _this.obtainNewIdentity(callback, toRemoveID);\n        });\n        //$('.back').on('click', (event) => _this.goHome());\n        $('.identities-reset').off();\n        $('.identities-reset').on('click', function (event) {\n          return _this._resetIdentities(callback);\n        });\n      });\n    }\n  }, {\n    key: 'showMyIdentities',\n    value: function showMyIdentities(emails, toRemoveID) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        // let identities = _this.identityModule.getIdentities();\n        var identities = [];\n\n        for (var i in emails) {\n          var domain = emails[i].split('@');\n          identities.push({ email: emails[i], domain: domain[1] });\n        }\n\n        var myIdentities = document.getElementById('my-ids');\n        myIdentities.innerHTML = '';\n\n        var table = _this.createTable();\n\n        var tbody = document.createElement('tbody');\n        var numIdentities = identities.length;\n        for (var _i = 0; _i < numIdentities; _i++) {\n          var tr = _this.createTableRow(identities[_i], toRemoveID);\n          tbody.appendChild(tr);\n        }\n\n        table.appendChild(tbody);\n        myIdentities.appendChild(table);\n\n        var callback = function callback(identity) {\n          resolve(identity);\n        };\n        if (!toRemoveID) {\n          $('.clickable-cell').on('click', function (event) {\n            return _this.changeID(callback);\n          });\n        }\n        $('.remove-id').on('click', function (event) {\n          return _this.removeID(emails);\n        });\n      });\n    }\n  }, {\n    key: 'createTable',\n    value: function createTable() {\n      var table = document.createElement('table');\n      table.className = 'centered';\n      var thead = document.createElement('thead');\n      var tr = document.createElement('tr');\n      var thEmail = document.createElement('th');\n      thEmail.textContent = 'Email';\n      tr.appendChild(thEmail);\n      thead.appendChild(tr);\n      table.appendChild(thead);\n      return table;\n    }\n  }, {\n    key: 'createTableRow',\n    value: function createTableRow(identity, toRemoveID) {\n      var tr = document.createElement('tr');\n\n      var td = document.createElement('td');\n      td.textContent = identity.email;\n      td.className = 'clickable-cell';\n      td.style = 'cursor: pointer';\n      tr.appendChild(td);\n\n      td = document.createElement('td');\n\n      if (toRemoveID) {\n        var btn = document.createElement('button');\n        btn.textContent = 'Remove';\n        btn.className = 'remove-id waves-effect waves-light btn';\n        td.appendChild(btn);\n      }\n      tr.appendChild(td);\n\n      return tr;\n    }\n  }, {\n    key: 'changeID',\n    value: function changeID(callback) {\n      var _this = this;\n\n      var idToUse = event.target.innerText;\n\n      //TODO improve later.\n      //prevents when the users selects an hyperty, exit the identity page and goes again to the identity page, from selecting \"settings\" button as identity.\n      if (idToUse !== 'settings') {\n\n        callback(idToUse);\n        return idToUse;\n      }\n    }\n  }, {\n    key: 'removeID',\n    value: function removeID(emails) {\n      var _this = this;\n      var row = event.target.parentNode.parentNode;\n      var idToRemove = row.children[0].textContent;\n      var domain = row.children[1].textContent;\n      _this.identityModule.unregisterIdentity(idToRemove);\n\n      var numEmails = emails.length;\n      for (var i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n      // -------------------------------------------------------------------------//\n      _this.showMyIdentities(emails, true);\n    }\n  }, {\n    key: 'obtainNewIdentity',\n    value: function obtainNewIdentity(callback, toRemoveID) {\n      var _this = this;\n      var idProvider = event.target.textContent;\n      var idProvider2 = event.target.text;\n\n      _this.identityModule.crypto.generateRSAKeyPair().then(function (keyPair) {\n\n        var publicKey = btoa(keyPair.public);\n\n        _this.identityModule.sendGenerateMessage(publicKey, 'origin', undefined, idProvider).then(function (value) {\n          console.log('receivedURL: ' + value.loginUrl.substring(0, 20) + '...');\n\n          var url = value.loginUrl;\n          var finalURL = void 0;\n\n          //check if the receivedURL contains the redirect field and replace it\n          if (url.indexOf('redirect_uri') !== -1) {\n            var firstPart = url.substring(0, url.indexOf('redirect_uri'));\n            var secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n            var secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n            //check if the reddirect field is the last field of the URL\n            if (secondPart.indexOf('&') !== -1) {\n              finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n            } else {\n              finalURL = firstPart + 'redirect_uri=' + location.origin;\n            }\n          }\n          _this.resultURL = finalURL || url;\n\n          $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n          $('.login').removeClass('hide');\n          $('.login-btn').off();\n          $('.login-btn').on('click', function (event) {\n            $('.login').addClass('hide');\n            _this._authenticateUser(keyPair, publicKey, value, 'origin', idProvider).then(function (email) {\n              callback(email);\n              _this.showIdentitiesGUI();\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_authenticateUser',\n    value: function _authenticateUser(keyPair, publicKey, value, origin, idProvider) {\n      var _this = this;\n      var url = _this.resultURL;\n\n      return new Promise(function (resolve, reject) {\n\n        _this.identityModule.openPopup(url).then(function (identity) {\n\n          _this.identityModule.sendGenerateMessage(publicKey, origin, identity, idProvider).then(function (result) {\n\n            if (result) {\n\n              _this.identityModule.storeIdentity(result, keyPair).then(function (value) {\n                resolve(value.userProfile.username);\n              }, function (err) {\n                reject(err);\n              });\n            } else {\n              reject('error on obtaining identity information');\n            }\n          });\n        }, function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_resetIdentities',\n    value: function _resetIdentities() {\n      console.log('_resetIdentities');\n    }\n  }]);\n\n  return IdentitiesGUI;\n}();\n\nexports.default = IdentitiesGUI;\n\n},{}]},{},[1])(1)\n});\n\n","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(identityModule) {\n    if (!identityModule) throw Error('Identity Module not set!');\n    let _this = this;\n    let guiURL = identityModule._runtimeURL + '/identity-gui';\n    _this._guiURL = guiURL;\n    _this.identityModule = identityModule;\n    _this._messageBus = identityModule.messageBus;\n    _this.identityModule.deployGUI();\n\n    _this.resultURL  = undefined;\n\n    _this._messageBus.addListener(guiURL, msg => {\n      let identityInfo = msg.body.value;\n      let value;\n\n      // unhide the config page with the identity GUI\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n        let replyMsg;\n\n        //hide config page with the identity GUI\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n        $('.identities-section').addClass('hide');\n        $('.policies-section').addClass('hide');\n\n        switch (identityInfo.type) {\n          case 'idp':\n            value = {type: 'idp', value: identityInfo.value, code: 200};\n            replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          case 'identity':\n            value = {type: 'identity', value: identityInfo.value, code: 200};\n            replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          default:\n            value = {type: 'error', value: 'Error on identity GUI', code: 400};\n            replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n        }\n      });\n    });\n\n\n\n    $('.identities-page-show').on('click', function () {\n      //TODO call a IdM method that requests the identities\n      _this.showIdentitiesGUI();\n    });\n  }\n\n  showIdentitiesGUI(receivedInfo) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n      } else {\n        toRemoveID = true;\n        identityInfo = _this.identityModule.getIdentitiesToChoose();\n      }\n\n      $('.policies-section').addClass('hide');\n      $('.identities-section').removeClass('hide');\n\n      _this.showMyIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n        console.log('chosen identity: ', identity);\n        resolve({type: 'identity', value: identity});\n      });\n\n      let callback = (value) => {\n        console.log('chosen identity: ', value);\n        resolve({type: 'identity', value: value});\n      };\n\n      let idps = identityInfo.idps;\n      $('#idproviders').html(_this._getList(idps));\n      $('#idproviders').off();\n      $('#idproviders').on('click', (event) => _this.obtainNewIdentity(callback, toRemoveID));\n      //$('.back').on('click', (event) => _this.goHome());\n      $('.identities-reset').off();\n      $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n    });\n\n  }\n\n  showMyIdentities(emails, toRemoveID) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      // let identities = _this.identityModule.getIdentities();\n      let identities = [];\n\n      for(let i in emails) {\n        let domain = emails[i].split('@');\n        identities.push({email: emails[i], domain: domain[1]});\n      }\n\n      let myIdentities = document.getElementById('my-ids');\n      myIdentities.innerHTML = '';\n\n      let table = _this.createTable();\n\n      let tbody = document.createElement('tbody');\n      let numIdentities = identities.length;\n      for (let i = 0; i < numIdentities; i++) {\n        let tr = _this.createTableRow(identities[i], toRemoveID);\n        tbody.appendChild(tr);\n      }\n\n      table.appendChild(tbody);\n      myIdentities.appendChild(table);\n\n      let callback = (identity) => {\n        resolve(identity);\n      };\n      if (!toRemoveID) {\n        $('.clickable-cell').on('click', (event) => _this.changeID(callback));\n      }\n      $('.remove-id').on('click', (event) => _this.removeID(emails));\n\n    });\n  }\n\n  createTable() {\n    let table = document.createElement('table');\n    table.className = 'centered';\n    let thead = document.createElement('thead');\n    let tr = document.createElement('tr');\n    let thEmail = document.createElement('th');\n    thEmail.textContent = 'Email';\n    tr.appendChild(thEmail);\n    thead.appendChild(tr);\n    table.appendChild(thead);\n    return table;\n  }\n\n  createTableRow(identity, toRemoveID) {\n    let tr = document.createElement('tr');\n\n    let td = document.createElement('td');\n    td.textContent = identity.email;\n    td.className = 'clickable-cell';\n    td.style = 'cursor: pointer';\n    tr.appendChild(td);\n\n    td = document.createElement('td');\n\n    if(toRemoveID) {\n      let btn = document.createElement('button');\n      btn.textContent = 'Remove';\n      btn.className = 'remove-id waves-effect waves-light btn';\n      td.appendChild(btn);\n    }\n    tr.appendChild(td);\n\n    return tr;\n  }\n\n  changeID(callback) {\n    let _this = this;\n\n    let idToUse = event.target.innerText;\n\n    //TODO improve later.\n    //prevents when the users selects an hyperty, exit the identity page and goes again to the identity page, from selecting \"settings\" button as identity.\n    if(idToUse !== 'settings') {\n\n      callback(idToUse);\n      return idToUse;\n    }\n  }\n\n  removeID(emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n    _this.identityModule.unregisterIdentity(idToRemove);\n\n    let numEmails = emails.length;\n    for (let i = 0; i < numEmails; i++) {\n      if (emails[i].email === idToRemove) {\n        emails.splice(i, 1);\n        break;\n      }\n    }\n    // -------------------------------------------------------------------------//\n    _this.showMyIdentities(emails, true);\n\n  }\n\n  obtainNewIdentity(callback, toRemoveID) {\n    let _this = this;\n    let idProvider = event.target.textContent;\n    let idProvider2 = event.target.text;\n\n    _this.identityModule.crypto.generateRSAKeyPair().then(function(keyPair) {\n\n      let publicKey = btoa(keyPair.public);\n\n      _this.identityModule.sendGenerateMessage(publicKey, 'origin', undefined, idProvider).then((value) => {\n        console.log('receivedURL: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if(url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if(secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n        _this.resultURL = finalURL || url;\n\n        $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n        $('.login').removeClass('hide');\n        $('.login-btn').off();\n        $('.login-btn').on('click', (event) => {\n          $('.login').addClass('hide');\n          _this._authenticateUser(keyPair, publicKey, value, 'origin', idProvider).then((email) => {\n            callback(email);\n            _this.showIdentitiesGUI();\n          });\n        });\n      });\n    });\n\n  }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(keyPair, publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.identityModule.openPopup(url).then((identity) => {\n\n        _this.identityModule.sendGenerateMessage(publicKey, origin, identity, idProvider).then((result) => {\n\n          if (result) {\n\n           _this.identityModule.storeIdentity(result, keyPair).then((value) => {\n             resolve(value.userProfile.username);\n           }, (err) => {\n             reject(err);\n           });\n\n          } else {\n           reject('error on obtaining identity information');\n          }\n\n          });\n         }, (err) => {\n           reject(err);\n      });\n    });\n  }\n\n_resetIdentities() {\n  console.log('_resetIdentities');\n}\n\n\n}\n\nexport default IdentitiesGUI;\n"]}