{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/IdentitiesGUI.js"],"names":[],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(guiURL, idmURL, messageBus) {\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    let _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    _this.callIdentityModuleFunc('deployGUI', {}).then(() => {\n      _this.resultURL  = undefined;\n\n      _this._messageBus.addListener(guiURL, msg => {\n        let identityInfo = msg.body.value;\n        let funcName = msg.body.method;\n        let value;\n        console.log('[IdentitiesGUI] received msg: ', msg);\n\n        if (funcName === 'openPopup') {\n          let urlreceived = msg.body.params.urlreceived;\n          _this.openPopup(urlreceived).then((returnedValue) => {\n            let value = {type: 'execute', value: returnedValue, code: 200};\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n          });\n          return; // this avoids getting stuck in the identities page\n        }\n\n        // unhide the config page with the identity GUI\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n          let replyMsg;\n          console.log('[IdentitiesGUI] identityInfo from GUI: ', identityInfo);\n\n          //hide config page with the identity GUI\n          parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n          $('.admin-page').addClass('hide');\n          document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n          $('.identities-section').addClass('hide');\n          $('.policies-section').addClass('hide');\n\n          switch (identityInfo.type) {\n            case 'idp':\n              value = { type: 'idp', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            case 'identity':\n              value = { type: 'identity', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            default:\n              value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n          }\n        });\n      });\n\n      $('.identities-page-show').on('click', function () {\n        //TODO call a IdM method that requests the identities\n        _this.showIdentitiesGUI();\n      });\n    });\n  }\n\n  callIdentityModuleFunc(methodName, parameters) {\n    let _this = this;\n    let message;\n\n    return new Promise((resolve, reject) => {\n      message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n        body: { resource: 'identity', method: methodName, params: parameters }, };\n      _this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n    });\n  }\n\n  openPopup(urlreceived) {\n\n    return new Promise((resolve, reject) => {\n\n      let win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');\n      if (window.cordova) {\n        win.addEventListener('loadstart', function(e) {\n          let url = e.url;\n          let code = /\\&code=(.+)$/.exec(url);\n          let error = /\\&error=(.+)$/.exec(url);\n\n          if (code || error) {\n            win.close();\n            return resolve(url);\n          } else {\n            return reject('openPopup error 1 - should not happen');\n          }\n        });\n      } else {\n  \n        let pollTimer = setInterval(function() {\n          try {\n            if (win.closed) {\n              return reject('Some error occured when trying to get identity.');\n              clearInterval(pollTimer);\n            }\n\n//            if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {\n            if ((win.document.URL.indexOf('access_token') !== -1 || win.document.URL.indexOf('code') !== -1) && win.document.URL.indexOf(location.origin) !== -1) {\n                window.clearInterval(pollTimer);\n              let url =   win.document.URL;\n\n              win.close();\n              return resolve(url);\n            }            } catch (e) {\n              //return reject('openPopup error 2 - should not happen');\n              console.log(e);\n            }\n          }, 500);\n        }\n  \n    });\n  }\n\n  showIdentitiesGUI(receivedInfo) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      console.log('[IdentitiesGUI.showIdentitiesGUI] receivedInfo: ', receivedInfo);\n\n      let identityInfo;\n      let toRemoveID;\n\n      _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\n        identityInfo = resultObject.identityInfo;\n        toRemoveID = resultObject.toRemoveID;\n\n        $('.policies-section').addClass('hide');\n        $('.identities-section').removeClass('hide');\n\n        _this.showMyIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n          console.log('chosen identity: ', identity);\n          resolve({type: 'identity', value: identity});\n        });\n\n        let callback = (value) => {\n          console.log('chosen identity: ', value);\n          resolve({type: 'identity', value: value});\n        };\n\n        let idps = [];\n        let idpsObjects = identityInfo.idps;\n\n        idpsObjects.forEach(function(entry) {\n          if(entry.type && entry.type == 'idToken') {\n            idps.push(entry.domain);\n          }\n        });\n\n        $('#idproviders').html(_this._getList(idps));\n        $('#idproviders').off();\n        $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\n        //$('.back').on('click', (event) => _this.goHome());\n        $('.identities-reset').off();\n        $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n      });\n    });\n  }\n\n  _checkReceivedInfo(receivedInfo) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      let identityInfo, toRemoveID;\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n        resolve({identityInfo: identityInfo, toRemoveID:toRemoveID});\n      } else {\n        toRemoveID = true;\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\n        });\n      }\n    });\n  }\n\n  showMyIdentities(iDs, toRemoveID) {\n    let _this = this;\n    // TODO: iDs should be replaced by user urls\n\n    return new Promise((resolve, reject) => {\n      console.log('[IdentitiesGUI.showMyIdentities] : ', iDs);\n      // let identities = _this.identityModule.getIdentities();\n      let identities = [];\n\n      for (let i in iDs) {\n        let split1 = iDs[i].split('://')\n\n        let identifier = split1[1].split('/')[1];\n        let domain = iDs[i].replace('/'+identifier,'');\n        identities.push({ email: iDs[i], domain: domain });\n      }\n\n      let myIdentities = document.getElementById('my-ids');\n      myIdentities.innerHTML = '';\n\n      let table = _this.createTable();\n\n      let tbody = document.createElement('tbody');\n      let numIdentities = identities.length;\n      for (let i = 0; i < numIdentities; i++) {\n        let tr = _this.createTableRow(identities[i], toRemoveID);\n        tbody.appendChild(tr);\n      }\n\n      table.appendChild(tbody);\n      myIdentities.appendChild(table);\n\n      let callback = (identity) => {\n        resolve(identity);\n      };\n\n      if (!toRemoveID) {\n        $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\n      }\n\n      $('.remove-id').on('click', (event) => _this.removeID(iDs));\n\n    });\n  }\n\n  createTable() {\n    let table = document.createElement('table');\n    table.className = 'centered';\n    let thead = document.createElement('thead');\n    let tr = document.createElement('tr');\n    let thEmail = document.createElement('th');\n    thEmail.textContent = 'Email';\n    tr.appendChild(thEmail);\n    thead.appendChild(tr);\n    table.appendChild(thead);\n    return table;\n  }\n\n  createTableRow(identity, toRemoveID) {\n    let tr = document.createElement('tr');\n\n    let td = document.createElement('td');\n    td.textContent = identity.email;\n    td.className = 'clickable-cell';\n    td.style = 'cursor: pointer';\n    tr.appendChild(td);\n\n    td = document.createElement('td');\n\n    if (toRemoveID) {\n      let btn = document.createElement('button');\n      btn.textContent = 'Remove';\n      btn.className = 'remove-id waves-effect waves-light btn';\n      td.appendChild(btn);\n    }\n\n    tr.appendChild(td);\n\n    return tr;\n  }\n\n  changeID(event, callback) {\n    let _this = this;\n\n    let idToUse = event.target.innerText;\n\n    //TODO improve later.\n    //prevents when the users selects an hyperty, exit the identity page and\n    //goes again to the identity page, from selecting \"settings\" button as identity.\n    if (idToUse !== 'settings') {\n\n      callback(idToUse);\n      return idToUse;\n    }\n  }\n\n  removeID(event, emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\n      let numEmails = emails.length;\n      for (let i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n\n      // -------------------------------------------------------------------------//\n      _this.showMyIdentities(emails, true);\n    });\n\n    //_this.identityModule.unregisterIdentity(idToRemove);\n\n  }\n\n  obtainNewIdentity(event, callback, toRemoveID) {\n    let _this = this;\n    let idProvider = event.target.textContent;\n    let idProvider2 = event.target.text;\n\n    _this.callIdentityModuleFunc('getMyPublicKey', {}).then((publicKey) => {\n//      let publicKey = btoa(keyPair.public);\n\n      _this.callIdentityModuleFunc('sendGenerateMessage',\n        { contents: publicKey, origin: 'origin', usernameHint: undefined,\n        idpDomain: idProvider, }).then((value) => {\n        console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if (url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if (secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n\n        _this.resultURL = finalURL || url;\n\n        $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n        $('.login').removeClass('hide');\n        $('.login-btn').off();\n        $('.login-btn').on('click', (event) => {\n          $('.login').addClass('hide');\n          _this._authenticateUser(publicKey, value, 'origin', idProvider).then((email) => {\n            callback(email);\n            _this.showIdentitiesGUI();\n          });\n        });\n      });\n    }).catch(err => console.log('obtanin new identity', err));\n\n  }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.openPopup(url).then((identity) => {\n\n        _this.callIdentityModuleFunc('sendGenerateMessage',\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\n\n          if (result) {\n\n           //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n           _this.callIdentityModuleFunc('addAssertion', result).then((value) => {\n             resolve(value.userProfile.userURL);\n           }, (err) => {\n             reject(err);\n           });\n\n          } else {\n           reject('error on obtaining identity information');\n          }\n\n          });\n         }, (err) => {\n           reject(err);\n      });\n    });\n  }\n\n_resetIdentities() {\n  console.log('_resetIdentities');\n}\n\n\n}\n\nexport default IdentitiesGUI;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWRtaW4vSWRlbnRpdGllc0dVSS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNBQTs7SUFFTSxhO0FBRUoseUJBQVksTUFBWixFQUFvQixNQUFwQixFQUE0QixVQUE1QixFQUF3QztBQUFBOztBQUN0QztBQUNBLFFBQUksQ0FBQyxVQUFMLEVBQWlCLE1BQU0sTUFBTSxzQkFBTixDQUFOO0FBQ2pCLFFBQUksUUFBUSxJQUFaO0FBQ0EsVUFBTSxPQUFOLEdBQWdCLE1BQWhCO0FBQ0EsVUFBTSxPQUFOLEdBQWdCLE1BQWhCO0FBQ0EsVUFBTSxXQUFOLEdBQW9CLFVBQXBCOztBQUVBLFVBQU0sc0JBQU4sQ0FBNkIsV0FBN0IsRUFBMEMsRUFBMUMsRUFBOEMsSUFBOUMsQ0FBbUQsWUFBTTtBQUN2RCxZQUFNLFNBQU4sR0FBbUIsU0FBbkI7O0FBRUEsWUFBTSxXQUFOLENBQWtCLFdBQWxCLENBQThCLE1BQTlCLEVBQXNDLGVBQU87QUFDM0MsWUFBSSxlQUFlLElBQUksSUFBSixDQUFTLEtBQTVCO0FBQ0EsWUFBSSxXQUFXLElBQUksSUFBSixDQUFTLE1BQXhCO0FBQ0EsWUFBSSxjQUFKO0FBQ0EsZ0JBQVEsR0FBUixDQUFZLGdDQUFaLEVBQThDLEdBQTlDOztBQUVBLFlBQUksYUFBYSxXQUFqQixFQUE4QjtBQUM1QixjQUFJLGNBQWMsSUFBSSxJQUFKLENBQVMsTUFBVCxDQUFnQixXQUFsQztBQUNBLGdCQUFNLFNBQU4sQ0FBZ0IsV0FBaEIsRUFBNkIsSUFBN0IsQ0FBa0MsVUFBQyxhQUFELEVBQW1CO0FBQ25ELGdCQUFJLFFBQVEsRUFBQyxNQUFNLFNBQVAsRUFBa0IsT0FBTyxhQUF6QixFQUF3QyxNQUFNLEdBQTlDLEVBQVo7QUFDQSxnQkFBSSxXQUFXLEVBQUMsSUFBSSxJQUFJLEVBQVQsRUFBYSxNQUFNLFVBQW5CLEVBQStCLElBQUksSUFBSSxJ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QUFqQyxHQUE0QyxXQUFwRDtBQUNEOztBQUVELGFBQU8sSUFBUDtBQUNEOzs7c0NBRWlCLFMsRUFBVyxLLEVBQU8sTSxFQUFRLFUsRUFBWTtBQUN0RCxVQUFJLFFBQVEsSUFBWjtBQUNBLFVBQUksTUFBTSxNQUFNLFNBQWhCOztBQUVBLGFBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjs7QUFFdEMsY0FBTSxTQUFOLENBQWdCLEdBQWhCLEVBQXFCLElBQXJCLENBQTBCLFVBQUMsUUFBRCxFQUFjOztBQUV0QyxnQkFBTSxzQkFBTixDQUE2QixxQkFBN0IsRUFDRSxFQUFFLFVBQVUsU0FBWixFQUF1QixRQUFRLE1BQS9CLEVBQXVDLGNBQWMsUUFBckQsRUFBK0QsV0FBVyxVQUExRSxFQURGLEVBQzBGLElBRDFGLENBQytGLFVBQUMsTUFBRCxFQUFZOztBQUV6RyxnQkFBSSxNQUFKLEVBQVk7O0FBRVg7QUFDQSxvQkFBTSxzQkFBTixDQUE2QixjQUE3QixFQUE2QyxNQUE3QyxFQUFxRCxJQUFyRCxDQUEwRCxVQUFDLEtBQUQsRUFBVztBQUNuRSx3QkFBUSxNQUFNLFdBQU4sQ0FBa0IsT0FBMUI7QUFDRCxlQUZELEVBRUcsVUFBQyxHQUFELEVBQVM7QUFDVix1QkFBTyxHQUFQO0FBQ0QsZUFKRDtBQU1BLGFBVEQsTUFTTztBQUNOLHFCQUFPLHlDQUFQO0FBQ0E7QUFFQSxXQWhCSDtBQWlCRSxTQW5CSixFQW1CTSxVQUFDLEdBQUQsRUFBUztBQUNWLGlCQUFPLEdBQVA7QUFDSixTQXJCRDtBQXNCRCxPQXhCTSxDQUFQO0FBeUJEOzs7dUNBRWdCO0FBQ2pCLGNBQVEsR0FBUixDQUFZLGtCQUFaO0FBQ0Q7Ozs7OztrQkFLYyxhIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIGpzaGludCBicm93c2VyOnRydWUsIGpxdWVyeTogdHJ1ZVxuXG5jbGFzcyBJZGVudGl0aWVzR1VJIHtcblxuICBjb25zdHJ1Y3RvcihndWlVUkwsIGlkbVVSTCwgbWVzc2FnZUJ1cykge1xuICAgIC8vaWYgKCFpZGVudGl0eU1vZHVsZSkgdGhyb3cgRXJyb3IoJ0lkZW50aXR5IE1vZHVsZSBub3Qgc2V0IScpO1xuICAgIGlmICghbWVzc2FnZUJ1cykgdGhyb3cgRXJyb3IoJ01lc3NhZ2UgQnVzIG5vdCBzZXQhJyk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fZ3VpVVJMID0gZ3VpVVJMO1xuICAgIF90aGlzLl9pZG1VUkwgPSBpZG1VUkw7XG4gICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xuXG4gICAgX3RoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnZGVwbG95R1VJJywge30pLnRoZW4oKCkgPT4ge1xuICAgICAgX3RoaXMucmVzdWx0VVJMICA9IHVuZGVmaW5lZDtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoZ3VpVVJMLCBtc2cgPT4ge1xuICAgICAgICBsZXQgaWRlbnRpdHlJbmZvID0gbXNnLmJvZHkudmFsdWU7XG4gICAgICAgIGxldCBmdW5jTmFtZSA9IG1zZy5ib2R5Lm1ldGhvZDtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUldIHJlY2VpdmVkIG1zZzogJywgbXNnKTtcblxuICAgICAgICBpZiAoZnVuY05hbWUgPT09ICdvcGVuUG9wdXAnKSB7XG4gICAgICAgICAgbGV0IHVybHJlY2VpdmVkID0gbXNnLmJvZHkucGFyYW1zLnVybHJlY2VpdmVkO1xuICAgICAgICAgIF90aGlzLm9wZW5Qb3B1cCh1cmxyZWNlaXZlZCkudGhlbigocmV0dXJuZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0ge3R5cGU6ICdleGVjdXRlJywgdmFsdWU6IHJldHVybmVkVmFsdWUsIGNvZGU6IDIwMH07XG4gICAgICAgICAgICBsZXQgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlfTtcbiAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47IC8vIHRoaXMgYXZvaWRzIGdldHRpbmcgc3R1Y2sgaW4gdGhlIGlkZW50aXRpZXMgcGFnZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdW5oaWRlIHRoZSBjb25maWcgcGFnZSB3aXRoIHRoZSBpZGVudGl0eSBHVUlcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5zdHlsZSA9ICdiYWNrZ3JvdW5kLWNvbG9yOndoaXRlOyc7XG4gICAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7IGJvZHk6IHsgbWV0aG9kOiAnc2hvd0FkbWluUGFnZScgfSwgdG86ICdydW50aW1lOmd1aS1tYW5hZ2VyJyB9LCAnKicpO1xuICAgICAgICAkKCcuYWRtaW4tcGFnZScpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICAgICAgIF90aGlzLnNob3dJZGVudGl0aWVzR1VJKG1zZy5ib2R5LnZhbHVlKS50aGVuKChpZGVudGl0eUluZm8pID0+IHtcbiAgICAgICAgICBsZXQgcmVwbHlNc2c7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tJZGVudGl0aWVzR1VJXSBpZGVudGl0eUluZm8gZnJvbSBHVUk6ICcsIGlkZW50aXR5SW5mbyk7XG5cbiAgICAgICAgICAvL2hpZGUgY29uZmlnIHBhZ2Ugd2l0aCB0aGUgaWRlbnRpdHkgR1VJXG4gICAgICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKHsgYm9keTogeyBtZXRob2Q6ICdoaWRlQWRtaW5QYWdlJyB9LCB0bzogJ3J1bnRpbWU6Z3VpLW1hbmFnZXInIH0sICcqJyk7XG4gICAgICAgICAgJCgnLmFkbWluLXBhZ2UnKS5hZGRDbGFzcygnaGlkZScpO1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUgPSAnYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudCc7XG4gICAgICAgICAgJCgnLmlkZW50aXRpZXMtc2VjdGlvbicpLmFkZENsYXNzKCdoaWRlJyk7XG4gICAgICAgICAgJCgnLnBvbGljaWVzLXNlY3Rpb24nKS5hZGRDbGFzcygnaGlkZScpO1xuXG4gICAgICAgICAgc3dpdGNoIChpZGVudGl0eUluZm8udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnaWRwJzpcbiAgICAgICAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZHAnLCB2YWx1ZTogaWRlbnRpdHlJbmZvLnZhbHVlLCBjb2RlOiAyMDAgfTtcbiAgICAgICAgICAgICAgcmVwbHlNc2cgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZSB9O1xuICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdpZGVudGl0eSc6XG4gICAgICAgICAgICAgIHZhbHVlID0geyB0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogaWRlbnRpdHlJbmZvLnZhbHVlLCBjb2RlOiAyMDAgfTtcbiAgICAgICAgICAgICAgcmVwbHlNc2cgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZSB9O1xuICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YWx1ZSA9IHsgdHlwZTogJ2Vycm9yJywgdmFsdWU6ICdFcnJvciBvbiBpZGVudGl0eSBHVUknLCBjb2RlOiA0MDAgfTtcbiAgICAgICAgICAgICAgcmVwbHlNc2cgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZSB9O1xuICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAkKCcuaWRlbnRpdGllcy1wYWdlLXNob3cnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vVE9ETyBjYWxsIGEgSWRNIG1ldGhvZCB0aGF0IHJlcXVlc3RzIHRoZSBpZGVudGl0aWVzXG4gICAgICAgIF90aGlzLnNob3dJZGVudGl0aWVzR1VJKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNhbGxJZGVudGl0eU1vZHVsZUZ1bmMobWV0aG9kTmFtZSwgcGFyYW1ldGVycykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IG1lc3NhZ2U7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbWVzc2FnZSA9IHsgdHlwZTogJ2V4ZWN1dGUnLCB0bzogX3RoaXMuX2lkbVVSTCwgZnJvbTogX3RoaXMuX2d1aVVSTCxcbiAgICAgICAgYm9keTogeyByZXNvdXJjZTogJ2lkZW50aXR5JywgbWV0aG9kOiBtZXRob2ROYW1lLCBwYXJhbXM6IHBhcmFtZXRlcnMgfSwgfTtcbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlO1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIG9wZW5Qb3B1cCh1cmxyZWNlaXZlZCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IHdpbiA9IHdpbmRvdy5vcGVuKHVybHJlY2VpdmVkLCAnb3BlbklEcmVxdWVzdCcsICd3aWR0aD04MDAsIGhlaWdodD02MDAnKTtcbiAgICAgIGlmICh3aW5kb3cuY29yZG92YSkge1xuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGxldCB1cmwgPSBlLnVybDtcbiAgICAgICAgICBsZXQgY29kZSA9IC9cXCZjb2RlPSguKykkLy5leGVjKHVybCk7XG4gICAgICAgICAgbGV0IGVycm9yID0gL1xcJmVycm9yPSguKykkLy5leGVjKHVybCk7XG5cbiAgICAgICAgICBpZiAoY29kZSB8fCBlcnJvcikge1xuICAgICAgICAgICAgd2luLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1cmwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdvcGVuUG9wdXAgZXJyb3IgMSAtIHNob3VsZCBub3QgaGFwcGVuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gIFxuICAgICAgICBsZXQgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh3aW4uY2xvc2VkKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7XG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTtcbiAgICAgICAgICAgIH1cblxuLy8gICAgICAgICAgICBpZiAod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdpZF90b2tlbicpICE9PSAtMSB8fCB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmICgod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdhY2Nlc3NfdG9rZW4nKSAhPT0gLTEgfHwgd2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdjb2RlJykgIT09IC0xKSAmJiB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChwb2xsVGltZXIpO1xuICAgICAgICAgICAgICBsZXQgdXJsID0gICB3aW4uZG9jdW1lbnQuVVJMO1xuXG4gICAgICAgICAgICAgIHdpbi5jbG9zZSgpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1cmwpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgLy9yZXR1cm4gcmVqZWN0KCdvcGVuUG9wdXAgZXJyb3IgMiAtIHNob3VsZCBub3QgaGFwcGVuJyk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cbiAgXG4gICAgfSk7XG4gIH1cblxuICBzaG93SWRlbnRpdGllc0dVSShyZWNlaXZlZEluZm8pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5zaG93SWRlbnRpdGllc0dVSV0gcmVjZWl2ZWRJbmZvOiAnLCByZWNlaXZlZEluZm8pO1xuXG4gICAgICBsZXQgaWRlbnRpdHlJbmZvO1xuICAgICAgbGV0IHRvUmVtb3ZlSUQ7XG5cbiAgICAgIF90aGlzLl9jaGVja1JlY2VpdmVkSW5mbyhyZWNlaXZlZEluZm8pLnRoZW4oKHJlc3VsdE9iamVjdCkgPT4ge1xuICAgICAgICBpZGVudGl0eUluZm8gPSByZXN1bHRPYmplY3QuaWRlbnRpdHlJbmZvO1xuICAgICAgICB0b1JlbW92ZUlEID0gcmVzdWx0T2JqZWN0LnRvUmVtb3ZlSUQ7XG5cbiAgICAgICAgJCgnLnBvbGljaWVzLXNlY3Rpb24nKS5hZGRDbGFzcygnaGlkZScpO1xuICAgICAgICAkKCcuaWRlbnRpdGllcy1zZWN0aW9uJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcblxuICAgICAgICBfdGhpcy5zaG93TXlJZGVudGl0aWVzKGlkZW50aXR5SW5mby5pZGVudGl0aWVzLCB0b1JlbW92ZUlEKS50aGVuKChpZGVudGl0eSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjaG9zZW4gaWRlbnRpdHk6ICcsIGlkZW50aXR5KTtcbiAgICAgICAgICByZXNvbHZlKHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogaWRlbnRpdHl9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGNhbGxiYWNrID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Nob3NlbiBpZGVudGl0eTogJywgdmFsdWUpO1xuICAgICAgICAgIHJlc29sdmUoe3R5cGU6ICdpZGVudGl0eScsIHZhbHVlOiB2YWx1ZX0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBpZHBzID0gW107XG4gICAgICAgIGxldCBpZHBzT2JqZWN0cyA9IGlkZW50aXR5SW5mby5pZHBzO1xuXG4gICAgICAgIGlkcHNPYmplY3RzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICBpZihlbnRyeS50eXBlICYmIGVudHJ5LnR5cGUgPT0gJ2lkVG9rZW4nKSB7XG4gICAgICAgICAgICBpZHBzLnB1c2goZW50cnkuZG9tYWluKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJyNpZHByb3ZpZGVycycpLmh0bWwoX3RoaXMuX2dldExpc3QoaWRwcykpO1xuICAgICAgICAkKCcjaWRwcm92aWRlcnMnKS5vZmYoKTtcbiAgICAgICAgJCgnI2lkcHJvdmlkZXJzJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiBfdGhpcy5vYnRhaW5OZXdJZGVudGl0eShldmVudCwgY2FsbGJhY2ssIHRvUmVtb3ZlSUQpKTtcbiAgICAgICAgLy8kKCcuYmFjaycpLm9uKCdjbGljaycsIChldmVudCkgPT4gX3RoaXMuZ29Ib21lKCkpO1xuICAgICAgICAkKCcuaWRlbnRpdGllcy1yZXNldCcpLm9mZigpO1xuICAgICAgICAkKCcuaWRlbnRpdGllcy1yZXNldCcpLm9uKCdjbGljaycsIChldmVudCkgPT4gX3RoaXMuX3Jlc2V0SWRlbnRpdGllcyhjYWxsYmFjaykpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfY2hlY2tSZWNlaXZlZEluZm8ocmVjZWl2ZWRJbmZvKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGlkZW50aXR5SW5mbywgdG9SZW1vdmVJRDtcbiAgICAgIGlmIChyZWNlaXZlZEluZm8pIHtcbiAgICAgICAgaWRlbnRpdHlJbmZvID0gcmVjZWl2ZWRJbmZvO1xuICAgICAgICB0b1JlbW92ZUlEID0gZmFsc2U7XG4gICAgICAgIHJlc29sdmUoe2lkZW50aXR5SW5mbzogaWRlbnRpdHlJbmZvLCB0b1JlbW92ZUlEOnRvUmVtb3ZlSUR9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvUmVtb3ZlSUQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdnZXRJZGVudGl0aWVzVG9DaG9vc2UnLCB7fSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSh7aWRlbnRpdHlJbmZvOiByZXN1bHQsIHRvUmVtb3ZlSUQ6IHRvUmVtb3ZlSUR9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzaG93TXlJZGVudGl0aWVzKGlEcywgdG9SZW1vdmVJRCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gVE9ETzogaURzIHNob3VsZCBiZSByZXBsYWNlZCBieSB1c2VyIHVybHNcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkuc2hvd015SWRlbnRpdGllc10gOiAnLCBpRHMpO1xuICAgICAgLy8gbGV0IGlkZW50aXRpZXMgPSBfdGhpcy5pZGVudGl0eU1vZHVsZS5nZXRJZGVudGl0aWVzKCk7XG4gICAgICBsZXQgaWRlbnRpdGllcyA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpIGluIGlEcykge1xuICAgICAgICBsZXQgc3BsaXQxID0gaURzW2ldLnNwbGl0KCc6Ly8nKVxuXG4gICAgICAgIGxldCBpZGVudGlmaWVyID0gc3BsaXQxWzFdLnNwbGl0KCcvJylbMV07XG4gICAgICAgIGxldCBkb21haW4gPSBpRHNbaV0ucmVwbGFjZSgnLycraWRlbnRpZmllciwnJyk7XG4gICAgICAgIGlkZW50aXRpZXMucHVzaCh7IGVtYWlsOiBpRHNbaV0sIGRvbWFpbjogZG9tYWluIH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgbXlJZGVudGl0aWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215LWlkcycpO1xuICAgICAgbXlJZGVudGl0aWVzLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICBsZXQgdGFibGUgPSBfdGhpcy5jcmVhdGVUYWJsZSgpO1xuXG4gICAgICBsZXQgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgbGV0IG51bUlkZW50aXRpZXMgPSBpZGVudGl0aWVzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtSWRlbnRpdGllczsgaSsrKSB7XG4gICAgICAgIGxldCB0ciA9IF90aGlzLmNyZWF0ZVRhYmxlUm93KGlkZW50aXRpZXNbaV0sIHRvUmVtb3ZlSUQpO1xuICAgICAgICB0Ym9keS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICB9XG5cbiAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRib2R5KTtcbiAgICAgIG15SWRlbnRpdGllcy5hcHBlbmRDaGlsZCh0YWJsZSk7XG5cbiAgICAgIGxldCBjYWxsYmFjayA9IChpZGVudGl0eSkgPT4ge1xuICAgICAgICByZXNvbHZlKGlkZW50aXR5KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghdG9SZW1vdmVJRCkge1xuICAgICAgICAkKCcuY2xpY2thYmxlLWNlbGwnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IF90aGlzLmNoYW5nZUlEKGV2ZW50LCBjYWxsYmFjaykpO1xuICAgICAgfVxuXG4gICAgICAkKCcucmVtb3ZlLWlkJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiBfdGhpcy5yZW1vdmVJRChpRHMpKTtcblxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlVGFibGUoKSB7XG4gICAgbGV0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICB0YWJsZS5jbGFzc05hbWUgPSAnY2VudGVyZWQnO1xuICAgIGxldCB0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gICAgbGV0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICBsZXQgdGhFbWFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgdGhFbWFpbC50ZXh0Q29udGVudCA9ICdFbWFpbCc7XG4gICAgdHIuYXBwZW5kQ2hpbGQodGhFbWFpbCk7XG4gICAgdGhlYWQuYXBwZW5kQ2hpbGQodHIpO1xuICAgIHRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcbiAgICByZXR1cm4gdGFibGU7XG4gIH1cblxuICBjcmVhdGVUYWJsZVJvdyhpZGVudGl0eSwgdG9SZW1vdmVJRCkge1xuICAgIGxldCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICBsZXQgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIHRkLnRleHRDb250ZW50ID0gaWRlbnRpdHkuZW1haWw7XG4gICAgdGQuY2xhc3NOYW1lID0gJ2NsaWNrYWJsZS1jZWxsJztcbiAgICB0ZC5zdHlsZSA9ICdjdXJzb3I6IHBvaW50ZXInO1xuICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcblxuICAgIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcblxuICAgIGlmICh0b1JlbW92ZUlEKSB7XG4gICAgICBsZXQgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidG4udGV4dENvbnRlbnQgPSAnUmVtb3ZlJztcbiAgICAgIGJ0bi5jbGFzc05hbWUgPSAncmVtb3ZlLWlkIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBidG4nO1xuICAgICAgdGQuYXBwZW5kQ2hpbGQoYnRuKTtcbiAgICB9XG5cbiAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XG5cbiAgICByZXR1cm4gdHI7XG4gIH1cblxuICBjaGFuZ2VJRChldmVudCwgY2FsbGJhY2spIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGlkVG9Vc2UgPSBldmVudC50YXJnZXQuaW5uZXJUZXh0O1xuXG4gICAgLy9UT0RPIGltcHJvdmUgbGF0ZXIuXG4gICAgLy9wcmV2ZW50cyB3aGVuIHRoZSB1c2VycyBzZWxlY3RzIGFuIGh5cGVydHksIGV4aXQgdGhlIGlkZW50aXR5IHBhZ2UgYW5kXG4gICAgLy9nb2VzIGFnYWluIHRvIHRoZSBpZGVudGl0eSBwYWdlLCBmcm9tIHNlbGVjdGluZyBcInNldHRpbmdzXCIgYnV0dG9uIGFzIGlkZW50aXR5LlxuICAgIGlmIChpZFRvVXNlICE9PSAnc2V0dGluZ3MnKSB7XG5cbiAgICAgIGNhbGxiYWNrKGlkVG9Vc2UpO1xuICAgICAgcmV0dXJuIGlkVG9Vc2U7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlSUQoZXZlbnQsIGVtYWlscykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHJvdyA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgbGV0IGlkVG9SZW1vdmUgPSByb3cuY2hpbGRyZW5bMF0udGV4dENvbnRlbnQ7XG4gICAgbGV0IGRvbWFpbiA9IHJvdy5jaGlsZHJlblsxXS50ZXh0Q29udGVudDtcblxuICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3VucmVnaXN0ZXJJZGVudGl0eScsIHsgZW1haWw6IGlkVG9SZW1vdmUgfSkudGhlbigoKSA9PiB7XG4gICAgICBsZXQgbnVtRW1haWxzID0gZW1haWxzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRW1haWxzOyBpKyspIHtcbiAgICAgICAgaWYgKGVtYWlsc1tpXS5lbWFpbCA9PT0gaWRUb1JlbW92ZSkge1xuICAgICAgICAgIGVtYWlscy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG4gICAgICBfdGhpcy5zaG93TXlJZGVudGl0aWVzKGVtYWlscywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICAvL190aGlzLmlkZW50aXR5TW9kdWxlLnVucmVnaXN0ZXJJZGVudGl0eShpZFRvUmVtb3ZlKTtcblxuICB9XG5cbiAgb2J0YWluTmV3SWRlbnRpdHkoZXZlbnQsIGNhbGxiYWNrLCB0b1JlbW92ZUlEKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgaWRQcm92aWRlciA9IGV2ZW50LnRhcmdldC50ZXh0Q29udGVudDtcbiAgICBsZXQgaWRQcm92aWRlcjIgPSBldmVudC50YXJnZXQudGV4dDtcblxuICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2dldE15UHVibGljS2V5Jywge30pLnRoZW4oKHB1YmxpY0tleSkgPT4ge1xuLy8gICAgICBsZXQgcHVibGljS2V5ID0gYnRvYShrZXlQYWlyLnB1YmxpYyk7XG5cbiAgICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLFxuICAgICAgICB7IGNvbnRlbnRzOiBwdWJsaWNLZXksIG9yaWdpbjogJ29yaWdpbicsIHVzZXJuYW1lSGludDogdW5kZWZpbmVkLFxuICAgICAgICBpZHBEb21haW46IGlkUHJvdmlkZXIsIH0pLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5vYnRhaW5OZXdJZGVudGl0eV0gcmVjZWl2ZWRVUkwgZnJvbSBpZHAgUHJveHk6ICcgKyB2YWx1ZS5sb2dpblVybC5zdWJzdHJpbmcoMCwgMjApICsgJy4uLicpO1xuXG4gICAgICAgIGxldCB1cmwgPSB2YWx1ZS5sb2dpblVybDtcbiAgICAgICAgbGV0IGZpbmFsVVJMO1xuXG4gICAgICAgIC8vY2hlY2sgaWYgdGhlIHJlY2VpdmVkVVJMIGNvbnRhaW5zIHRoZSByZWRpcmVjdCBmaWVsZCBhbmQgcmVwbGFjZSBpdFxuICAgICAgICBpZiAodXJsLmluZGV4T2YoJ3JlZGlyZWN0X3VyaScpICE9PSAtMSkge1xuICAgICAgICAgIGxldCBmaXJzdFBhcnQgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSk7XG4gICAgICAgICAgbGV0IHNlY29uZEF1eFBhcnQgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSwgdXJsLmxlbmd0aCk7XG5cbiAgICAgICAgICBsZXQgc2Vjb25kUGFydCA9IHNlY29uZEF1eFBhcnQuc3Vic3RyaW5nKHNlY29uZEF1eFBhcnQuaW5kZXhPZignJicpLCB1cmwubGVuZ3RoKTtcblxuICAgICAgICAgIC8vY2hlY2sgaWYgdGhlIHJlZGRpcmVjdCBmaWVsZCBpcyB0aGUgbGFzdCBmaWVsZCBvZiB0aGUgVVJMXG4gICAgICAgICAgaWYgKHNlY29uZFBhcnQuaW5kZXhPZignJicpICE9PSAtMSkge1xuICAgICAgICAgICAgZmluYWxVUkwgPSBmaXJzdFBhcnQgKyAncmVkaXJlY3RfdXJpPScgKyBsb2NhdGlvbi5vcmlnaW4gKyBzZWNvbmRQYXJ0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5yZXN1bHRVUkwgPSBmaW5hbFVSTCB8fCB1cmw7XG5cbiAgICAgICAgJCgnLmxvZ2luLWlkcCcpLmh0bWwoJzxwPkNob3NlbiBJRFA6ICcgKyBpZFByb3ZpZGVyICsgJzwvcD4nKTtcbiAgICAgICAgJCgnLmxvZ2luJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgJCgnLmxvZ2luLWJ0bicpLm9mZigpO1xuICAgICAgICAkKCcubG9naW4tYnRuJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgJCgnLmxvZ2luJykuYWRkQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgICBfdGhpcy5fYXV0aGVudGljYXRlVXNlcihwdWJsaWNLZXksIHZhbHVlLCAnb3JpZ2luJywgaWRQcm92aWRlcikudGhlbigoZW1haWwpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVtYWlsKTtcbiAgICAgICAgICAgIF90aGlzLnNob3dJZGVudGl0aWVzR1VJKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdvYnRhbmluIG5ldyBpZGVudGl0eScsIGVycikpO1xuXG4gIH1cblxuICBfZ2V0TGlzdChpdGVtcykge1xuICAgIGxldCBsaXN0ID0gJyc7XG4gICAgbGV0IG51bUl0ZW1zID0gaXRlbXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1JdGVtczsgaSsrKSB7XG4gICAgICBsaXN0ICs9ICc8bGkgY2xhc3M9XCJkaXZpZGVyXCI+PC9saT4nO1xuICAgICAgbGlzdCArPSAnPGxpPjxhIGNsYXNzPVwiY2VudGVyLWFsaWduXCI+JyArIGl0ZW1zW2ldICsgJzwvYT48L2xpPic7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBfYXV0aGVudGljYXRlVXNlcihwdWJsaWNLZXksIHZhbHVlLCBvcmlnaW4sIGlkUHJvdmlkZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCB1cmwgPSBfdGhpcy5yZXN1bHRVUkw7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBfdGhpcy5vcGVuUG9wdXAodXJsKS50aGVuKChpZGVudGl0eSkgPT4ge1xuXG4gICAgICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLFxuICAgICAgICAgIHsgY29udGVudHM6IHB1YmxpY0tleSwgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogaWRlbnRpdHksIGlkcERvbWFpbjogaWRQcm92aWRlciB9KS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICAgIGlmIChyZXN1bHQpIHtcblxuICAgICAgICAgICAvL190aGlzLmlkZW50aXR5TW9kdWxlLnN0b3JlSWRlbnRpdHkocmVzdWx0LCBrZXlQYWlyKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdhZGRBc3NlcnRpb24nLCByZXN1bHQpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZS51c2VyUHJvZmlsZS51c2VyVVJMKTtcbiAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gb2J0YWluaW5nIGlkZW50aXR5IGluZm9ybWF0aW9uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgfSk7XG4gICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuX3Jlc2V0SWRlbnRpdGllcygpIHtcbiAgY29uc29sZS5sb2coJ19yZXNldElkZW50aXRpZXMnKTtcbn1cblxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IElkZW50aXRpZXNHVUk7XG4iXX0="}