{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/IdentitiesGUI.js"],"names":[],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// jshint browser:true, jquery: true\r\n\r\nclass IdentitiesGUI {\r\n\r\n  constructor(guiURL, idmURL, messageBus) {\r\n    //if (!identityModule) throw Error('Identity Module not set!');\r\n    if (!messageBus) throw Error('Message Bus not set!');\r\n    let _this = this;\r\n    _this._guiURL = guiURL;\r\n    _this._idmURL = idmURL;\r\n    _this._messageBus = messageBus;\r\n\r\n    this.callIdentityModuleFunc('deployGUI', {}).then((result) => {\r\n      return this._buildDrawer();\r\n    }).then((result) => {\r\n      console.log('READY:', result);\r\n    });\r\n\r\n    this.isLogged = false;\r\n\r\n    const drawerEl = document.querySelector('.mdc-temporary-drawer');\r\n    const MDCTemporaryDrawer = mdc.drawer.MDCTemporaryDrawer;\r\n    const drawer = new MDCTemporaryDrawer(drawerEl);\r\n\r\n    this._drawerEl = drawerEl;\r\n    this._drawer = drawer;\r\n\r\n    document.querySelector('.settings-btn').addEventListener('click', function() {\r\n      drawer.open = true;\r\n    });\r\n\r\n    drawerEl.addEventListener('MDCTemporaryDrawer:open', () => {\r\n      console.log('Received MDCTemporaryDrawer:open');\r\n      this._isDrawerOpen = true;\r\n    });\r\n\r\n    drawerEl.addEventListener('MDCTemporaryDrawer:close', () => {\r\n      console.log('Received MDCTemporaryDrawer:close');\r\n      this._isDrawerOpen = false;\r\n\r\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n    });\r\n\r\n  }\r\n\r\n  logOut() {\r\n    let _this = this;\r\n    console.log('IdentitiesGUI: logging out');\r\n    return new Promise((resolve, reject) => {\r\n\r\n      console.log('Building drawer');\r\n      _this._buildDrawer();\r\n\r\n      resolve('Gui reset');\r\n\r\n\r\n    });\r\n  }\r\n\r\n  _buildDrawer() {\r\n\r\n    const guiURL = this._guiURL;\r\n\r\n    this._messageBus.addListener(guiURL, msg => {\r\n\r\n      const funcName = msg.body.method;\r\n\r\n      if (msg.type !== 'response') {\r\n\r\n\r\n        if (!this.isLogged) {\r\n\r\n          const clickClose = new MouseEvent('click');\r\n          document.querySelector('.settings-btn').dispatchEvent(clickClose);\r\n\r\n        }\r\n\r\n      }\r\n\r\n      if (funcName === 'openPopup') {\r\n\r\n        this.openPopup().then(() => {\r\n\r\n          let urlreceived = msg.body.params.urlreceived;\r\n          this.openPopup(urlreceived).then((returnedValue) => {\r\n            let value = {type: 'execute', value: returnedValue, code: 200};\r\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n            this._messageBus.postMessage(replyMsg);\r\n          });\r\n\r\n        });\r\n\r\n        return;\r\n\r\n      }\r\n\r\n      const callback = (identityInfo) => {\r\n\r\n        this.isLogged = true;\r\n\r\n        this._buildMessage(msg, identityInfo);\r\n\r\n      };\r\n\r\n      this.callback = callback;\r\n\r\n      this._getIdentities(callback);\r\n\r\n    });\r\n\r\n    this._getIdentities();\r\n\r\n  }\r\n\r\n  _buildMessage(msg, identityInfo) {\r\n    let replyMsg;\r\n    let value;\r\n\r\n    const from = msg ? msg.from : this._guiURL;\r\n    const to = msg ? msg.to : this._idmURL;\r\n\r\n    console.log('chosen identity: ', identityInfo);\r\n\r\n    switch (identityInfo.type) {\r\n      case 'idp':\r\n        value = { type: 'idp', value: identityInfo.value, code: 200 };\r\n        break;\r\n\r\n      case 'identity':\r\n        value = { type: 'identity', value: identityInfo.value, code: 200 };\r\n        break;\r\n\r\n      default:\r\n        value = { type: 'error', value: 'Error on identity GUI', code: 400 };\r\n    }\r\n\r\n    replyMsg = {id: msg.id, type: 'response', to: from, from: to, body: value };\r\n\r\n    this._messageBus.postMessage(replyMsg);\r\n  }\r\n\r\n  _getIdentities(callback) {\r\n\r\n    return this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((resultObject) => {\r\n      if (callback) {\r\n        return Promise.all([this.showIdps(resultObject.idps, callback), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject, callback)]);\r\n      } else {\r\n        return Promise.all([this.showIdps(resultObject.idps), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject)]);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  // _openDrawer() {\r\n\r\n  //   let _this = this;\r\n  //   const guiURL = _this._guiURL;\r\n\r\n  //   _this.resultURL  = undefined;\r\n\r\n  //   _this._messageBus.addListener(guiURL, msg => {\r\n  //     let identityInfo = msg.body.value;\r\n  //     let funcName = msg.body.method;\r\n  //     let value;\r\n  //     console.log('[IdentitiesGUI] received msg: ', msg);\r\n\r\n  //     _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\r\n\r\n  //       let replyMsg;\r\n  //       console.log('[IdentitiesGUI] identityInfo from GUI: ', identityInfo);\r\n\r\n  //       //hide config page with the identity GUI\r\n  //       parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n  //       $('.admin-page').addClass('hide');\r\n\r\n  //       // document.getElementsByTagName('body')[0].style = 'background-color:transparent';\r\n  //       $('.identities-section').addClass('hide');\r\n  //       $('.policies-section').addClass('hide');\r\n\r\n  //       switch (identityInfo.type) {\r\n  //         case 'idp':\r\n  //           value = { type: 'idp', value: identityInfo.value, code: 200 };\r\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n  //           _this._messageBus.postMessage(replyMsg);\r\n  //           break;\r\n\r\n  //         case 'identity':\r\n  //           value = { type: 'identity', value: identityInfo.value, code: 200 };\r\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n  //           _this._messageBus.postMessage(replyMsg);\r\n  //           break;\r\n\r\n  //         default:\r\n  //           value = { type: 'error', value: 'Error on identity GUI', code: 400 };\r\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n  //           _this._messageBus.postMessage(replyMsg);\r\n  //       }\r\n  //     });\r\n\r\n  //     if (funcName === 'openPopup') {\r\n  //       let urlreceived = msg.body.params.urlreceived;\r\n  //       _this.openPopup(urlreceived).then((returnedValue) => {\r\n  //         let value = {type: 'execute', value: returnedValue, code: 200};\r\n  //         let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n  //         _this._messageBus.postMessage(replyMsg);\r\n  //       });\r\n  //       return; // this avoids getting stuck in the identities page\r\n  //     }\r\n\r\n  //     // unhide the config page with the identity GUI\r\n  //     // document.getElementsByTagName('body')[0].style = 'background-color:white;';\r\n  //     parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n\r\n  //     const clickOpen = new MouseEvent('click');\r\n  //     document.querySelector('.settings-btn').dispatchEvent(clickOpen);\r\n\r\n  //     $('.admin-page').removeClass('hide');\r\n\r\n  //   });\r\n  // }\r\n\r\n  callIdentityModuleFunc(methodName, parameters) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\r\n        body: { resource: 'identity', method: methodName, params: parameters }};\r\n\r\n      this._messageBus.postMessage(message, (res) => {\r\n        let result = res.body.value;\r\n        resolve(result);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  openPopup(urlreceived) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let win;\r\n      if (!urlreceived) {\r\n        win = window.open('', 'openIDrequest', 'location=1,status=1');\r\n        this.win = win;\r\n        resolve();\r\n      } else {\r\n        win = this.win;\r\n        win.location.href = urlreceived;\r\n      }\r\n\r\n      // let win = window.open(urlreceived, 'openIDrequest', 'location=1,status=1,scrollbars=1');\r\n      if (window.cordova) {\r\n        win.addEventListener('loadstart', function(e) {\r\n          let url = e.url;\r\n          let code = /\\&code=(.+)$/.exec(url);\r\n          let error = /\\&error=(.+)$/.exec(url);\r\n\r\n          if (code || error) {\r\n            win.close();\r\n            return resolve(url);\r\n          } else {\r\n            return reject('openPopup error 1 - should not happen');\r\n          }\r\n        });\r\n      } else {\r\n\r\n        let pollTimer = setInterval(function() {\r\n          try {\r\n            if (win.closed) {\r\n              clearInterval(pollTimer);\r\n\n              // return reject('Some error occured when trying to get identity.');\r\n            }\r\n\r\n            if ((win.document.URL.indexOf('access_token') !== -1 || win.document.URL.indexOf('code') !== -1) && win.document.URL.indexOf(location.origin) !== -1) {\r\n              window.clearInterval(pollTimer);\r\n              let url =   win.document.URL;\r\n\r\n              resolve(url);\r\n              return win.close();\r\n            }\r\n          } catch (e) {\r\n            //return reject('openPopup error 2 - should not happen');\r\n            // console.log(e);\r\n          }\r\n\r\n        }, 500);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // showIdentitiesGUI(receivedInfo) {\r\n  //   let _this = this;\r\n\r\n  //   return new Promise((resolve, reject) => {\r\n  //     console.log('[IdentitiesGUI.showIdentitiesGUI] receivedInfo: ', receivedInfo);\r\n\r\n  //     let identityInfo;\r\n  //     let toRemoveID;\r\n\r\n  //     let callback = (value) => {\r\n  //       console.log('chosen identity: ', value);\r\n\r\n  //       const clickClose = new MouseEvent('click');\r\n  //       document.querySelector('.settings-btn').dispatchEvent(clickClose);\r\n\r\n  //       resolve({type: 'identity', value: value});\r\n  //     };\r\n\r\n  //     _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\r\n  //       identityInfo = resultObject.identityInfo;\r\n  //       toRemoveID = resultObject.toRemoveID;\r\n\r\n  //       $('.policies-section').addClass('hide');\r\n  //       $('.identities-section').removeClass('hide');\r\n\r\n  //       _this.showIdps(receivedInfo.idps, callback);\r\n\r\n  //       _this.showIdentities(identityInfo.identities, toRemoveID).then((identity) => {\r\n  //         console.log('chosen identity: ', identity);\r\n  //         resolve({type: 'identity', value: identity});\r\n  //       });\r\n\r\n  //       let idps = [];\r\n  //       let idpsObjects = identityInfo.idps;\r\n\r\n  //       idpsObjects.forEach(function(entry) {\r\n  //         if(entry.type && entry.type == 'idToken') {\r\n  //           idps.push(entry.domain);\r\n  //         }\r\n  //       });\r\n\r\n  //       $('#idproviders').html(_this._getList(idps));\r\n  //       $('#idproviders').off();\r\n  //       // $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\r\n  //       //$('.back').on('click', (event) => _this.goHome());\r\n  //       $('.identities-reset').off();\r\n  //       // $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  _checkReceivedInfo(receivedInfo) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let identityInfo;\r\n      let toRemoveID;\r\n\r\n      if (receivedInfo) {\r\n        identityInfo = receivedInfo;\r\n        toRemoveID = false;\r\n        resolve({identityInfo: identityInfo, toRemoveID: toRemoveID});\r\n      } else {\r\n        toRemoveID = true;\r\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\r\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  showIdps(idps) {\r\n\r\n    console.log('[IdentitiesGUI.showIdps] : ', idps);\r\n\r\n    let idpsListEl = document.getElementById('idps-list');\r\n\r\n    const clickEvent = (event) => {\r\n      const el = event.currentTarget;\r\n      const idp = el.getAttribute('data-idp');\r\n\r\n      this.loginWithIDP(idp).then((result) => {\r\n        console.log('value here: ', result.value);\r\n        result.value = result.value.userURL\r\n\r\n        if (this.callback) {\r\n          this.callback(result);\r\n        }\r\n\r\n      });\r\n    };\r\n\r\n    idps.forEach((key) => {\r\n\r\n      let linkEl = document.getElementById('link-' + key.domain);\r\n\r\n      if (!linkEl) {\r\n        linkEl = document.createElement('a');\r\n        linkEl.setAttribute('id', 'link-' + key.domain);\r\n        linkEl.setAttribute('data-idp', key.domain);\r\n        linkEl.classList = 'mdc-list-item link-' + key.domain;\r\n        linkEl.href = '#';\r\n\r\n        const linkElText = document.createTextNode(key.domain);\r\n\r\n        let name = key.domain;\r\n        if (name.indexOf('.') !== -1) {\r\n          name = name.substring(0, name.indexOf('.'));\r\n        } else {\r\n          name = 'question';\r\n        }\r\n\r\n        const imgEl = document.createElement('img');\r\n        imgEl.classList = 'mdc-list-item__start-detail';\r\n        imgEl.src = './assets/' + name + '.svg';\r\n        imgEl.width = 30;\r\n        imgEl.height = 30;\r\n\r\n        imgEl.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\r\n\r\n        linkEl.appendChild(imgEl);\r\n        linkEl.appendChild(linkElText);\r\n\r\n        idpsListEl.appendChild(linkEl);\r\n      } else {\r\n        linkEl.removeEventListener('click', clickEvent);\r\n      }\r\n\r\n      linkEl.addEventListener('click', clickEvent);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  showDefaultIdentity(identity) {\r\n\r\n    if (identity) {\r\n\r\n      this.isLogged = true;\r\n\r\n      const header = document.querySelector('.mdc-list--avatar-list');\r\n\r\n      let itemEl = document.getElementById('item-' + identity.userProfile.userURL);\r\n\r\n      if (!itemEl) {\r\n\r\n        itemEl = document.createElement('li');\r\n        itemEl.id = 'item-' + identity.userProfile.userURL;\r\n        itemEl.classList = 'mdc-list-item item-' + identity.userProfile.userURL;\r\n        itemEl.setAttribute('data-userURL', identity.userProfile.userURL);\r\n\r\n        const profileImage = document.createElement('img');\r\n        profileImage.classList = 'mdc-list-item__start-detail';\r\n        profileImage.width = 56;\r\n        profileImage.height = 56;\r\n        profileImage.alt = identity.userProfile.name;\r\n        profileImage.src = identity.userProfile.picture;\r\n        itemEl.appendChild(profileImage);\r\n\r\n        const text1 = document.createElement('span');\r\n        text1.classList = 'name mdc-list-item__text';\r\n        text1.textContent = identity.userProfile.name;\r\n\r\n        const text2 = document.createElement('span');\r\n        text2.classList = 'email mdc-list-item__secondary-text';\r\n        text2.textContent = identity.userProfile.email;\r\n\r\n        text1.appendChild(text2);\r\n        itemEl.appendChild(text1);\r\n        header.appendChild(itemEl);\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  showIdentities(iDs, callback) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      console.log('[IdentitiesGUI.showMyIdentities] : ', iDs.identities, iDs.defaultIdentity);\r\n\r\n      const identities = iDs.identities;\r\n      const current = iDs.defaultIdentity ? iDs.defaultIdentity.userURL : '';\r\n\r\n      let activeIdentities = document.getElementById('active-identities');\r\n\r\n      Object.keys(identities).forEach((key) => {\r\n\r\n        const exist = document.getElementById('link-' + key);\r\n        if (exist) { return; }\r\n\r\n        const linkEl = document.createElement('a');\r\n        linkEl.href = '#';\r\n        linkEl.id = 'link-' + key;\r\n        linkEl.classList = 'mdc-list-item';\r\n        linkEl.setAttribute('data-userURL', key);\r\n\r\n        if (key === current) {\r\n          linkEl.classList += ' mdc-temporary-drawer--selected';\r\n        }\r\n\r\n        linkEl.addEventListener('click', (event) => {\r\n\r\n          event.preventDefault();\r\n\r\n          const el = event.currentTarget;\r\n          const userURL = el.getAttribute('data-userURL');\r\n\r\n          console.log('userURL:', userURL, callback, el);\r\n\r\n          if (callback) {\r\n            callback(userURL);\r\n          }\r\n\r\n        });\r\n\r\n        const profileImage = document.createElement('img');\r\n        profileImage.classList = 'mdc-list-item__start-detail';\r\n        profileImage.width = 40;\r\n        profileImage.height = 40;\r\n        profileImage.alt = identities[key].userProfile.name;\r\n        profileImage.src = identities[key].userProfile.picture;\r\n        profileImage.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\r\n\r\n        const text1 = document.createElement('span');\r\n        text1.classList = 'name mdc-list-item__text';\r\n        text1.textContent = identities[key].userProfile.name;\r\n\r\n        const text2 = document.createElement('span');\r\n        text2.classList = 'email mdc-list-item__secondary-text';\r\n        text2.textContent = identities[key].userProfile.email;\r\n\r\n        text1.appendChild(text2);\r\n\r\n        linkEl.appendChild(profileImage);\r\n        linkEl.appendChild(text1);\r\n\r\n        activeIdentities.appendChild(linkEl);\r\n\r\n      });\r\n\r\n      if (identities.length === 1) {\r\n\r\n        if (callback) {\r\n          callback({type: 'identity', value: current});\r\n        }\r\n\r\n        return resolve({type: 'identity', value: current});\r\n      }\r\n\r\n      if (identities.length > 1) {\r\n        this._drawer.open = true;\r\n      }\r\n\r\n      // let callback = (identity) => {\r\n      //   resolve(identity);\r\n      // };\r\n\r\n      // if (!toRemoveID) {\r\n      //   $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\r\n      // }\r\n\r\n      // $('.remove-id').on('click', (event) => _this.removeID(iDs));\r\n\r\n    });\r\n  }\r\n\r\n  removeID(event, emails) {\r\n    let _this = this;\r\n    let row = event.target.parentNode.parentNode;\r\n    let idToRemove = row.children[0].textContent;\r\n    let domain = row.children[1].textContent;\r\n\r\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\r\n      let numEmails = emails.length;\r\n      for (let i = 0; i < numEmails; i++) {\r\n        if (emails[i].email === idToRemove) {\r\n          emails.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // -------------------------------------------------------------------------//\r\n      _this.showIdentities(emails, true);\r\n    });\r\n\r\n    //_this.identityModule.unregisterIdentity(idToRemove);\r\n\r\n  }\r\n\r\n  loginWithIDP(idp) {\r\n\r\n\r\n    let _publicKey;\r\n\r\n    return this.openPopup()\r\n      .then((result) => {\r\n        return this.callIdentityModuleFunc('getMyPublicKey', {});\r\n      }).then((publicKey) => {\r\n        _publicKey = publicKey;\r\n        const data = { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idp };\r\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\r\n      })\r\n      .then((value) => {\r\n        console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\r\n\r\n        let url = value.loginUrl;\r\n        let finalURL;\r\n\r\n        //check if the receivedURL contains the redirect field and replace it\r\n        if (url.indexOf('redirect_uri') !== -1) {\r\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\r\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\r\n\r\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\r\n\r\n          //check if the reddirect field is the last field of the URL\r\n          if (secondPart.indexOf('&') !== -1) {\r\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\r\n          } else {\r\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\r\n          }\r\n        }\r\n\r\n        this.resultURL = finalURL || url;\r\n\r\n        console.log('[IdentitiesGUI.openPopup]', this.resultURL);\r\n        return this.openPopup(this.resultURL);\r\n      }).then((identity) => {\r\n\r\n        console.log('[IdentitiesGUI.openPopup.result]', identity);\r\n\r\n        const data = { contents: _publicKey, origin: 'origin', usernameHint: identity, idpDomain: idp };\r\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\r\n      }).then((result) => {\r\n\r\n        console.log('[IdentitiesGUI.sendGenerateMessage.result]', result);\r\n        return this.callIdentityModuleFunc('addAssertion', result);\r\n      }).then((value) => {\r\n\r\n        this._drawer.open = false;\r\n        // const userURL = {type: 'identity', value: value.userProfile.userURL};\r\n        const userIdentity = {type: 'identity', value: value.userProfile};\r\n\r\n        console.log('[IdentitiesGUI.loginWithIDP final]', value);\r\n        // return userURL;\r\n        return userIdentity;\r\n      });\r\n\r\n  }\r\n\r\n  // obtainNewIdentity(event, callback, toRemoveID) {\r\n  //   let _this = this;\r\n  //   let idProvider = event.target.textContent;\r\n  //   let idProvider2 = event.target.text;\r\n\r\n  //   _this.callIdentityModuleFunc('getMyPublicKey', {}).then((publicKey) => {\r\n  //     // let publicKey = btoa(keyPair.public);\r\n\r\n  //     _this.callIdentityModuleFunc('sendGenerateMessage',\r\n  //       { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idProvider, }).then((value) => {\r\n  //       console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\r\n\r\n  //       let url = value.loginUrl;\r\n  //       let finalURL;\r\n\r\n  //       //check if the receivedURL contains the redirect field and replace it\r\n  //       if (url.indexOf('redirect_uri') !== -1) {\r\n  //         let firstPart = url.substring(0, url.indexOf('redirect_uri'));\r\n  //         let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\r\n\r\n  //         let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\r\n\r\n  //         //check if the reddirect field is the last field of the URL\r\n  //         if (secondPart.indexOf('&') !== -1) {\r\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\r\n  //         } else {\r\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin;\r\n  //         }\r\n  //       }\r\n\r\n  //       _this.resultURL = finalURL || url;\r\n\r\n  //       $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\r\n  //       $('.login').removeClass('hide');\r\n  //       $('.login-btn').off();\r\n  //       $('.login-btn').on('click', (event) => {\r\n  //         $('.login').addClass('hide');\r\n  //         // _this._authenticateUser(publicKey, value, 'origin', idProvider).then((email) => {\r\n  //         //   callback(email);\r\n  //         //   _this.showIdentitiesGUI();\r\n  //         // });\r\n  //       });\r\n  //     });\r\n  //   }).catch(err => console.log('obtanin new identity', err));\r\n\r\n  // }\r\n\r\n  _getList(items) {\r\n    let list = '';\r\n    let numItems = items.length;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n      list += '<li class=\"divider\"></li>';\r\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  _authenticateUser(publicKey, value, origin, idProvider) {\r\n    let _this = this;\r\n    let url = _this.resultURL;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      _this.openPopup(url).then((identity) => {\r\n\r\n        _this.callIdentityModuleFunc('sendGenerateMessage',\r\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\r\n\r\n          if (result) {\r\n\r\n            //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\r\n            _this.callIdentityModuleFunc('addAssertion', result).then((value) => {\r\n              resolve(value.userProfile.userURL);\r\n            }, (err) => {\r\n              reject(err);\r\n            });\r\n\r\n          } else {\r\n            reject('error on obtaining identity information');\r\n          }\r\n\r\n        });\r\n      }, (err) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  _resetIdentities() {\r\n    console.log('_resetIdentities');\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default IdentitiesGUI;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWRtaW4vSWRlbnRpdGllc0dVSS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNBQTs7SUFFTSxhO0FBRUoseUJBQVksTUFBWixFQUFvQixNQUFwQixFQUE0QixVQUE1QixFQUF3QztBQUFBOztBQUFBOztBQUN0QztBQUNBLFFBQUksQ0FBQyxVQUFMLEVBQWlCLE1BQU0sTUFBTSxzQkFBTixDQUFOO0FBQ2pCLFFBQUksUUFBUSxJQUFaO0FBQ0EsVUFBTSxPQUFOLEdBQWdCLE1BQWhCO0FBQ0EsVUFBTSxPQUFOLEdBQWdCLE1BQWhCO0FBQ0EsVUFBTSxXQUFOLEdBQW9CLFVBQXBCOztBQUVBLFNBQUssc0JBQUwsQ0FBNEIsV0FBNUIsRUFBeUMsRUFBekMsRUFBNkMsSUFBN0MsQ0FBa0QsVUFBQyxNQUFELEVBQVk7QUFDNUQsYUFBTyxPQUFLLFlBQUwsRUFBUDtBQUNELEtBRkQsRUFFRyxJQUZILENBRVEsVUFBQyxNQUFELEVBQVk7QUFDbEIsY0FBUSxHQUFSLENBQVksUUFBWixFQUFzQixNQUF0QjtBQUNELEtBSkQ7O0FBTUEsU0FBSyxRQUFMLEdBQWdCLEtBQWhCOztBQUVBLFFBQU0sV0FBVyxTQUFTLGFBQVQsQ0FBdUIsdUJBQXZCLENBQWpCO0FBQ0EsUUFBTSxxQkFBcUIsSUFBSSxNQUFKLENBQVcsa0JBQXRDO0FBQ0EsUUFBTSxTQUFTLElBQUksa0JBQUosQ0FBdUIsUUFBdkIsQ0FBZjs7QUFFQSxTQUFLLFNBQUwsR0FBaUIsUUFBakI7QUFDQSxTQUFLLE9BQUwsR0FBZSxNQUFmOztBQUVBLGFBQVMsYUFBVCxDQUF1QixlQUF2QixFQUF3QyxnQkFBeEMsQ0FBeUQsT0FBekQsRUFBa0UsWUFBVztBQUMzRSxhQUFPLElBQVAsR0FBYyxJQUFkO0FBQ0QsS0FGRDs7QUFJQSxhQUFTLGdCQUFULENBQTBCLHlCQUExQixFQUFxRCxZQUFNO0FBQ3pE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LEdBQVIsQ0FBWSxrQkFBWjtBQUNEOzs7Ozs7a0JBS1ksYSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBqc2hpbnQgYnJvd3Nlcjp0cnVlLCBqcXVlcnk6IHRydWVcclxuXHJcbmNsYXNzIElkZW50aXRpZXNHVUkge1xyXG5cclxuICBjb25zdHJ1Y3RvcihndWlVUkwsIGlkbVVSTCwgbWVzc2FnZUJ1cykge1xyXG4gICAgLy9pZiAoIWlkZW50aXR5TW9kdWxlKSB0aHJvdyBFcnJvcignSWRlbnRpdHkgTW9kdWxlIG5vdCBzZXQhJyk7XHJcbiAgICBpZiAoIW1lc3NhZ2VCdXMpIHRocm93IEVycm9yKCdNZXNzYWdlIEJ1cyBub3Qgc2V0IScpO1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLl9ndWlVUkwgPSBndWlVUkw7XHJcbiAgICBfdGhpcy5faWRtVVJMID0gaWRtVVJMO1xyXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xyXG5cclxuICAgIHRoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnZGVwbG95R1VJJywge30pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5fYnVpbGREcmF3ZXIoKTtcclxuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnUkVBRFk6JywgcmVzdWx0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuaXNMb2dnZWQgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdCBkcmF3ZXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZGMtdGVtcG9yYXJ5LWRyYXdlcicpO1xyXG4gICAgY29uc3QgTURDVGVtcG9yYXJ5RHJhd2VyID0gbWRjLmRyYXdlci5NRENUZW1wb3JhcnlEcmF3ZXI7XHJcbiAgICBjb25zdCBkcmF3ZXIgPSBuZXcgTURDVGVtcG9yYXJ5RHJhd2VyKGRyYXdlckVsKTtcclxuXHJcbiAgICB0aGlzLl9kcmF3ZXJFbCA9IGRyYXdlckVsO1xyXG4gICAgdGhpcy5fZHJhd2VyID0gZHJhd2VyO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5ncy1idG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBkcmF3ZXIub3BlbiA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkcmF3ZXJFbC5hZGRFdmVudExpc3RlbmVyKCdNRENUZW1wb3JhcnlEcmF3ZXI6b3BlbicsICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIE1EQ1RlbXBvcmFyeURyYXdlcjpvcGVuJyk7XHJcbiAgICAgIHRoaXMuX2lzRHJhd2VyT3BlbiA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkcmF3ZXJFbC5hZGRFdmVudExpc3RlbmVyKCdNRENUZW1wb3JhcnlEcmF3ZXI6Y2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBNRENUZW1wb3JhcnlEcmF3ZXI6Y2xvc2UnKTtcclxuICAgICAgdGhpcy5faXNEcmF3ZXJPcGVuID0gZmFsc2U7XHJcblxyXG4gICAgICBwYXJlbnQucG9zdE1lc3NhZ2UoeyBib2R5OiB7IG1ldGhvZDogJ2hpZGVBZG1pblBhZ2UnIH0sIHRvOiAncnVudGltZTpndWktbWFuYWdlcicgfSwgJyonKTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIGxvZ091dCgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBjb25zb2xlLmxvZygnSWRlbnRpdGllc0dVSTogbG9nZ2luZyBvdXQnKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnQnVpbGRpbmcgZHJhd2VyJyk7XHJcbiAgICAgIF90aGlzLl9idWlsZERyYXdlcigpO1xyXG5cclxuICAgICAgcmVzb2x2ZSgnR3VpIHJlc2V0Jyk7XHJcblxyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2J1aWxkRHJhd2VyKCkge1xyXG5cclxuICAgIGNvbnN0IGd1aVVSTCA9IHRoaXMuX2d1aVVSTDtcclxuXHJcbiAgICB0aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGd1aVVSTCwgbXNnID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IGZ1bmNOYW1lID0gbXNnLmJvZHkubWV0aG9kO1xyXG5cclxuICAgICAgaWYgKG1zZy50eXBlICE9PSAncmVzcG9uc2UnKSB7XHJcblxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaXNMb2dnZWQpIHtcclxuXHJcbiAgICAgICAgICBjb25zdCBjbGlja0Nsb3NlID0gbmV3IE1vdXNlRXZlbnQoJ2NsaWNrJyk7XHJcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3MtYnRuJykuZGlzcGF0Y2hFdmVudChjbGlja0Nsb3NlKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGZ1bmNOYW1lID09PSAnb3BlblBvcHVwJykge1xyXG5cclxuICAgICAgICB0aGlzLm9wZW5Qb3B1cCgpLnRoZW4oKCkgPT4ge1xyXG5cclxuICAgICAgICAgIGxldCB1cmxyZWNlaXZlZCA9IG1zZy5ib2R5LnBhcmFtcy51cmxyZWNlaXZlZDtcclxuICAgICAgICAgIHRoaXMub3BlblBvcHVwKHVybHJlY2VpdmVkKS50aGVuKChyZXR1cm5lZFZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHt0eXBlOiAnZXhlY3V0ZScsIHZhbHVlOiByZXR1cm5lZFZhbHVlLCBjb2RlOiAyMDB9O1xyXG4gICAgICAgICAgICBsZXQgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlfTtcclxuICAgICAgICAgICAgdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGlkZW50aXR5SW5mbykgPT4ge1xyXG5cclxuICAgICAgICB0aGlzLmlzTG9nZ2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRNZXNzYWdlKG1zZywgaWRlbnRpdHlJbmZvKTtcclxuXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcblxyXG4gICAgICB0aGlzLl9nZXRJZGVudGl0aWVzKGNhbGxiYWNrKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9nZXRJZGVudGl0aWVzKCk7XHJcblxyXG4gIH1cclxuXHJcbiAgX2J1aWxkTWVzc2FnZShtc2csIGlkZW50aXR5SW5mbykge1xyXG4gICAgbGV0IHJlcGx5TXNnO1xyXG4gICAgbGV0IHZhbHVlO1xyXG5cclxuICAgIGNvbnN0IGZyb20gPSBtc2cgPyBtc2cuZnJvbSA6IHRoaXMuX2d1aVVSTDtcclxuICAgIGNvbnN0IHRvID0gbXNnID8gbXNnLnRvIDogdGhpcy5faWRtVVJMO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdjaG9zZW4gaWRlbnRpdHk6ICcsIGlkZW50aXR5SW5mbyk7XHJcblxyXG4gICAgc3dpdGNoIChpZGVudGl0eUluZm8udHlwZSkge1xyXG4gICAgICBjYXNlICdpZHAnOlxyXG4gICAgICAgIHZhbHVlID0geyB0eXBlOiAnaWRwJywgdmFsdWU6IGlkZW50aXR5SW5mby52YWx1ZSwgY29kZTogMjAwIH07XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdpZGVudGl0eSc6XHJcbiAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZGVudGl0eScsIHZhbHVlOiBpZGVudGl0eUluZm8udmFsdWUsIGNvZGU6IDIwMCB9O1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB2YWx1ZSA9IHsgdHlwZTogJ2Vycm9yJywgdmFsdWU6ICdFcnJvciBvbiBpZGVudGl0eSBHVUknLCBjb2RlOiA0MDAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXBseU1zZyA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogZnJvbSwgZnJvbTogdG8sIGJvZHk6IHZhbHVlIH07XHJcblxyXG4gICAgdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XHJcbiAgfVxyXG5cclxuICBfZ2V0SWRlbnRpdGllcyhjYWxsYmFjaykge1xyXG5cclxuICAgIHJldHVybiB0aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2dldElkZW50aXRpZXNUb0Nob29zZScsIHt9KS50aGVuKChyZXN1bHRPYmplY3QpID0+IHtcclxuICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnNob3dJZHBzKHJlc3VsdE9iamVjdC5pZHBzLCBjYWxsYmFjayksIHRoaXMuc2hvd0RlZmF1bHRJZGVudGl0eShyZXN1bHRPYmplY3QuZGVmYXVsdElkZW50aXR5KSwgdGhpcy5zaG93SWRlbnRpdGllcyhyZXN1bHRPYmplY3QsIGNhbGxiYWNrKV0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5zaG93SWRwcyhyZXN1bHRPYmplY3QuaWRwcyksIHRoaXMuc2hvd0RlZmF1bHRJZGVudGl0eShyZXN1bHRPYmplY3QuZGVmYXVsdElkZW50aXR5KSwgdGhpcy5zaG93SWRlbnRpdGllcyhyZXN1bHRPYmplY3QpXSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8vIF9vcGVuRHJhd2VyKCkge1xyXG5cclxuICAvLyAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgLy8gICBjb25zdCBndWlVUkwgPSBfdGhpcy5fZ3VpVVJMO1xyXG5cclxuICAvLyAgIF90aGlzLnJlc3VsdFVSTCAgPSB1bmRlZmluZWQ7XHJcblxyXG4gIC8vICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoZ3VpVVJMLCBtc2cgPT4ge1xyXG4gIC8vICAgICBsZXQgaWRlbnRpdHlJbmZvID0gbXNnLmJvZHkudmFsdWU7XHJcbiAgLy8gICAgIGxldCBmdW5jTmFtZSA9IG1zZy5ib2R5Lm1ldGhvZDtcclxuICAvLyAgICAgbGV0IHZhbHVlO1xyXG4gIC8vICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUldIHJlY2VpdmVkIG1zZzogJywgbXNnKTtcclxuXHJcbiAgLy8gICAgIF90aGlzLnNob3dJZGVudGl0aWVzR1VJKG1zZy5ib2R5LnZhbHVlKS50aGVuKChpZGVudGl0eUluZm8pID0+IHtcclxuXHJcbiAgLy8gICAgICAgbGV0IHJlcGx5TXNnO1xyXG4gIC8vICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSV0gaWRlbnRpdHlJbmZvIGZyb20gR1VJOiAnLCBpZGVudGl0eUluZm8pO1xyXG5cclxuICAvLyAgICAgICAvL2hpZGUgY29uZmlnIHBhZ2Ugd2l0aCB0aGUgaWRlbnRpdHkgR1VJXHJcbiAgLy8gICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKHsgYm9keTogeyBtZXRob2Q6ICdoaWRlQWRtaW5QYWdlJyB9LCB0bzogJ3J1bnRpbWU6Z3VpLW1hbmFnZXInIH0sICcqJyk7XHJcbiAgLy8gICAgICAgJCgnLmFkbWluLXBhZ2UnKS5hZGRDbGFzcygnaGlkZScpO1xyXG5cclxuICAvLyAgICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLnN0eWxlID0gJ2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQnO1xyXG4gIC8vICAgICAgICQoJy5pZGVudGl0aWVzLXNlY3Rpb24nKS5hZGRDbGFzcygnaGlkZScpO1xyXG4gIC8vICAgICAgICQoJy5wb2xpY2llcy1zZWN0aW9uJykuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuXHJcbiAgLy8gICAgICAgc3dpdGNoIChpZGVudGl0eUluZm8udHlwZSkge1xyXG4gIC8vICAgICAgICAgY2FzZSAnaWRwJzpcclxuICAvLyAgICAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZHAnLCB2YWx1ZTogaWRlbnRpdHlJbmZvLnZhbHVlLCBjb2RlOiAyMDAgfTtcclxuICAvLyAgICAgICAgICAgcmVwbHlNc2cgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZSB9O1xyXG4gIC8vICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XHJcbiAgLy8gICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAvLyAgICAgICAgIGNhc2UgJ2lkZW50aXR5JzpcclxuICAvLyAgICAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZGVudGl0eScsIHZhbHVlOiBpZGVudGl0eUluZm8udmFsdWUsIGNvZGU6IDIwMCB9O1xyXG4gIC8vICAgICAgICAgICByZXBseU1zZyA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlIH07XHJcbiAgLy8gICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcclxuICAvLyAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gIC8vICAgICAgICAgZGVmYXVsdDpcclxuICAvLyAgICAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdlcnJvcicsIHZhbHVlOiAnRXJyb3Igb24gaWRlbnRpdHkgR1VJJywgY29kZTogNDAwIH07XHJcbiAgLy8gICAgICAgICAgIHJlcGx5TXNnID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWUgfTtcclxuICAvLyAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpO1xyXG4gIC8vICAgICAgIH1cclxuICAvLyAgICAgfSk7XHJcblxyXG4gIC8vICAgICBpZiAoZnVuY05hbWUgPT09ICdvcGVuUG9wdXAnKSB7XHJcbiAgLy8gICAgICAgbGV0IHVybHJlY2VpdmVkID0gbXNnLmJvZHkucGFyYW1zLnVybHJlY2VpdmVkO1xyXG4gIC8vICAgICAgIF90aGlzLm9wZW5Qb3B1cCh1cmxyZWNlaXZlZCkudGhlbigocmV0dXJuZWRWYWx1ZSkgPT4ge1xyXG4gIC8vICAgICAgICAgbGV0IHZhbHVlID0ge3R5cGU6ICdleGVjdXRlJywgdmFsdWU6IHJldHVybmVkVmFsdWUsIGNvZGU6IDIwMH07XHJcbiAgLy8gICAgICAgICBsZXQgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlfTtcclxuICAvLyAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcclxuICAvLyAgICAgICB9KTtcclxuICAvLyAgICAgICByZXR1cm47IC8vIHRoaXMgYXZvaWRzIGdldHRpbmcgc3R1Y2sgaW4gdGhlIGlkZW50aXRpZXMgcGFnZVxyXG4gIC8vICAgICB9XHJcblxyXG4gIC8vICAgICAvLyB1bmhpZGUgdGhlIGNvbmZpZyBwYWdlIHdpdGggdGhlIGlkZW50aXR5IEdVSVxyXG4gIC8vICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLnN0eWxlID0gJ2JhY2tncm91bmQtY29sb3I6d2hpdGU7JztcclxuICAvLyAgICAgcGFyZW50LnBvc3RNZXNzYWdlKHsgYm9keTogeyBtZXRob2Q6ICdzaG93QWRtaW5QYWdlJyB9LCB0bzogJ3J1bnRpbWU6Z3VpLW1hbmFnZXInIH0sICcqJyk7XHJcblxyXG4gIC8vICAgICBjb25zdCBjbGlja09wZW4gPSBuZXcgTW91c2VFdmVudCgnY2xpY2snKTtcclxuICAvLyAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNldHRpbmdzLWJ0bicpLmRpc3BhdGNoRXZlbnQoY2xpY2tPcGVuKTtcclxuXHJcbiAgLy8gICAgICQoJy5hZG1pbi1wYWdlJykucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcclxuXHJcbiAgLy8gICB9KTtcclxuICAvLyB9XHJcblxyXG4gIGNhbGxJZGVudGl0eU1vZHVsZUZ1bmMobWV0aG9kTmFtZSwgcGFyYW1ldGVycykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBtZXNzYWdlID0geyB0eXBlOiAnZXhlY3V0ZScsIHRvOiBfdGhpcy5faWRtVVJMLCBmcm9tOiBfdGhpcy5fZ3VpVVJMLFxyXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogbWV0aG9kTmFtZSwgcGFyYW1zOiBwYXJhbWV0ZXJzIH19O1xyXG5cclxuICAgICAgdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlO1xyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvcGVuUG9wdXAodXJscmVjZWl2ZWQpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IHdpbjtcclxuICAgICAgaWYgKCF1cmxyZWNlaXZlZCkge1xyXG4gICAgICAgIHdpbiA9IHdpbmRvdy5vcGVuKCcnLCAnb3BlbklEcmVxdWVzdCcsICdsb2NhdGlvbj0xLHN0YXR1cz0xJyk7XHJcbiAgICAgICAgdGhpcy53aW4gPSB3aW47XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpbiA9IHRoaXMud2luO1xyXG4gICAgICAgIHdpbi5sb2NhdGlvbi5ocmVmID0gdXJscmVjZWl2ZWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGxldCB3aW4gPSB3aW5kb3cub3Blbih1cmxyZWNlaXZlZCwgJ29wZW5JRHJlcXVlc3QnLCAnbG9jYXRpb249MSxzdGF0dXM9MSxzY3JvbGxiYXJzPTEnKTtcclxuICAgICAgaWYgKHdpbmRvdy5jb3Jkb3ZhKSB7XHJcbiAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIGxldCB1cmwgPSBlLnVybDtcclxuICAgICAgICAgIGxldCBjb2RlID0gL1xcJmNvZGU9KC4rKSQvLmV4ZWModXJsKTtcclxuICAgICAgICAgIGxldCBlcnJvciA9IC9cXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpO1xyXG5cclxuICAgICAgICAgIGlmIChjb2RlIHx8IGVycm9yKSB7XHJcbiAgICAgICAgICAgIHdpbi5jbG9zZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1cmwpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnb3BlblBvcHVwIGVycm9yIDEgLSBzaG91bGQgbm90IGhhcHBlbicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICBsZXQgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAod2luLmNsb3NlZCkge1xyXG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTtcclxuXG4gICAgICAgICAgICAgIC8vIHJldHVybiByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdhY2Nlc3NfdG9rZW4nKSAhPT0gLTEgfHwgd2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdjb2RlJykgIT09IC0xKSAmJiB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChwb2xsVGltZXIpO1xyXG4gICAgICAgICAgICAgIGxldCB1cmwgPSAgIHdpbi5kb2N1bWVudC5VUkw7XHJcblxyXG4gICAgICAgICAgICAgIHJlc29sdmUodXJsKTtcclxuICAgICAgICAgICAgICByZXR1cm4gd2luLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy9yZXR1cm4gcmVqZWN0KCdvcGVuUG9wdXAgZXJyb3IgMiAtIHNob3VsZCBub3QgaGFwcGVuJyk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBzaG93SWRlbnRpdGllc0dVSShyZWNlaXZlZEluZm8pIHtcclxuICAvLyAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIC8vICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAvLyAgICAgY29uc29sZS5sb2coJ1tJZGVudGl0aWVzR1VJLnNob3dJZGVudGl0aWVzR1VJXSByZWNlaXZlZEluZm86ICcsIHJlY2VpdmVkSW5mbyk7XHJcblxyXG4gIC8vICAgICBsZXQgaWRlbnRpdHlJbmZvO1xyXG4gIC8vICAgICBsZXQgdG9SZW1vdmVJRDtcclxuXHJcbiAgLy8gICAgIGxldCBjYWxsYmFjayA9ICh2YWx1ZSkgPT4ge1xyXG4gIC8vICAgICAgIGNvbnNvbGUubG9nKCdjaG9zZW4gaWRlbnRpdHk6ICcsIHZhbHVlKTtcclxuXHJcbiAgLy8gICAgICAgY29uc3QgY2xpY2tDbG9zZSA9IG5ldyBNb3VzZUV2ZW50KCdjbGljaycpO1xyXG4gIC8vICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5ncy1idG4nKS5kaXNwYXRjaEV2ZW50KGNsaWNrQ2xvc2UpO1xyXG5cclxuICAvLyAgICAgICByZXNvbHZlKHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogdmFsdWV9KTtcclxuICAvLyAgICAgfTtcclxuXHJcbiAgLy8gICAgIF90aGlzLl9jaGVja1JlY2VpdmVkSW5mbyhyZWNlaXZlZEluZm8pLnRoZW4oKHJlc3VsdE9iamVjdCkgPT4ge1xyXG4gIC8vICAgICAgIGlkZW50aXR5SW5mbyA9IHJlc3VsdE9iamVjdC5pZGVudGl0eUluZm87XHJcbiAgLy8gICAgICAgdG9SZW1vdmVJRCA9IHJlc3VsdE9iamVjdC50b1JlbW92ZUlEO1xyXG5cclxuICAvLyAgICAgICAkKCcucG9saWNpZXMtc2VjdGlvbicpLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgLy8gICAgICAgJCgnLmlkZW50aXRpZXMtc2VjdGlvbicpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XHJcblxyXG4gIC8vICAgICAgIF90aGlzLnNob3dJZHBzKHJlY2VpdmVkSW5mby5pZHBzLCBjYWxsYmFjayk7XHJcblxyXG4gIC8vICAgICAgIF90aGlzLnNob3dJZGVudGl0aWVzKGlkZW50aXR5SW5mby5pZGVudGl0aWVzLCB0b1JlbW92ZUlEKS50aGVuKChpZGVudGl0eSkgPT4ge1xyXG4gIC8vICAgICAgICAgY29uc29sZS5sb2coJ2Nob3NlbiBpZGVudGl0eTogJywgaWRlbnRpdHkpO1xyXG4gIC8vICAgICAgICAgcmVzb2x2ZSh7dHlwZTogJ2lkZW50aXR5JywgdmFsdWU6IGlkZW50aXR5fSk7XHJcbiAgLy8gICAgICAgfSk7XHJcblxyXG4gIC8vICAgICAgIGxldCBpZHBzID0gW107XHJcbiAgLy8gICAgICAgbGV0IGlkcHNPYmplY3RzID0gaWRlbnRpdHlJbmZvLmlkcHM7XHJcblxyXG4gIC8vICAgICAgIGlkcHNPYmplY3RzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcclxuICAvLyAgICAgICAgIGlmKGVudHJ5LnR5cGUgJiYgZW50cnkudHlwZSA9PSAnaWRUb2tlbicpIHtcclxuICAvLyAgICAgICAgICAgaWRwcy5wdXNoKGVudHJ5LmRvbWFpbik7XHJcbiAgLy8gICAgICAgICB9XHJcbiAgLy8gICAgICAgfSk7XHJcblxyXG4gIC8vICAgICAgICQoJyNpZHByb3ZpZGVycycpLmh0bWwoX3RoaXMuX2dldExpc3QoaWRwcykpO1xyXG4gIC8vICAgICAgICQoJyNpZHByb3ZpZGVycycpLm9mZigpO1xyXG4gIC8vICAgICAgIC8vICQoJyNpZHByb3ZpZGVycycpLm9uKCdjbGljaycsIChldmVudCkgPT4gX3RoaXMub2J0YWluTmV3SWRlbnRpdHkoZXZlbnQsIGNhbGxiYWNrLCB0b1JlbW92ZUlEKSk7XHJcbiAgLy8gICAgICAgLy8kKCcuYmFjaycpLm9uKCdjbGljaycsIChldmVudCkgPT4gX3RoaXMuZ29Ib21lKCkpO1xyXG4gIC8vICAgICAgICQoJy5pZGVudGl0aWVzLXJlc2V0Jykub2ZmKCk7XHJcbiAgLy8gICAgICAgLy8gJCgnLmlkZW50aXRpZXMtcmVzZXQnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IF90aGlzLl9yZXNldElkZW50aXRpZXMoY2FsbGJhY2spKTtcclxuICAvLyAgICAgfSk7XHJcbiAgLy8gICB9KTtcclxuICAvLyB9XHJcblxyXG4gIF9jaGVja1JlY2VpdmVkSW5mbyhyZWNlaXZlZEluZm8pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IGlkZW50aXR5SW5mbztcclxuICAgICAgbGV0IHRvUmVtb3ZlSUQ7XHJcblxyXG4gICAgICBpZiAocmVjZWl2ZWRJbmZvKSB7XHJcbiAgICAgICAgaWRlbnRpdHlJbmZvID0gcmVjZWl2ZWRJbmZvO1xyXG4gICAgICAgIHRvUmVtb3ZlSUQgPSBmYWxzZTtcclxuICAgICAgICByZXNvbHZlKHtpZGVudGl0eUluZm86IGlkZW50aXR5SW5mbywgdG9SZW1vdmVJRDogdG9SZW1vdmVJRH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRvUmVtb3ZlSUQgPSB0cnVlO1xyXG4gICAgICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2dldElkZW50aXRpZXNUb0Nob29zZScsIHt9KS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUoe2lkZW50aXR5SW5mbzogcmVzdWx0LCB0b1JlbW92ZUlEOiB0b1JlbW92ZUlEfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvd0lkcHMoaWRwcykge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5zaG93SWRwc10gOiAnLCBpZHBzKTtcclxuXHJcbiAgICBsZXQgaWRwc0xpc3RFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZHBzLWxpc3QnKTtcclxuXHJcbiAgICBjb25zdCBjbGlja0V2ZW50ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsID0gZXZlbnQuY3VycmVudFRhcmdldDtcclxuICAgICAgY29uc3QgaWRwID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkcCcpO1xyXG5cclxuICAgICAgdGhpcy5sb2dpbldpdGhJRFAoaWRwKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygndmFsdWUgaGVyZTogJywgcmVzdWx0LnZhbHVlKTtcclxuICAgICAgICByZXN1bHQudmFsdWUgPSByZXN1bHQudmFsdWUudXNlclVSTFxyXG5cclxuICAgICAgICBpZiAodGhpcy5jYWxsYmFjaykge1xyXG4gICAgICAgICAgdGhpcy5jYWxsYmFjayhyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZHBzLmZvckVhY2goKGtleSkgPT4ge1xyXG5cclxuICAgICAgbGV0IGxpbmtFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rLScgKyBrZXkuZG9tYWluKTtcclxuXHJcbiAgICAgIGlmICghbGlua0VsKSB7XHJcbiAgICAgICAgbGlua0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgIGxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2xpbmstJyArIGtleS5kb21haW4pO1xyXG4gICAgICAgIGxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWRwJywga2V5LmRvbWFpbik7XHJcbiAgICAgICAgbGlua0VsLmNsYXNzTGlzdCA9ICdtZGMtbGlzdC1pdGVtIGxpbmstJyArIGtleS5kb21haW47XHJcbiAgICAgICAgbGlua0VsLmhyZWYgPSAnIyc7XHJcblxyXG4gICAgICAgIGNvbnN0IGxpbmtFbFRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShrZXkuZG9tYWluKTtcclxuXHJcbiAgICAgICAgbGV0IG5hbWUgPSBrZXkuZG9tYWluO1xyXG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcclxuICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZygwLCBuYW1lLmluZGV4T2YoJy4nKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5hbWUgPSAncXVlc3Rpb24nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaW1nRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICBpbWdFbC5jbGFzc0xpc3QgPSAnbWRjLWxpc3QtaXRlbV9fc3RhcnQtZGV0YWlsJztcclxuICAgICAgICBpbWdFbC5zcmMgPSAnLi9hc3NldHMvJyArIG5hbWUgKyAnLnN2Zyc7XHJcbiAgICAgICAgaW1nRWwud2lkdGggPSAzMDtcclxuICAgICAgICBpbWdFbC5oZWlnaHQgPSAzMDtcclxuXHJcbiAgICAgICAgaW1nRWwub25lcnJvciA9IChlKSA9PiB7IGUuc3JjRWxlbWVudC5zcmMgPSAnLi9hc3NldHMvcXVlc3Rpb24uc3ZnJzsgfTtcclxuXHJcbiAgICAgICAgbGlua0VsLmFwcGVuZENoaWxkKGltZ0VsKTtcclxuICAgICAgICBsaW5rRWwuYXBwZW5kQ2hpbGQobGlua0VsVGV4dCk7XHJcblxyXG4gICAgICAgIGlkcHNMaXN0RWwuYXBwZW5kQ2hpbGQobGlua0VsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsaW5rRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0V2ZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGlua0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xpY2tFdmVudCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgc2hvd0RlZmF1bHRJZGVudGl0eShpZGVudGl0eSkge1xyXG5cclxuICAgIGlmIChpZGVudGl0eSkge1xyXG5cclxuICAgICAgdGhpcy5pc0xvZ2dlZCA9IHRydWU7XHJcblxyXG4gICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWRjLWxpc3QtLWF2YXRhci1saXN0Jyk7XHJcblxyXG4gICAgICBsZXQgaXRlbUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2l0ZW0tJyArIGlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwpO1xyXG5cclxuICAgICAgaWYgKCFpdGVtRWwpIHtcclxuXHJcbiAgICAgICAgaXRlbUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICBpdGVtRWwuaWQgPSAnaXRlbS0nICsgaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTDtcclxuICAgICAgICBpdGVtRWwuY2xhc3NMaXN0ID0gJ21kYy1saXN0LWl0ZW0gaXRlbS0nICsgaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTDtcclxuICAgICAgICBpdGVtRWwuc2V0QXR0cmlidXRlKCdkYXRhLXVzZXJVUkwnLCBpZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvZmlsZUltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgcHJvZmlsZUltYWdlLmNsYXNzTGlzdCA9ICdtZGMtbGlzdC1pdGVtX19zdGFydC1kZXRhaWwnO1xyXG4gICAgICAgIHByb2ZpbGVJbWFnZS53aWR0aCA9IDU2O1xyXG4gICAgICAgIHByb2ZpbGVJbWFnZS5oZWlnaHQgPSA1NjtcclxuICAgICAgICBwcm9maWxlSW1hZ2UuYWx0ID0gaWRlbnRpdHkudXNlclByb2ZpbGUubmFtZTtcclxuICAgICAgICBwcm9maWxlSW1hZ2Uuc3JjID0gaWRlbnRpdHkudXNlclByb2ZpbGUucGljdHVyZTtcclxuICAgICAgICBpdGVtRWwuYXBwZW5kQ2hpbGQocHJvZmlsZUltYWdlKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgdGV4dDEuY2xhc3NMaXN0ID0gJ25hbWUgbWRjLWxpc3QtaXRlbV9fdGV4dCc7XHJcbiAgICAgICAgdGV4dDEudGV4dENvbnRlbnQgPSBpZGVudGl0eS51c2VyUHJvZmlsZS5uYW1lO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICB0ZXh0Mi5jbGFzc0xpc3QgPSAnZW1haWwgbWRjLWxpc3QtaXRlbV9fc2Vjb25kYXJ5LXRleHQnO1xyXG4gICAgICAgIHRleHQyLnRleHRDb250ZW50ID0gaWRlbnRpdHkudXNlclByb2ZpbGUuZW1haWw7XHJcblxyXG4gICAgICAgIHRleHQxLmFwcGVuZENoaWxkKHRleHQyKTtcclxuICAgICAgICBpdGVtRWwuYXBwZW5kQ2hpbGQodGV4dDEpO1xyXG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChpdGVtRWwpO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBzaG93SWRlbnRpdGllcyhpRHMsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5zaG93TXlJZGVudGl0aWVzXSA6ICcsIGlEcy5pZGVudGl0aWVzLCBpRHMuZGVmYXVsdElkZW50aXR5KTtcclxuXHJcbiAgICAgIGNvbnN0IGlkZW50aXRpZXMgPSBpRHMuaWRlbnRpdGllcztcclxuICAgICAgY29uc3QgY3VycmVudCA9IGlEcy5kZWZhdWx0SWRlbnRpdHkgPyBpRHMuZGVmYXVsdElkZW50aXR5LnVzZXJVUkwgOiAnJztcclxuXHJcbiAgICAgIGxldCBhY3RpdmVJZGVudGl0aWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjdGl2ZS1pZGVudGl0aWVzJyk7XHJcblxyXG4gICAgICBPYmplY3Qua2V5cyhpZGVudGl0aWVzKS5mb3JFYWNoKChrZXkpID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgZXhpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluay0nICsga2V5KTtcclxuICAgICAgICBpZiAoZXhpc3QpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxpbmtFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsaW5rRWwuaHJlZiA9ICcjJztcclxuICAgICAgICBsaW5rRWwuaWQgPSAnbGluay0nICsga2V5O1xyXG4gICAgICAgIGxpbmtFbC5jbGFzc0xpc3QgPSAnbWRjLWxpc3QtaXRlbSc7XHJcbiAgICAgICAgbGlua0VsLnNldEF0dHJpYnV0ZSgnZGF0YS11c2VyVVJMJywga2V5KTtcclxuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gY3VycmVudCkge1xyXG4gICAgICAgICAgbGlua0VsLmNsYXNzTGlzdCArPSAnIG1kYy10ZW1wb3JhcnktZHJhd2VyLS1zZWxlY3RlZCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaW5rRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuXHJcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGVsID0gZXZlbnQuY3VycmVudFRhcmdldDtcclxuICAgICAgICAgIGNvbnN0IHVzZXJVUkwgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlclVSTCcpO1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCd1c2VyVVJMOicsIHVzZXJVUkwsIGNhbGxiYWNrLCBlbCk7XHJcblxyXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHVzZXJVUkwpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvZmlsZUltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgcHJvZmlsZUltYWdlLmNsYXNzTGlzdCA9ICdtZGMtbGlzdC1pdGVtX19zdGFydC1kZXRhaWwnO1xyXG4gICAgICAgIHByb2ZpbGVJbWFnZS53aWR0aCA9IDQwO1xyXG4gICAgICAgIHByb2ZpbGVJbWFnZS5oZWlnaHQgPSA0MDtcclxuICAgICAgICBwcm9maWxlSW1hZ2UuYWx0ID0gaWRlbnRpdGllc1trZXldLnVzZXJQcm9maWxlLm5hbWU7XHJcbiAgICAgICAgcHJvZmlsZUltYWdlLnNyYyA9IGlkZW50aXRpZXNba2V5XS51c2VyUHJvZmlsZS5waWN0dXJlO1xyXG4gICAgICAgIHByb2ZpbGVJbWFnZS5vbmVycm9yID0gKGUpID0+IHsgZS5zcmNFbGVtZW50LnNyYyA9ICcuL2Fzc2V0cy9xdWVzdGlvbi5zdmcnOyB9O1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICB0ZXh0MS5jbGFzc0xpc3QgPSAnbmFtZSBtZGMtbGlzdC1pdGVtX190ZXh0JztcclxuICAgICAgICB0ZXh0MS50ZXh0Q29udGVudCA9IGlkZW50aXRpZXNba2V5XS51c2VyUHJvZmlsZS5uYW1lO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICB0ZXh0Mi5jbGFzc0xpc3QgPSAnZW1haWwgbWRjLWxpc3QtaXRlbV9fc2Vjb25kYXJ5LXRleHQnO1xyXG4gICAgICAgIHRleHQyLnRleHRDb250ZW50ID0gaWRlbnRpdGllc1trZXldLnVzZXJQcm9maWxlLmVtYWlsO1xyXG5cclxuICAgICAgICB0ZXh0MS5hcHBlbmRDaGlsZCh0ZXh0Mik7XHJcblxyXG4gICAgICAgIGxpbmtFbC5hcHBlbmRDaGlsZChwcm9maWxlSW1hZ2UpO1xyXG4gICAgICAgIGxpbmtFbC5hcHBlbmRDaGlsZCh0ZXh0MSk7XHJcblxyXG4gICAgICAgIGFjdGl2ZUlkZW50aXRpZXMuYXBwZW5kQ2hpbGQobGlua0VsKTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGlkZW50aXRpZXMubGVuZ3RoID09PSAxKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgY2FsbGJhY2soe3R5cGU6ICdpZGVudGl0eScsIHZhbHVlOiBjdXJyZW50fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzb2x2ZSh7dHlwZTogJ2lkZW50aXR5JywgdmFsdWU6IGN1cnJlbnR9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkZW50aXRpZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHRoaXMuX2RyYXdlci5vcGVuID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gbGV0IGNhbGxiYWNrID0gKGlkZW50aXR5KSA9PiB7XHJcbiAgICAgIC8vICAgcmVzb2x2ZShpZGVudGl0eSk7XHJcbiAgICAgIC8vIH07XHJcblxyXG4gICAgICAvLyBpZiAoIXRvUmVtb3ZlSUQpIHtcclxuICAgICAgLy8gICAkKCcuY2xpY2thYmxlLWNlbGwnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IF90aGlzLmNoYW5nZUlEKGV2ZW50LCBjYWxsYmFjaykpO1xyXG4gICAgICAvLyB9XHJcblxyXG4gICAgICAvLyAkKCcucmVtb3ZlLWlkJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiBfdGhpcy5yZW1vdmVJRChpRHMpKTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUlEKGV2ZW50LCBlbWFpbHMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgcm93ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgIGxldCBpZFRvUmVtb3ZlID0gcm93LmNoaWxkcmVuWzBdLnRleHRDb250ZW50O1xyXG4gICAgbGV0IGRvbWFpbiA9IHJvdy5jaGlsZHJlblsxXS50ZXh0Q29udGVudDtcclxuXHJcbiAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCd1bnJlZ2lzdGVySWRlbnRpdHknLCB7IGVtYWlsOiBpZFRvUmVtb3ZlIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICBsZXQgbnVtRW1haWxzID0gZW1haWxzLmxlbmd0aDtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1FbWFpbHM7IGkrKykge1xyXG4gICAgICAgIGlmIChlbWFpbHNbaV0uZW1haWwgPT09IGlkVG9SZW1vdmUpIHtcclxuICAgICAgICAgIGVtYWlscy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xyXG4gICAgICBfdGhpcy5zaG93SWRlbnRpdGllcyhlbWFpbHMsIHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9fdGhpcy5pZGVudGl0eU1vZHVsZS51bnJlZ2lzdGVySWRlbnRpdHkoaWRUb1JlbW92ZSk7XHJcblxyXG4gIH1cclxuXHJcbiAgbG9naW5XaXRoSURQKGlkcCkge1xyXG5cclxuXHJcbiAgICBsZXQgX3B1YmxpY0tleTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5vcGVuUG9wdXAoKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnZ2V0TXlQdWJsaWNLZXknLCB7fSk7XHJcbiAgICAgIH0pLnRoZW4oKHB1YmxpY0tleSkgPT4ge1xyXG4gICAgICAgIF9wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHsgY29udGVudHM6IHB1YmxpY0tleSwgb3JpZ2luOiAnb3JpZ2luJywgdXNlcm5hbWVIaW50OiB1bmRlZmluZWQsIGlkcERvbWFpbjogaWRwIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnc2VuZEdlbmVyYXRlTWVzc2FnZScsIGRhdGEpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigodmFsdWUpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkub2J0YWluTmV3SWRlbnRpdHldIHJlY2VpdmVkVVJMIGZyb20gaWRwIFByb3h5OiAnICsgdmFsdWUubG9naW5Vcmwuc3Vic3RyaW5nKDAsIDIwKSArICcuLi4nKTtcclxuXHJcbiAgICAgICAgbGV0IHVybCA9IHZhbHVlLmxvZ2luVXJsO1xyXG4gICAgICAgIGxldCBmaW5hbFVSTDtcclxuXHJcbiAgICAgICAgLy9jaGVjayBpZiB0aGUgcmVjZWl2ZWRVUkwgY29udGFpbnMgdGhlIHJlZGlyZWN0IGZpZWxkIGFuZCByZXBsYWNlIGl0XHJcbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSAhPT0gLTEpIHtcclxuICAgICAgICAgIGxldCBmaXJzdFBhcnQgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSk7XHJcbiAgICAgICAgICBsZXQgc2Vjb25kQXV4UGFydCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoJ3JlZGlyZWN0X3VyaScpLCB1cmwubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICBsZXQgc2Vjb25kUGFydCA9IHNlY29uZEF1eFBhcnQuc3Vic3RyaW5nKHNlY29uZEF1eFBhcnQuaW5kZXhPZignJicpLCB1cmwubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAvL2NoZWNrIGlmIHRoZSByZWRkaXJlY3QgZmllbGQgaXMgdGhlIGxhc3QgZmllbGQgb2YgdGhlIFVSTFxyXG4gICAgICAgICAgaWYgKHNlY29uZFBhcnQuaW5kZXhPZignJicpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbiArIHNlY29uZFBhcnQ7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVzdWx0VVJMID0gZmluYWxVUkwgfHwgdXJsO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkub3BlblBvcHVwXScsIHRoaXMucmVzdWx0VVJMKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVuUG9wdXAodGhpcy5yZXN1bHRVUkwpO1xyXG4gICAgICB9KS50aGVuKChpZGVudGl0eSkgPT4ge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkub3BlblBvcHVwLnJlc3VsdF0nLCBpZGVudGl0eSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7IGNvbnRlbnRzOiBfcHVibGljS2V5LCBvcmlnaW46ICdvcmlnaW4nLCB1c2VybmFtZUhpbnQ6IGlkZW50aXR5LCBpZHBEb21haW46IGlkcCB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLCBkYXRhKTtcclxuICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5zZW5kR2VuZXJhdGVNZXNzYWdlLnJlc3VsdF0nLCByZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ2FkZEFzc2VydGlvbicsIHJlc3VsdCk7XHJcbiAgICAgIH0pLnRoZW4oKHZhbHVlKSA9PiB7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYXdlci5vcGVuID0gZmFsc2U7XHJcbiAgICAgICAgLy8gY29uc3QgdXNlclVSTCA9IHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogdmFsdWUudXNlclByb2ZpbGUudXNlclVSTH07XHJcbiAgICAgICAgY29uc3QgdXNlcklkZW50aXR5ID0ge3R5cGU6ICdpZGVudGl0eScsIHZhbHVlOiB2YWx1ZS51c2VyUHJvZmlsZX07XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdGllc0dVSS5sb2dpbldpdGhJRFAgZmluYWxdJywgdmFsdWUpO1xyXG4gICAgICAgIC8vIHJldHVybiB1c2VyVVJMO1xyXG4gICAgICAgIHJldHVybiB1c2VySWRlbnRpdHk7XHJcbiAgICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8vIG9idGFpbk5ld0lkZW50aXR5KGV2ZW50LCBjYWxsYmFjaywgdG9SZW1vdmVJRCkge1xyXG4gIC8vICAgbGV0IF90aGlzID0gdGhpcztcclxuICAvLyAgIGxldCBpZFByb3ZpZGVyID0gZXZlbnQudGFyZ2V0LnRleHRDb250ZW50O1xyXG4gIC8vICAgbGV0IGlkUHJvdmlkZXIyID0gZXZlbnQudGFyZ2V0LnRleHQ7XHJcblxyXG4gIC8vICAgX3RoaXMuY2FsbElkZW50aXR5TW9kdWxlRnVuYygnZ2V0TXlQdWJsaWNLZXknLCB7fSkudGhlbigocHVibGljS2V5KSA9PiB7XHJcbiAgLy8gICAgIC8vIGxldCBwdWJsaWNLZXkgPSBidG9hKGtleVBhaXIucHVibGljKTtcclxuXHJcbiAgLy8gICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLFxyXG4gIC8vICAgICAgIHsgY29udGVudHM6IHB1YmxpY0tleSwgb3JpZ2luOiAnb3JpZ2luJywgdXNlcm5hbWVIaW50OiB1bmRlZmluZWQsIGlkcERvbWFpbjogaWRQcm92aWRlciwgfSkudGhlbigodmFsdWUpID0+IHtcclxuICAvLyAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXRpZXNHVUkub2J0YWluTmV3SWRlbnRpdHldIHJlY2VpdmVkVVJMIGZyb20gaWRwIFByb3h5OiAnICsgdmFsdWUubG9naW5Vcmwuc3Vic3RyaW5nKDAsIDIwKSArICcuLi4nKTtcclxuXHJcbiAgLy8gICAgICAgbGV0IHVybCA9IHZhbHVlLmxvZ2luVXJsO1xyXG4gIC8vICAgICAgIGxldCBmaW5hbFVSTDtcclxuXHJcbiAgLy8gICAgICAgLy9jaGVjayBpZiB0aGUgcmVjZWl2ZWRVUkwgY29udGFpbnMgdGhlIHJlZGlyZWN0IGZpZWxkIGFuZCByZXBsYWNlIGl0XHJcbiAgLy8gICAgICAgaWYgKHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSAhPT0gLTEpIHtcclxuICAvLyAgICAgICAgIGxldCBmaXJzdFBhcnQgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCdyZWRpcmVjdF91cmknKSk7XHJcbiAgLy8gICAgICAgICBsZXQgc2Vjb25kQXV4UGFydCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoJ3JlZGlyZWN0X3VyaScpLCB1cmwubGVuZ3RoKTtcclxuXHJcbiAgLy8gICAgICAgICBsZXQgc2Vjb25kUGFydCA9IHNlY29uZEF1eFBhcnQuc3Vic3RyaW5nKHNlY29uZEF1eFBhcnQuaW5kZXhPZignJicpLCB1cmwubGVuZ3RoKTtcclxuXHJcbiAgLy8gICAgICAgICAvL2NoZWNrIGlmIHRoZSByZWRkaXJlY3QgZmllbGQgaXMgdGhlIGxhc3QgZmllbGQgb2YgdGhlIFVSTFxyXG4gIC8vICAgICAgICAgaWYgKHNlY29uZFBhcnQuaW5kZXhPZignJicpICE9PSAtMSkge1xyXG4gIC8vICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbiArIHNlY29uZFBhcnQ7XHJcbiAgLy8gICAgICAgICB9IGVsc2Uge1xyXG4gIC8vICAgICAgICAgICBmaW5hbFVSTCA9IGZpcnN0UGFydCArICdyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcclxuICAvLyAgICAgICAgIH1cclxuICAvLyAgICAgICB9XHJcblxyXG4gIC8vICAgICAgIF90aGlzLnJlc3VsdFVSTCA9IGZpbmFsVVJMIHx8IHVybDtcclxuXHJcbiAgLy8gICAgICAgJCgnLmxvZ2luLWlkcCcpLmh0bWwoJzxwPkNob3NlbiBJRFA6ICcgKyBpZFByb3ZpZGVyICsgJzwvcD4nKTtcclxuICAvLyAgICAgICAkKCcubG9naW4nKS5yZW1vdmVDbGFzcygnaGlkZScpO1xyXG4gIC8vICAgICAgICQoJy5sb2dpbi1idG4nKS5vZmYoKTtcclxuICAvLyAgICAgICAkKCcubG9naW4tYnRuJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgLy8gICAgICAgICAkKCcubG9naW4nKS5hZGRDbGFzcygnaGlkZScpO1xyXG4gIC8vICAgICAgICAgLy8gX3RoaXMuX2F1dGhlbnRpY2F0ZVVzZXIocHVibGljS2V5LCB2YWx1ZSwgJ29yaWdpbicsIGlkUHJvdmlkZXIpLnRoZW4oKGVtYWlsKSA9PiB7XHJcbiAgLy8gICAgICAgICAvLyAgIGNhbGxiYWNrKGVtYWlsKTtcclxuICAvLyAgICAgICAgIC8vICAgX3RoaXMuc2hvd0lkZW50aXRpZXNHVUkoKTtcclxuICAvLyAgICAgICAgIC8vIH0pO1xyXG4gIC8vICAgICAgIH0pO1xyXG4gIC8vICAgICB9KTtcclxuICAvLyAgIH0pLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygnb2J0YW5pbiBuZXcgaWRlbnRpdHknLCBlcnIpKTtcclxuXHJcbiAgLy8gfVxyXG5cclxuICBfZ2V0TGlzdChpdGVtcykge1xyXG4gICAgbGV0IGxpc3QgPSAnJztcclxuICAgIGxldCBudW1JdGVtcyA9IGl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUl0ZW1zOyBpKyspIHtcclxuICAgICAgbGlzdCArPSAnPGxpIGNsYXNzPVwiZGl2aWRlclwiPjwvbGk+JztcclxuICAgICAgbGlzdCArPSAnPGxpPjxhIGNsYXNzPVwiY2VudGVyLWFsaWduXCI+JyArIGl0ZW1zW2ldICsgJzwvYT48L2xpPic7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxpc3Q7XHJcbiAgfVxyXG5cclxuICBfYXV0aGVudGljYXRlVXNlcihwdWJsaWNLZXksIHZhbHVlLCBvcmlnaW4sIGlkUHJvdmlkZXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgdXJsID0gX3RoaXMucmVzdWx0VVJMO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBfdGhpcy5vcGVuUG9wdXAodXJsKS50aGVuKChpZGVudGl0eSkgPT4ge1xyXG5cclxuICAgICAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdzZW5kR2VuZXJhdGVNZXNzYWdlJyxcclxuICAgICAgICAgIHsgY29udGVudHM6IHB1YmxpY0tleSwgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogaWRlbnRpdHksIGlkcERvbWFpbjogaWRQcm92aWRlciB9KS50aGVuKChyZXN1bHQpID0+IHtcclxuXHJcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAvL190aGlzLmlkZW50aXR5TW9kdWxlLnN0b3JlSWRlbnRpdHkocmVzdWx0LCBrZXlQYWlyKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdhZGRBc3NlcnRpb24nLCByZXN1bHQpLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZS51c2VyUHJvZmlsZS51c2VyVVJMKTtcclxuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIG9idGFpbmluZyBpZGVudGl0eSBpbmZvcm1hdGlvbicpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3Jlc2V0SWRlbnRpdGllcygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdfcmVzZXRJZGVudGl0aWVzJyk7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElkZW50aXRpZXNHVUk7XHJcbiJdfQ=="}