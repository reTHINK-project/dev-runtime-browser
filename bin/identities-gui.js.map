{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/IdentitiesGUI.js"],"names":[],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// jshint browser:true, jquery: true\r\n\r\nclass IdentitiesGUI {\r\n\r\n  constructor(guiURL, idmURL, messageBus) {\r\n    console.log('IdentitiesGUI', this);\r\n    //if (!identityModule) throw Error('Identity Module not set!');\r\n    if (!messageBus) throw Error('Message Bus not set!');\r\n    let _this = this;\r\n    _this._guiURL = guiURL;\r\n    _this._idmURL = idmURL;\r\n    _this._messageBus = messageBus;\r\n    _this._alreadyReLogin = false;\r\n    _this._alreadyLogin = false;\r\n\r\n    this.callIdentityModuleFunc('deployGUI', {}).then((result) => {\r\n      return this._buildDrawer();\r\n    }).then((result) => {\r\n      console.log('READY:', result);\r\n    });\r\n\r\n    this.isLogged = false;\r\n\r\n    const drawerEl = document.querySelector('.mdc-temporary-drawer');\r\n    const MDCTemporaryDrawer = mdc.drawer.MDCTemporaryDrawer;\r\n    const drawer = new MDCTemporaryDrawer(drawerEl);\r\n\r\n    this._drawerEl = drawerEl;\r\n    this._drawer = drawer;\r\n\r\n    document.querySelector('.settings-btn').addEventListener('click', function() {\r\n      drawer.open = true;\r\n    });\r\n\r\n    drawerEl.addEventListener('MDCTemporaryDrawer:open', () => {\r\n      console.log('Received MDCTemporaryDrawer:open');\r\n      this._isDrawerOpen = true;\r\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n    });\r\n\r\n    drawerEl.addEventListener('MDCTemporaryDrawer:close', () => {\r\n      console.log('Received MDCTemporaryDrawer:close');\r\n      this._isDrawerOpen = false;\r\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n    });\r\n\r\n  }\r\n\r\n  logOut() {\r\n    let _this = this;\r\n    console.log('IdentitiesGUI: logging out');\r\n    return new Promise((resolve, reject) => {\r\n\r\n      console.log('Building drawer');\r\n      _this._buildDrawer();\r\n\r\n      resolve('Gui reset');\r\n\r\n\r\n    });\r\n  }\r\n\r\n  _buildDrawer() {\r\n\r\n    const guiURL = this._guiURL;\r\n\r\n    this._messageBus.addListener(guiURL, msg => {\r\n\r\n      const funcName = msg.body.method;\r\n\r\n      if (msg.type !== 'response') {\r\n\r\n\r\n        if (!this.isLogged) {\r\n\r\n          const clickClose = new MouseEvent('click');\r\n          document.querySelector('.settings-btn').dispatchEvent(clickClose);\r\n\r\n        }\r\n\r\n      }\r\n\r\n      if (funcName === 'openPopup') {\r\n\r\n        this.openPopup().then(() => {\r\n\r\n          let urlreceived = msg.body.params.urlreceived;\r\n          this.openPopup(urlreceived).then((returnedValue) => {\r\n            let value = {type: 'execute', value: returnedValue, code: 200};\r\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n            this._messageBus.postMessage(replyMsg);\r\n          });\r\n\r\n        });\r\n\r\n        return;\r\n\r\n      }\r\n\r\n      const callback = (identityInfo) => {\r\n\r\n        this.isLogged = true;\r\n\r\n        this._buildMessage(msg, identityInfo);\r\n\r\n      };\r\n\r\n      this.callback = callback;\r\n\r\n      this._getIdentities(callback, true);\r\n\r\n    });\r\n\r\n    this._getIdentities();\r\n\r\n  }\r\n\r\n  _buildMessage(msg, identityInfo) {\r\n    let replyMsg;\r\n    let value;\r\n\r\n    const from = msg ? msg.from : this._guiURL;\r\n    const to = msg ? msg.to : this._idmURL;\r\n\r\n    console.log('chosen identity: ', identityInfo);\r\n\r\n    switch (identityInfo.type) {\r\n      case 'idp':\r\n        value = { type: 'idp', value: identityInfo.value, code: 200 };\r\n        break;\r\n\r\n      case 'identity':\r\n        value = { type: 'identity', value: identityInfo.value, code: 200 };\r\n        break;\r\n\r\n      default:\r\n        value = { type: 'error', value: 'Error on identity GUI', code: 400 };\r\n    }\r\n\r\n    replyMsg = {id: msg.id, type: 'response', to: from, from: to, body: value };\r\n\r\n    this._messageBus.postMessage(replyMsg);\r\n  }\r\n\r\n  _getIdentities(callback, oPenDrawer) {\r\n\r\n    return this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((resultObject) => {\r\n      if (callback) {\r\n        return Promise.all([this.showIdps(resultObject.idps, callback), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject, callback, oPenDrawer)]);\r\n      } else {\r\n        return Promise.all([this.showIdps(resultObject.idps), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject)]);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  // _openDrawer() {\r\n\r\n  //   let _this = this;\r\n  //   const guiURL = _this._guiURL;\r\n\r\n  //   _this.resultURL  = undefined;\r\n\r\n  //   _this._messageBus.addListener(guiURL, msg => {\r\n  //     let identityInfo = msg.body.value;\r\n  //     let funcName = msg.body.method;\r\n  //     let value;\r\n  //     console.log('[IdentitiesGUI] received msg: ', msg);\r\n\r\n  //     _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\r\n\r\n  //       let replyMsg;\r\n  //       console.log('[IdentitiesGUI] identityInfo from GUI: ', identityInfo);\r\n\r\n  //       //hide config page with the identity GUI\r\n  //       parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n  //       $('.admin-page').addClass('hide');\r\n\r\n  //       // document.getElementsByTagName('body')[0].style = 'background-color:transparent';\r\n  //       $('.identities-section').addClass('hide');\r\n  //       $('.policies-section').addClass('hide');\r\n\r\n  //       switch (identityInfo.type) {\r\n  //         case 'idp':\r\n  //           value = { type: 'idp', value: identityInfo.value, code: 200 };\r\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n  //           _this._messageBus.postMessage(replyMsg);\r\n  //           break;\r\n\r\n  //         case 'identity':\r\n  //           value = { type: 'identity', value: identityInfo.value, code: 200 };\r\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n  //           _this._messageBus.postMessage(replyMsg);\r\n  //           break;\r\n\r\n  //         default:\r\n  //           value = { type: 'error', value: 'Error on identity GUI', code: 400 };\r\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\r\n  //           _this._messageBus.postMessage(replyMsg);\r\n  //       }\r\n  //     });\r\n\r\n  //     if (funcName === 'openPopup') {\r\n  //       let urlreceived = msg.body.params.urlreceived;\r\n  //       _this.openPopup(urlreceived).then((returnedValue) => {\r\n  //         let value = {type: 'execute', value: returnedValue, code: 200};\r\n  //         let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\r\n  //         _this._messageBus.postMessage(replyMsg);\r\n  //       });\r\n  //       return; // this avoids getting stuck in the identities page\r\n  //     }\r\n\r\n  //     // unhide the config page with the identity GUI\r\n  //     // document.getElementsByTagName('body')[0].style = 'background-color:white;';\r\n  //     parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n\r\n  //     const clickOpen = new MouseEvent('click');\r\n  //     document.querySelector('.settings-btn').dispatchEvent(clickOpen);\r\n\r\n  //     $('.admin-page').removeClass('hide');\r\n\r\n  //   });\r\n  // }\r\n\r\n  callIdentityModuleFunc(methodName, parameters) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\r\n        body: { resource: 'identity', method: methodName, params: parameters }};\r\n\r\n      this._messageBus.postMessage(message, (res) => {\r\n        let result = res.body.value;\r\n        resolve(result);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  openPopup(urlreceived) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let win;\r\n      if (!urlreceived) {\r\n        win = window.open('', 'openIDrequest', 'location=1,status=1');\r\n        this.win = win;\r\n        resolve();\r\n      } else {\r\n        win = this.win;\r\n        win.location.href = urlreceived;\r\n      }\r\n\r\n      // let win = window.open(urlreceived, 'openIDrequest', 'location=1,status=1,scrollbars=1');\r\n      if (window.cordova) {\r\n        win.addEventListener('loadstart', function(e) {\r\n          let url = e.url;\r\n          let code = /\\&code=(.+)$/.exec(url);\r\n          let error = /\\&error=(.+)$/.exec(url);\r\n\r\n          if (code || error) {\r\n            win.close();\r\n            return resolve(url);\r\n          } else {\r\n            return reject('openPopup error 1 - should not happen');\r\n          }\r\n        });\r\n      } else {\r\n\r\n        let pollTimer = setInterval(function() {\r\n          try {\r\n            if (win.closed) {\r\n              clearInterval(pollTimer);\r\n\r\n              // return reject('Some error occured when trying to get identity.');\r\n            }\r\n\r\n            if ((win.document.URL.indexOf('access_token') !== -1 || win.document.URL.indexOf('code') !== -1) && win.document.URL.indexOf(location.origin) !== -1) {\r\n              window.clearInterval(pollTimer);\r\n              let url =   win.document.URL;\r\n\r\n              resolve(url);\r\n              return win.close();\r\n            }\r\n          } catch (e) {\r\n            //return reject('openPopup error 2 - should not happen');\r\n            // console.log(e);\r\n          }\r\n\r\n        }, 500);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // showIdentitiesGUI(receivedInfo) {\r\n  //   let _this = this;\r\n\r\n  //   return new Promise((resolve, reject) => {\r\n  //     console.log('[IdentitiesGUI.showIdentitiesGUI] receivedInfo: ', receivedInfo);\r\n\r\n  //     let identityInfo;\r\n  //     let toRemoveID;\r\n\r\n  //     let callback = (value) => {\r\n  //       console.log('chosen identity: ', value);\r\n\r\n  //       const clickClose = new MouseEvent('click');\r\n  //       document.querySelector('.settings-btn').dispatchEvent(clickClose);\r\n\r\n  //       resolve({type: 'identity', value: value});\r\n  //     };\r\n\r\n  //     _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\r\n  //       identityInfo = resultObject.identityInfo;\r\n  //       toRemoveID = resultObject.toRemoveID;\r\n\r\n  //       $('.policies-section').addClass('hide');\r\n  //       $('.identities-section').removeClass('hide');\r\n\r\n  //       _this.showIdps(receivedInfo.idps, callback);\r\n\r\n  //       _this.showIdentities(identityInfo.identities, toRemoveID).then((identity) => {\r\n  //         console.log('chosen identity: ', identity);\r\n  //         resolve({type: 'identity', value: identity});\r\n  //       });\r\n\r\n  //       let idps = [];\r\n  //       let idpsObjects = identityInfo.idps;\r\n\r\n  //       idpsObjects.forEach(function(entry) {\r\n  //         if(entry.type && entry.type == 'idToken') {\r\n  //           idps.push(entry.domain);\r\n  //         }\r\n  //       });\r\n\r\n  //       $('#idproviders').html(_this._getList(idps));\r\n  //       $('#idproviders').off();\r\n  //       // $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\r\n  //       //$('.back').on('click', (event) => _this.goHome());\r\n  //       $('.identities-reset').off();\r\n  //       // $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  _checkReceivedInfo(receivedInfo) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let identityInfo;\r\n      let toRemoveID;\r\n\r\n      if (receivedInfo) {\r\n        identityInfo = receivedInfo;\r\n        toRemoveID = false;\r\n        resolve({identityInfo: identityInfo, toRemoveID: toRemoveID});\r\n      } else {\r\n        toRemoveID = true;\r\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\r\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  showIdps(idps) {\r\n\r\n    console.log('[IdentitiesGUI.showIdps] : ', idps);\r\n\r\n    let idpsListEl = document.getElementById('idps-list');\r\n\r\n    const clickEvent = (event) => {\r\n      const el = event.currentTarget;\r\n      const idp = el.getAttribute('data-idp');\r\n\r\n      this.loginWithIDP(idp).then((result) => {\r\n        // console.log('value here: ', result.value);\r\n        // result.value = result.value.userURL\r\n\r\n        if (this.callback) {\r\n          this.callback(result);\r\n        }\r\n\r\n      });\r\n    };\r\n\r\n    idps.forEach((key) => {\r\n\r\n      let linkEl = document.getElementById('link-' + key.domain);\r\n\r\n      if (!linkEl) {\r\n        linkEl = document.createElement('a');\r\n        linkEl.setAttribute('id', 'link-' + key.domain);\r\n        linkEl.setAttribute('data-idp', key.domain);\r\n        linkEl.classList = 'mdc-list-item link-' + key.domain;\r\n        linkEl.href = '#';\r\n\r\n        const linkElText = document.createTextNode(key.domain);\r\n\r\n        let name = key.domain;\r\n        if (name.indexOf('.') !== -1) {\r\n          name = name.substring(0, name.indexOf('.'));\r\n        } else {\r\n          name = 'question';\r\n        }\r\n\r\n        const imgEl = document.createElement('img');\r\n        imgEl.classList = 'mdc-list-item__start-detail';\r\n        imgEl.src = './assets/' + name + '.svg';\r\n        imgEl.width = 30;\r\n        imgEl.height = 30;\r\n\r\n        imgEl.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\r\n\r\n        linkEl.appendChild(imgEl);\r\n        linkEl.appendChild(linkElText);\r\n\r\n        idpsListEl.appendChild(linkEl);\r\n      } else {\r\n        linkEl.removeEventListener('click', clickEvent);\r\n      }\r\n\r\n      linkEl.addEventListener('click', clickEvent);\r\n\r\n    });\r\n\r\n  }\r\n\r\n  showDefaultIdentity(identity) {\r\n\r\n    if (identity) {\r\n\r\n      this.isLogged = true;\r\n\r\n      const header = document.querySelector('.mdc-list--avatar-list');\r\n\r\n      let itemEl = document.getElementById('item-' + identity.userProfile.userURL);\r\n\r\n      if (!itemEl) {\r\n\r\n        itemEl = document.createElement('li');\r\n        itemEl.id = 'item-' + identity.userProfile.userURL;\r\n        itemEl.classList = 'mdc-list-item item-' + identity.userProfile.userURL;\r\n        itemEl.setAttribute('data-userURL', identity.userProfile.userURL);\r\n\r\n        const profileImage = document.createElement('img');\r\n        profileImage.classList = 'mdc-list-item__start-detail';\r\n        profileImage.width = 56;\r\n        profileImage.height = 56;\r\n        profileImage.alt = identity.userProfile.name;\r\n        profileImage.src = identity.userProfile.picture;\r\n        itemEl.appendChild(profileImage);\r\n\r\n        const text1 = document.createElement('span');\r\n        text1.classList = 'name mdc-list-item__text';\r\n        text1.textContent = identity.userProfile.name;\r\n\r\n        const text2 = document.createElement('span');\r\n        text2.classList = 'email mdc-list-item__secondary-text';\r\n        text2.textContent = identity.userProfile.email;\r\n\r\n        text1.appendChild(text2);\r\n        itemEl.appendChild(text1);\r\n        header.appendChild(itemEl);\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  showIdentities(iDs, callback, oPenDrawer = false) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      console.log('[IdentitiesGUI.showMyIdentities] : ', iDs.identities, iDs.defaultIdentity);\r\n\r\n      const identities = iDs.identities;\r\n      const current = iDs.defaultIdentity ? iDs.defaultIdentity.userURL : '';\r\n\r\n      let activeIdentities = document.getElementById('active-identities');\r\n\r\n      Object.keys(identities).forEach((key) => {\r\n\r\n        const exist = document.getElementById('link-' + key);\r\n        if (exist) { return; }\r\n\r\n        const linkEl = document.createElement('a');\r\n        linkEl.href = '#';\r\n        linkEl.id = 'link-' + key;\r\n        linkEl.classList = 'mdc-list-item';\r\n        linkEl.setAttribute('data-userURL', key);\r\n\r\n        if (key === current) {\r\n          linkEl.classList += ' mdc-temporary-drawer--selected';\r\n        }\r\n\r\n        linkEl.addEventListener('click', (event) => {\r\n\r\n          event.preventDefault();\r\n\r\n          const el = event.currentTarget;\r\n          const userURL = el.getAttribute('data-userURL');\r\n\r\n          console.log('userURL:', userURL, callback, el);\r\n\r\n          if (callback) {\r\n            callback(userURL);\r\n          }\r\n\r\n        });\r\n\r\n        const profileImage = document.createElement('img');\r\n        profileImage.classList = 'mdc-list-item__start-detail';\r\n        profileImage.width = 40;\r\n        profileImage.height = 40;\r\n        profileImage.alt = identities[key].userProfile.name;\r\n        profileImage.src = identities[key].userProfile.picture;\r\n        profileImage.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\r\n\r\n        const text1 = document.createElement('span');\r\n        text1.classList = 'name mdc-list-item__text';\r\n        text1.textContent = identities[key].userProfile.name;\r\n\r\n        const text2 = document.createElement('span');\r\n        text2.classList = 'email mdc-list-item__secondary-text';\r\n        text2.textContent = identities[key].userProfile.email;\r\n\r\n        text1.appendChild(text2);\r\n\r\n        linkEl.appendChild(profileImage);\r\n        linkEl.appendChild(text1);\r\n\r\n        activeIdentities.appendChild(linkEl);\r\n\r\n      });\r\n\r\n      if (oPenDrawer && (!this._alreadyReLogin)) {\r\n        this._drawer.open = true\r\n      }\r\n\r\n      if (oPenDrawer && (!this._alreadyReLogin) && (!this._alreadyLogin)) {\r\n        this._alreadyReLogin = true;\r\n        parent.postMessage({ body: { method: 'tokenExpired' }, to: 'runtime:gui-manager' }, '*');\r\n      }\r\n\r\n\r\n\r\n\r\n/*\r\n      if (Object.keys(identities).length === 1) {\r\n\r\n        if (callback) {\r\n          callback({type: 'identity', value: current});\r\n        }\r\n\r\n        return resolve({type: 'identity', value: current});\r\n      }*/\r\n\r\n\r\n      // let callback = (identity) => {\r\n      //   resolve(identity);\r\n      // };\r\n\r\n      // if (!toRemoveID) {\r\n      //   $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\r\n      // }\r\n\r\n      // $('.remove-id').on('click', (event) => _this.removeID(iDs));\r\n\r\n    });\r\n  }\r\n\r\n  removeID(event, emails) {\r\n    let _this = this;\r\n    let row = event.target.parentNode.parentNode;\r\n    let idToRemove = row.children[0].textContent;\r\n    let domain = row.children[1].textContent;\r\n\r\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\r\n      let numEmails = emails.length;\r\n      for (let i = 0; i < numEmails; i++) {\r\n        if (emails[i].email === idToRemove) {\r\n          emails.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // -------------------------------------------------------------------------//\r\n      _this.showIdentities(emails, true);\r\n    });\r\n\r\n    //_this.identityModule.unregisterIdentity(idToRemove);\r\n\r\n  }\r\n\r\n  authorise(idp, resource) {\r\n\r\n\r\n    return this.openPopup()\r\n      .then((res) => {\r\n        const data = { scope: resource, idpDomain: idp };\r\n        return this.callIdentityModuleFunc('getAccessTokenAuthorisationEndpoint', data);\r\n      })\r\n      .then((value) => {\r\n        console.log('[IdentitiesGUI.authorise] receivedURL from idp Proxy: ' + value);\r\n\r\n        return this.openPopup(value);\r\n      }).then((result) => {\r\n\r\n        console.log('[IdentitiesGUI.authorise.openPopup.result]', result);\r\n\r\n        // resource as array\r\n\r\n\r\n        const data = { resources: [resource], idpDomain: idp, login: result };\r\n        return this.callIdentityModuleFunc('getAccessToken', data);\r\n      }).then((result) => {\r\n\r\n        console.log('[IdentitiesGUI.authorise.getAccessToken.result]', result);\r\n        return this.callIdentityModuleFunc('addAccessToken', result);\r\n      }).then((value) => {\r\n        this._drawer.open = false;\r\n        return value;\r\n      });\r\n\r\n  }\r\n\r\n  loginWithIDP(idp) {\r\n\r\n\r\n    let _publicKey;\r\n\r\n    return this.openPopup()\r\n      .then((result) => {\r\n        return this.callIdentityModuleFunc('getMyPublicKey', {});\r\n      }).then((publicKey) => {\r\n        _publicKey = publicKey;\r\n        const data = { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idp };\r\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\r\n      })\r\n      .then((value) => {\r\n        console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\r\n\r\n        let url = value.loginUrl;\r\n        let finalURL;\r\n\r\n        //check if the receivedURL contains the redirect field and replace it\r\n        if (url.indexOf('redirect_uri') !== -1) {\r\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\r\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\r\n\r\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\r\n\r\n          //check if the reddirect field is the last field of the URL\r\n          if (secondPart.indexOf('&') !== -1) {\r\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\r\n          } else {\r\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\r\n          }\r\n        }\r\n\r\n        this.resultURL = finalURL || url;\r\n\r\n        console.log('[IdentitiesGUI.openPopup]', this.resultURL);\r\n        return this.openPopup(this.resultURL);\r\n      }).then((identity) => {\r\n\r\n        console.log('[IdentitiesGUI.openPopup.result]', identity);\r\n\r\n        const data = { contents: _publicKey, origin: 'origin', usernameHint: identity, idpDomain: idp };\r\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\r\n      }).then((result) => {\r\n\r\n        console.log('[IdentitiesGUI.sendGenerateMessage.result]', result);\r\n        return this.callIdentityModuleFunc('addAssertion', result);\r\n      }).then((value) => {\r\n\r\n        this._drawer.open = false;\r\n        const userURL = {type: 'identity', value: value.userProfile.userURL};\r\n        // const userIdentity = {type: 'identity', value: value.userProfile};\r\n\r\n        console.log('[IdentitiesGUI.loginWithIDP final]', value);\r\n        this._alreadyLogin = true;\r\n        return userURL;\r\n        // return userIdentity;\r\n      });\r\n\r\n  }\r\n\r\n  // obtainNewIdentity(event, callback, toRemoveID) {\r\n  //   let _this = this;\r\n  //   let idProvider = event.target.textContent;\r\n  //   let idProvider2 = event.target.text;\r\n\r\n  //   _this.callIdentityModuleFunc('getMyPublicKey', {}).then((publicKey) => {\r\n  //     // let publicKey = btoa(keyPair.public);\r\n\r\n  //     _this.callIdentityModuleFunc('sendGenerateMessage',\r\n  //       { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idProvider, }).then((value) => {\r\n  //       console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\r\n\r\n  //       let url = value.loginUrl;\r\n  //       let finalURL;\r\n\r\n  //       //check if the receivedURL contains the redirect field and replace it\r\n  //       if (url.indexOf('redirect_uri') !== -1) {\r\n  //         let firstPart = url.substring(0, url.indexOf('redirect_uri'));\r\n  //         let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\r\n\r\n  //         let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\r\n\r\n  //         //check if the reddirect field is the last field of the URL\r\n  //         if (secondPart.indexOf('&') !== -1) {\r\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\r\n  //         } else {\r\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin;\r\n  //         }\r\n  //       }\r\n\r\n  //       _this.resultURL = finalURL || url;\r\n\r\n  //       $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\r\n  //       $('.login').removeClass('hide');\r\n  //       $('.login-btn').off();\r\n  //       $('.login-btn').on('click', (event) => {\r\n  //         $('.login').addClass('hide');\r\n  //         // _this._authenticateUser(publicKey, value, 'origin', idProvider).then((email) => {\r\n  //         //   callback(email);\r\n  //         //   _this.showIdentitiesGUI();\r\n  //         // });\r\n  //       });\r\n  //     });\r\n  //   }).catch(err => console.log('obtanin new identity', err));\r\n\r\n  // }\r\n\r\n  _getList(items) {\r\n    let list = '';\r\n    let numItems = items.length;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n      list += '<li class=\"divider\"></li>';\r\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  _authenticateUser(publicKey, value, origin, idProvider) {\r\n    let _this = this;\r\n    let url = _this.resultURL;\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      _this.openPopup(url).then((identity) => {\r\n\r\n        _this.callIdentityModuleFunc('sendGenerateMessage',\r\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\r\n\r\n          if (result) {\r\n\r\n            //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\r\n            _this.callIdentityModuleFunc('addAssertion', result).then((value) => {\r\n              resolve(value.userProfile.userURL);\r\n            }, (err) => {\r\n              reject(err);\r\n            });\r\n\r\n          } else {\r\n            reject('error on obtaining identity information');\r\n          }\r\n\r\n        });\r\n      }, (err) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  _resetIdentities() {\r\n    console.log('_resetIdentities');\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default IdentitiesGUI;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}