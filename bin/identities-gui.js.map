{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/IdentitiesGUI.js"],"names":[],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(guiURL, idmURL, messageBus) {\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    let _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n\n    _this.callIdentityModuleFunc('deployGUI', {}).then(() => {\n      _this.resultURL  = undefined;\n\n      _this._messageBus.addListener(guiURL, msg => {\n        let identityInfo = msg.body.value;\n        let funcName = msg.body.method;\n        let value;\n\n        if (funcName === 'openPopup') {\n          let urlreceived = msg.body.params.urlreceived;\n          _this.openPopup(urlreceived).then((returnedValue) => {\n            let value = {type: 'execute', value: returnedValue, code: 200};\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n          });\n          return; // this avoids getting stuck in the identities page\n        }\n\n        // unhide the config page with the identity GUI\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n          let replyMsg;\n\n          //hide config page with the identity GUI\n          parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n          $('.admin-page').addClass('hide');\n          document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n          $('.identities-section').addClass('hide');\n          $('.policies-section').addClass('hide');\n\n          switch (identityInfo.type) {\n            case 'idp':\n              value = { type: 'idp', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            case 'identity':\n              value = { type: 'identity', value: identityInfo.value, code: 200 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n              break;\n\n            default:\n              value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n              replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n              _this._messageBus.postMessage(replyMsg);\n          }\n        });\n      });\n\n      $('.identities-page-show').on('click', function () {\n        //TODO call a IdM method that requests the identities\n        _this.showIdentitiesGUI();\n      });\n    });\n  }\n\n  callIdentityModuleFunc(methodName, parameters) {\n    let _this = this;\n    let message;\n\n    return new Promise((resolve, reject) => {\n      message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n        body: { resource: 'identity', method: methodName, params: parameters }, };\n      _this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n    });\n  }\n\n  openPopup(urlreceived) {\n\n    return new Promise((resolve, reject) => {\n\n      let win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');\n      if (window.cordova) {\n        win.addEventListener('loadstart', function(e) {\n          let url = e.url;\n          let code = /\\&code=(.+)$/.exec(url);\n          let error = /\\&error=(.+)$/.exec(url);\n\n          if (code || error) {\n            win.close();\n            resolve(url);\n          }\n        });\n      } else {\n        let pollTimer = setInterval(function() {\n          try {\n            if (win.closed) {\n              reject('Some error occured when trying to get identity.');\n              clearInterval(pollTimer);\n            }\n\n            if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {\n              window.clearInterval(pollTimer);\n              let url =   win.document.URL;\n\n              win.close();\n              resolve(url);\n            }\n          } catch (e) {\n            //console.log(e);\n          }\n        }, 500);\n      }\n    });\n  }\n\n  showIdentitiesGUI(receivedInfo) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\n        identityInfo = resultObject.identityInfo;\n        toRemoveID = resultObject.toRemoveID;\n\n        $('.policies-section').addClass('hide');\n        $('.identities-section').removeClass('hide');\n\n        _this.showMyIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n          console.log('chosen identity: ', identity);\n          resolve({type: 'identity', value: identity});\n        });\n\n        let callback = (value) => {\n          console.log('chosen identity: ', value);\n          resolve({type: 'identity', value: value});\n        };\n\n        let idps = [];\n        let idpsObjects = identityInfo.idps;\n\n        idpsObjects.forEach(function(entry) {\n          if(entry.type && entry.type == 'idToken') {\n            idps.push(entry.domain);\n          }\n        });\n\n        $('#idproviders').html(_this._getList(idps));\n        $('#idproviders').off();\n        $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\n        //$('.back').on('click', (event) => _this.goHome());\n        $('.identities-reset').off();\n        $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n      });\n    });\n  }\n\n  _checkReceivedInfo(receivedInfo) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      let identityInfo, toRemoveID;\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n        resolve({identityInfo: identityInfo, toRemoveID:toRemoveID});\n      } else {\n        toRemoveID = true;\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\n        });\n      }\n    });\n  }\n\n  showMyIdentities(emails, toRemoveID) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      // let identities = _this.identityModule.getIdentities();\n      let identities = [];\n\n      for (let i in emails) {\n        let domain = emails[i].split('@');\n        identities.push({ email: emails[i], domain: domain[1] });\n      }\n\n      let myIdentities = document.getElementById('my-ids');\n      myIdentities.innerHTML = '';\n\n      let table = _this.createTable();\n\n      let tbody = document.createElement('tbody');\n      let numIdentities = identities.length;\n      for (let i = 0; i < numIdentities; i++) {\n        let tr = _this.createTableRow(identities[i], toRemoveID);\n        tbody.appendChild(tr);\n      }\n\n      table.appendChild(tbody);\n      myIdentities.appendChild(table);\n\n      let callback = (identity) => {\n        resolve(identity);\n      };\n\n      if (!toRemoveID) {\n        $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\n      }\n\n      $('.remove-id').on('click', (event) => _this.removeID(emails));\n\n    });\n  }\n\n  createTable() {\n    let table = document.createElement('table');\n    table.className = 'centered';\n    let thead = document.createElement('thead');\n    let tr = document.createElement('tr');\n    let thEmail = document.createElement('th');\n    thEmail.textContent = 'Email';\n    tr.appendChild(thEmail);\n    thead.appendChild(tr);\n    table.appendChild(thead);\n    return table;\n  }\n\n  createTableRow(identity, toRemoveID) {\n    let tr = document.createElement('tr');\n\n    let td = document.createElement('td');\n    td.textContent = identity.email;\n    td.className = 'clickable-cell';\n    td.style = 'cursor: pointer';\n    tr.appendChild(td);\n\n    td = document.createElement('td');\n\n    if (toRemoveID) {\n      let btn = document.createElement('button');\n      btn.textContent = 'Remove';\n      btn.className = 'remove-id waves-effect waves-light btn';\n      td.appendChild(btn);\n    }\n\n    tr.appendChild(td);\n\n    return tr;\n  }\n\n  changeID(event, callback) {\n    let _this = this;\n\n    let idToUse = event.target.innerText;\n\n    //TODO improve later.\n    //prevents when the users selects an hyperty, exit the identity page and\n    //goes again to the identity page, from selecting \"settings\" button as identity.\n    if (idToUse !== 'settings') {\n\n      callback(idToUse);\n      return idToUse;\n    }\n  }\n\n  removeID(event, emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\n      let numEmails = emails.length;\n      for (let i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n\n      // -------------------------------------------------------------------------//\n      _this.showMyIdentities(emails, true);\n    });\n\n    //_this.identityModule.unregisterIdentity(idToRemove);\n\n  }\n\n  obtainNewIdentity(event, callback, toRemoveID) {\n    let _this = this;\n    let idProvider = event.target.textContent;\n    let idProvider2 = event.target.text;\n\n    _this.callIdentityModuleFunc('generateRSAKeyPair', {}).then((keyPair) => {\n      let publicKey = btoa(keyPair.public);\n\n      _this.callIdentityModuleFunc('sendGenerateMessage',\n        { contents: publicKey, origin: 'origin', usernameHint: undefined,\n        idpDomain: idProvider, }).then((value) => {\n        console.log('receivedURL: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if (url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if (secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n\n        _this.resultURL = finalURL || url;\n\n        $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n        $('.login').removeClass('hide');\n        $('.login-btn').off();\n        $('.login-btn').on('click', (event) => {\n          $('.login').addClass('hide');\n          _this._authenticateUser(keyPair, publicKey, value, 'origin', idProvider).then((email) => {\n            callback(email);\n            _this.showIdentitiesGUI();\n          });\n        });\n      });\n    }).catch(err => console.log('obtanin new identity', err));\n\n  }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(keyPair, publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.openPopup(url).then((identity) => {\n\n        _this.callIdentityModuleFunc('sendGenerateMessage',\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\n\n          if (result) {\n\n           //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n           _this.callIdentityModuleFunc('storeIdentity', {result: result, keyPair: keyPair}).then((value) => {\n             resolve(value.userProfile.username);\n           }, (err) => {\n             reject(err);\n           });\n\n          } else {\n           reject('error on obtaining identity information');\n          }\n\n          });\n         }, (err) => {\n           reject(err);\n      });\n    });\n  }\n\n_resetIdentities() {\n  console.log('_resetIdentities');\n}\n\n\n}\n\nexport default IdentitiesGUI;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}