{"version":3,"sources":["node_modules/browser-pack/_prelude.js","identities-gui.js","src/admin/IdentitiesGUI.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","identitiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","IdentitiesGUI","identityModule","_this","guiURL","_runtimeURL","_guiURL","_messageBus","messageBus","deployGUI","addListener","msg","body","document","getElementsByTagName","style","parent","postMessage","method","to","$","removeClass","showIdentitiesGUI","then","identityInfo","replyMsg","addClass","type","id","from","on","receivedInfo","Promise","resolve","reject","toRemoveID","getIdentitiesToChoose","showMyIdentities","identities","identity","console","log","callback","idps","html","_getList","off","event","obtainNewIdentity","_resetIdentities","emails","domain","split","push","email","myIdentities","getElementById","innerHTML","table","createTable","tbody","createElement","numIdentities","_i","tr","createTableRow","appendChild","changeID","removeID","className","thead","thEmail","textContent","td","btn","idToUse","innerText","row","parentNode","idToRemove","children","unregisterIdentity","numEmails","splice","idProvider","text","callGenerateMethods","items","list","numItems"],"mappings":"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","file":"identities-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.identitiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// jshint browser:true, jquery: true\n\nvar IdentitiesGUI = function () {\n  function IdentitiesGUI(identityModule) {\n    _classCallCheck(this, IdentitiesGUI);\n\n    if (!identityModule) throw Error('Identity Module not set!');\n    var _this = this;\n    var guiURL = identityModule._runtimeURL + '/identity-gui';\n    _this._guiURL = guiURL;\n    _this.identityModule = identityModule;\n    _this._messageBus = identityModule.messageBus;\n    _this.identityModule.deployGUI();\n\n    _this._messageBus.addListener(guiURL, function (msg) {\n      var identityInfo = msg.body.value;\n      var value = void 0;\n\n      // unhide the config page with the identity GUI\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      _this.showIdentitiesGUI(msg.body.value).then(function (identityInfo) {\n        var replyMsg = void 0;\n\n        //hide config page with the identity GUI\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n        $('.identities-section').addClass('hide');\n        $('.policies-section').addClass('hide');\n\n        switch (identityInfo.type) {\n          case 'idp':\n            value = { type: 'idp', value: identityInfo.value, code: 200 };\n            replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          case 'identity':\n            value = { type: 'identity', value: identityInfo.value, code: 200 };\n            replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          default:\n            value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n            replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            _this._messageBus.postMessage(replyMsg);\n        }\n      });\n    });\n\n    $('.identities-page-show').on('click', function () {\n      //TODO call a IdM method that requests the identities\n      _this.showIdentitiesGUI();\n    });\n  }\n\n  _createClass(IdentitiesGUI, [{\n    key: 'showIdentitiesGUI',\n    value: function showIdentitiesGUI(receivedInfo) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        var identityInfo = void 0;\n        var toRemoveID = void 0;\n\n        if (receivedInfo) {\n          identityInfo = receivedInfo;\n          toRemoveID = false;\n        } else {\n          toRemoveID = true;\n          identityInfo = _this.identityModule.getIdentitiesToChoose();\n        }\n\n        $('.policies-section').addClass('hide');\n        $('.identities-section').removeClass('hide');\n\n        _this.showMyIdentities(identityInfo.identities, toRemoveID).then(function (identity) {\n          console.log('chosen identity: ', identity);\n          resolve({ type: 'identity', value: identity });\n        });\n\n        var callback = function callback(value) {\n          console.log('chosen idp: ', value);\n          resolve({ type: 'idp', value: value });\n        };\n\n        var idps = identityInfo.idps;\n        $('#idproviders').html(_this._getList(idps));\n        $('#idproviders').off();\n        $('#idproviders').on('click', function (event) {\n          return _this.obtainNewIdentity(callback, toRemoveID);\n        });\n        //$('.back').on('click', (event) => _this.goHome());\n        $('.identities-reset').off();\n        $('.identities-reset').on('click', function (event) {\n          return _this._resetIdentities();\n        });\n      });\n    }\n  }, {\n    key: 'showMyIdentities',\n    value: function showMyIdentities(emails, toRemoveID) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        // let identities = _this.identityModule.getIdentities();\n        var identities = [];\n\n        for (var i in emails) {\n          var domain = emails[i].split('@');\n          identities.push({ email: emails[i], domain: domain[1] });\n        }\n\n        var myIdentities = document.getElementById('my-ids');\n        myIdentities.innerHTML = '';\n\n        var table = _this.createTable();\n\n        var tbody = document.createElement('tbody');\n        var numIdentities = identities.length;\n        for (var _i = 0; _i < numIdentities; _i++) {\n          var tr = _this.createTableRow(identities[_i], toRemoveID);\n          tbody.appendChild(tr);\n        }\n\n        table.appendChild(tbody);\n        myIdentities.appendChild(table);\n\n        var callback = function callback(identity) {\n          resolve(identity);\n        };\n        if (!toRemoveID) {\n          $('.clickable-cell').on('click', function (event) {\n            return _this.changeID(callback);\n          });\n        }\n        $('.remove-id').on('click', function (event) {\n          return _this.removeID(emails);\n        });\n      });\n    }\n  }, {\n    key: 'createTable',\n    value: function createTable() {\n      var table = document.createElement('table');\n      table.className = 'centered';\n      var thead = document.createElement('thead');\n      var tr = document.createElement('tr');\n      var thEmail = document.createElement('th');\n      thEmail.textContent = 'Email';\n      tr.appendChild(thEmail);\n      thead.appendChild(tr);\n      table.appendChild(thead);\n      return table;\n    }\n  }, {\n    key: 'createTableRow',\n    value: function createTableRow(identity, toRemoveID) {\n      var tr = document.createElement('tr');\n\n      var td = document.createElement('td');\n      td.textContent = identity.email;\n      td.className = 'clickable-cell';\n      td.style = 'cursor: pointer';\n      tr.appendChild(td);\n\n      td = document.createElement('td');\n\n      if (toRemoveID) {\n        var btn = document.createElement('button');\n        btn.textContent = 'Remove';\n        btn.className = 'remove-id waves-effect waves-light btn';\n        td.appendChild(btn);\n      }\n      tr.appendChild(td);\n\n      return tr;\n    }\n  }, {\n    key: 'changeID',\n    value: function changeID(callback) {\n      var _this = this;\n\n      var idToUse = event.target.innerText;\n      callback(idToUse);\n      return idToUse;\n    }\n  }, {\n    key: 'removeID',\n    value: function removeID(emails) {\n      var _this = this;\n      var row = event.target.parentNode.parentNode;\n      var idToRemove = row.children[0].textContent;\n      var domain = row.children[1].textContent;\n      _this.identityModule.unregisterIdentity(idToRemove);\n\n      var numEmails = emails.length;\n      for (var i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n      // -------------------------------------------------------------------------//\n      _this.showMyIdentities(emails, true);\n    }\n  }, {\n    key: 'obtainNewIdentity',\n    value: function obtainNewIdentity(callback, toRemoveID) {\n      var _this = this;\n      var idProvider = event.target.textContent;\n      var idProvider2 = event.target.text;\n\n      //if the request came from the identity administration GUI then call the method to obtain an identity\n      if (toRemoveID) {\n        _this.identityModule.callGenerateMethods(idProvider).then(function () {\n          _this.showIdentitiesGUI();\n        });\n      } else {\n        callback(idProvider);\n      }\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_resetIdentities',\n    value: function _resetIdentities() {\n      console.log('clicked resetIdentities');\n    }\n  }]);\n\n  return IdentitiesGUI;\n}();\n\nexports.default = IdentitiesGUI;\n\n},{}]},{},[1])(1)\n});\n\n","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(identityModule) {\n    if (!identityModule) throw Error('Identity Module not set!');\n    let _this = this;\n    let guiURL = identityModule._runtimeURL + '/identity-gui';\n    _this._guiURL = guiURL;\n    _this.identityModule = identityModule;\n    _this._messageBus = identityModule.messageBus;\n    _this.identityModule.deployGUI();\n\n    _this._messageBus.addListener(guiURL, msg => {\n      let identityInfo = msg.body.value;\n      let value;\n\n      // unhide the config page with the identity GUI\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n        let replyMsg;\n\n        //hide config page with the identity GUI\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n        $('.identities-section').addClass('hide');\n        $('.policies-section').addClass('hide');\n\n        switch (identityInfo.type) {\n          case 'idp':\n            value = {type: 'idp', value: identityInfo.value, code: 200};\n            replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          case 'identity':\n            value = {type: 'identity', value: identityInfo.value, code: 200};\n            replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n            break;\n\n          default:\n            value = {type: 'error', value: 'Error on identity GUI', code: 400};\n            replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            _this._messageBus.postMessage(replyMsg);\n        }\n      });\n    });\n\n\n\n    $('.identities-page-show').on('click', function () {\n      //TODO call a IdM method that requests the identities\n      _this.showIdentitiesGUI();\n    });\n  }\n\n  showIdentitiesGUI(receivedInfo) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n      } else {\n        toRemoveID = true;\n        identityInfo = _this.identityModule.getIdentitiesToChoose();\n      }\n\n      $('.policies-section').addClass('hide');\n      $('.identities-section').removeClass('hide');\n\n      _this.showMyIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n        console.log('chosen identity: ', identity);\n        resolve({type: 'identity', value: identity});\n      });\n\n      let callback = (value) => {\n        console.log('chosen idp: ', value);\n        resolve({type: 'idp', value: value});\n      };\n\n      let idps = identityInfo.idps;\n      $('#idproviders').html(_this._getList(idps));\n      $('#idproviders').off();\n      $('#idproviders').on('click', (event) => _this.obtainNewIdentity(callback, toRemoveID));\n      //$('.back').on('click', (event) => _this.goHome());\n      $('.identities-reset').off();\n      $('.identities-reset').on('click', (event) => _this._resetIdentities());\n    });\n\n  }\n\n  showMyIdentities(emails, toRemoveID) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n\n      // let identities = _this.identityModule.getIdentities();\n      let identities = [];\n\n      for(let i in emails) {\n        let domain = emails[i].split('@');\n        identities.push({email: emails[i], domain: domain[1]});\n      }\n\n      let myIdentities = document.getElementById('my-ids');\n      myIdentities.innerHTML = '';\n\n      let table = _this.createTable();\n\n      let tbody = document.createElement('tbody');\n      let numIdentities = identities.length;\n      for (let i = 0; i < numIdentities; i++) {\n        let tr = _this.createTableRow(identities[i], toRemoveID);\n        tbody.appendChild(tr);\n      }\n\n      table.appendChild(tbody);\n      myIdentities.appendChild(table);\n\n      let callback = (identity) => {\n        resolve(identity);\n      };\n      if (!toRemoveID) {\n        $('.clickable-cell').on('click', (event) => _this.changeID(callback));\n      }\n      $('.remove-id').on('click', (event) => _this.removeID(emails));\n\n    });\n  }\n\n  createTable() {\n    let table = document.createElement('table');\n    table.className = 'centered';\n    let thead = document.createElement('thead');\n    let tr = document.createElement('tr');\n    let thEmail = document.createElement('th');\n    thEmail.textContent = 'Email';\n    tr.appendChild(thEmail);\n    thead.appendChild(tr);\n    table.appendChild(thead);\n    return table;\n  }\n\n  createTableRow(identity, toRemoveID) {\n    let tr = document.createElement('tr');\n\n    let td = document.createElement('td');\n    td.textContent = identity.email;\n    td.className = 'clickable-cell';\n    td.style = 'cursor: pointer';\n    tr.appendChild(td);\n\n    td = document.createElement('td');\n\n    if(toRemoveID) {\n      let btn = document.createElement('button');\n      btn.textContent = 'Remove';\n      btn.className = 'remove-id waves-effect waves-light btn';\n      td.appendChild(btn);\n    }\n    tr.appendChild(td);\n\n    return tr;\n  }\n\n  changeID(callback) {\n    let _this = this;\n\n    let idToUse = event.target.innerText;\n    callback(idToUse);\n    return idToUse;\n  }\n\n  removeID(emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n    _this.identityModule.unregisterIdentity(idToRemove);\n\n    let numEmails = emails.length;\n    for (let i = 0; i < numEmails; i++) {\n      if (emails[i].email === idToRemove) {\n        emails.splice(i, 1);\n        break;\n      }\n    }\n    // -------------------------------------------------------------------------//\n    _this.showMyIdentities(emails, true);\n\n  }\n\n  obtainNewIdentity(callback, toRemoveID) {\n    let _this = this;\n    let idProvider = event.target.textContent;\n    let idProvider2 = event.target.text;\n\n    //if the request came from the identity administration GUI then call the method to obtain an identity\n    if(toRemoveID) {\n      _this.identityModule.callGenerateMethods(idProvider).then(() => {\n        _this.showIdentitiesGUI();\n      });\n    } else {\n      callback(idProvider);\n\n    }\n  }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n_resetIdentities() {\n  console.log('clicked resetIdentities');\n}\n\n\n}\n\nexport default IdentitiesGUI;\n"]}