{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/runtime-core/dist/minibus.js","node_modules/runtime-core/dist/sandbox.js","node_modules/urijs/src/IPv6.js","node_modules/urijs/src/SecondLevelDomains.js","node_modules/urijs/src/URI.js","node_modules/urijs/src/punycode.js","src/ContextApp.js","src/RuntimeLoader.js","src/RuntimeUAStub.js","src/iframe.js"],"names":[],"mappingsvuxvzrxfA;;AACA;;;;;;AAvBA;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACtB,SAAO,QAAP,GAAkB,uBAAlB;AACA,SAAO,QAAP,CAAgB,cAAhB,GAAiC,UAAS,GAAT,EAAc;AAC7C,WAAO,aAAP,CAAqB,WAArB,CAAiC,GAAjC,EAAsC,GAAtC;AACD,GAFD;AAGA,SAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAS,KAAT,EAAgB;AACjD,QAAI,MAAM,IAAN,CAAW,EAAX,KAAkB,MAAM,IAAN,CAAW,EAAX,CAAc,UAAd,CAAyB,uBAAzB,KAAqD,MAAM,IAAN,CAAW,EAAX,CAAc,QAAd,CAAuB,aAAvB,CAAvE,CAAJ,EAAmH;AAAE;AAAS;;AAE9H,WAAO,QAAP,CAAgB,UAAhB,CAA2B,MAAM,IAAjC;AACD,GAJD,EAIG,KAJH;;AAMA,SAAO,SAAP,GAAmB,6BAAoB,OAAO,QAA3B,CAAnB;AACA,SAAO,SAAP,CAAiB,OAAjB,GAA2B,UAAS,GAAT,EAAc,UAAd,EAA0B,MAA1B,EAAkC;AAC3D,QAAI;AACF,WAAK,KAAL,CAAW,MAAX,EAAmB,CAAC,UAAD,CAAnB;;AAEA,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,eAAO,SAAS,GAAT,EAAc,OAAO,QAArB,EAA+B,MAA/B,CAAP;AACD;;AAED,UAAI,OAAO,SAAS,OAAhB,KAA4B,UAAhC,EAA4C;AAC1C,eAAO,SAAS,OAAT,CAAiB,GAAjB,EAAsB,OAAO,QAA7B,EAAuC,MAAvC,CAAP;AACD;AAEF,KAXD,CAWE,OAAO,KAAP,EAAc;AACd,cAAQ,KAAR,CAAc,gCAAd,EAAgD,KAAhD;AACA,YAAM,KAAK,SAAL,CAAe,MAAM,OAArB,CAAN;AACD;AACF,GAhBD;AAiBD;;AAED,SAAS,UAAT,CAAoB,iBAApB,EAAuC;AACrC,SAAO,OAAO,SAAP,CAAiB,UAAjB,CAA4B,iBAA5B,CAAP;AACD;;AAED;;;;;;kBAMe,EAAE,cAAF,EAAU,sBAAV,E;;;;;;;;;8QClEf;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAEA,IAAI,gBAAJ;;AAEA,IAAI,QAAO,MAAP,yCAAO,MAAP,MAAiB,SAAjB,IAA8B,UAAU,IAA5C,EAAkD;AAC9C;AACH,CAFD,MAEK;AACD,cAAU,SAAV;AACH;;kBAEc,O;;;;;;;;;ACLf;;;;AACA;;;;AACA;;;;AAEA,IAAI,SAAS,SAAb;;AAEA;;;;;;;AAjCA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAiBA,IAAI,WAAW,SAAX,QAAW,CAAC,gBAAD,EAAmB,GAAnB,EAA2B;AACxC,SAAO;AACL,uBAAmB,IAAI,IAAJ,CAAS,iBADvB;AAEL,YAAQ,IAAI,IAAJ,CAAS,MAFZ;AAGL,cAAU,iBAAiB,QAHtB;AAIL,UAAM,iBAAiB;AAJlB,GAAP;AAMD,CAPD;;AASA;;;;;;AAMA,IAAI,iBAAiB;AACnB,kBAAgB,wBAAC,iBAAD,EAA2C;AAAA,QAAvB,YAAuB,uEAAR,KAAQ;;AACzD,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAmB;AACpC,UAAI,SAAS,SAAT,MAAS,CAAC,CAAD,EAAK;AAChB,YAAI,EAAE,IAAF,CAAO,EAAP,KAAc,uBAAlB,EAA2C;AACzC,iBAAO,mBAAP,CAA2B,SAA3B,EAAsC,MAAtC;AACA,kBAAQ,SAAS,qBAAI,UAAJ,CAAe,EAAE,IAAF,CAAO,IAAP,CAAY,iBAA3B,CAAT,EAAwD,EAAE,IAA1D,CAAR;AACD;AACF,OALD;AAMA,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,MAAnC;AACA,aAAO,aAAP,CAAqB,WAArB,CAAiC,EAAC,IAAI,kBAAL,EAAyB,MAAM,EAAC,YAAY,iBAAb,EAAgC,0BAAhC,EAA/B,EAAjC,EAAgH,GAAhH;AACD,KATM,CAAP;AAUD,GAZkB;;AAcnB,oBAAkB,0BAAC,MAAD,EAAU;AAC1B,WAAO,aAAP,CAAqB,WAArB,CAAiC,EAAC,IAAI,eAAL,EAAsB,MAAM,EAAC,QAAQ,MAAT,EAA5B,EAAjC,EAAgF,GAAhF;AACD,GAhBkB;;AAkBnB,SAAO,iBAAI;AACT,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAmB;AACpC,UAAI,SAAS,SAAT,MAAS,CAAC,CAAD,EAAK;AAChB,YAAI,EAAE,IAAF,CAAO,EAAP,KAAc,uBAAlB,EAA2C;AACzC,iBAAO,mBAAP,CAA2B,SAA3B,EAAsC,MAAtC;AACA,kBAAQ,QAAQ,EAAE,IAAF,CAAO,IAAf,CAAR;AACD;AACF,OALD;AAMA,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,MAAnC;AACA,aAAO,aAAP,CAAqB,WAArB,CAAiC,EAAC,IAAI,YAAL,EAAmB,MAAM,EAAzB,EAAjC,EAA+D,GAA/D;AACD,KATM,CAAP;AAUD;AA7BkB,CAArB;;AAgCA,IAAI,aAAa,SAAb,UAAa,GAAW;AAC1B,SAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAC,CAAD,EAAO;AACxC,QAAI,EAAE,IAAF,CAAO,EAAP,KAAc,qBAAlB,EAAyC;;AAEvC,UAAI,EAAE,IAAF,CAAO,IAAP,CAAY,MAAZ,KAAuB,eAA3B,EAA4C;AAC1C,eAAO,KAAP,CAAa,KAAb,GAAqB,MAArB;AACA,eAAO,KAAP,CAAa,MAAb,GAAsB,MAAtB;AACD,OAHD,MAGO;AACL,YAAI,EAAE,IAAF,CAAO,IAAP,CAAY,MAAZ,KAAuB,eAA3B,EAA4C;AAC1C,iBAAO,KAAP,CAAa,KAAb,GAAqB,MAArB;AACA,iBAAO,KAAP,CAAa,MAAb,GAAsB,MAAtB;AACD;AACF;AAEF;AACF,GAdD;AAeD,CAhBD;;AAkBA;;;;AAIA,IAAI,iBAAiB;AACnB,WAAS,mBAAuE;AAAA;;AAAA,mFAAJ,EAAI;AAAA,QAA7D,MAA6D,QAA7D,MAA6D;AAAA,QAArD,UAAqD,QAArD,UAAqD;AAAA,QAAzC,WAAyC,QAAzC,WAAyC;AAAA,QAA5B,QAA4B,QAA5B,QAA4B;AAAA,QAAlB,UAAkB,QAAlB,UAAkB;;AAC9E,YAAQ,IAAR,CAAa,WAAb,EAA0B,MAA1B,EAAkC,UAAlC,EAA8C,WAA9C,EAA2D,QAA3D,EAAqE,UAArE;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAmB;AACpC,UAAI,UAAU,MAAK,WAAL,CAAiB,UAAjB,EAA6B,MAA7B,EAAqC,WAArC,EAAkD,QAAlD,EAA4D,UAA5D,CAAd;AACA,eAAS,oBAAgB,QAAQ,QAAxB,gBAA2C,QAAQ,MAAnD,iBAAqE,QAAQ,GAA7E,qBAAgG,WAAhG,CAAT;AACA,UAAI,YAAY,SAAZ,SAAY,CAAC,CAAD,EAAK;AACnB,YAAI,EAAE,IAAF,CAAO,EAAP,KAAc,mBAAlB,EAAuC;AACrC,iBAAO,mBAAP,CAA2B,SAA3B,EAAsC,SAAtC;AACA,kBAAQ,cAAR;AACD;AACF,OALD;AAMA,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,SAAnC;AACA,aAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAC,CAAD,EAAO;AACxC,YAAI,EAAE,IAAF,CAAO,EAAP,IAAa,EAAE,IAAF,CAAO,EAAP,KAAc,6BAA/B,EAA8D;AAC5D,cAAM,MAAM,oBAAa,QAAQ,UAArB,CAAZ;AACA,cAAI,gBAAJ,CAAqB,MAArB,EAA6B,YAAM;AACjC,gBAAI,aAAJ,CAAkB,WAAlB,CAA8B,EAAE,IAAhC,EAAsC,GAAtC,EAA2C,EAAE,KAA7C;AACD,WAFD,EAEG,KAFH;AAGD;AACF,OAPD;AAQA,2BAAI,MAAJ,CAAW,MAAX;AACA;AACD,KApBM,CAAP;AAqBD,GAxBkB;;AA0BnB,aA1BmB,uBA0BP,UA1BO,EA0BK,MA1BL,EA0Ba,WA1Bb,EA0B0B,QA1B1B,EA0BoC,UA1BpC,EA0BgD;AACjE,QAAI,CAAC,CAAC,WAAN,EAAmB;AACjB,mBAAa,cAAc,mCAAmC,MAAnC,GAA4C,8BAAvE;AACA,eAAS,UAAU,oBAAQ,UAAR,EAAoB,IAApB,EAAnB;AACA,iBAAW,YAAY,aAAa,MAAb,GAAsB,iCAA7C;AACA,mBAAa,cAAc,aAAa,MAAb,GAAsB,mCAAjD;AACD,KALD,MAKO;AACL,mBAAa,qCAAmC,MAAnC,iCAAb;AACA,eAAS,UAAU,oBAAQ,UAAR,EAAoB,IAApB,GAA2B,OAA3B,CAAmC,YAAnC,EAAiD,EAAjD,CAAnB;AACA,iBAAW,YAAY,aAAa,MAAb,GAAsB,iCAA7C;AACA,mBAAa,cAAc,aAAa,MAAb,GAAsB,mCAAjD;AACD;;AAED,YAAQ,IAAR,CAAa,eAAb,EAA8B,UAA9B,EAA0C,MAA1C,EAAkD,QAAlD,EAA4D,UAA5D;;AAEA,WAAO;AACL,WAAK,UADA;AAEL,cAAQ,MAFH;AAGL,gBAAU,QAHL;AAIL,kBAAY;AAJP,KAAP;AAMD;AA/CkB,CAArB;;kBAkDe,c;;;;;;;;QC/HC,M,GAAA,M;AAhChB;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;AAKO,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC3B,KAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAO,YAAP,CAAoB,IAApB,EAA0B,SAA1B;AACA,QAAO,KAAP,CAAa,QAAb,GAAwB,UAAxB;AACA,QAAO,KAAP,CAAa,GAAb,GAAmB,GAAnB;AACA,QAAO,KAAP,CAAa,KAAb,GAAqB,GAArB;AACA,QAAO,KAAP,CAAa,MAAb,GAAsB,GAAtB;AACA,QAAO,KAAP,CAAa,MAAb,GAAsB,IAAtB;AACA,QAAO,KAAP,GAAe,MAAf;AACA,QAAO,MAAP,GAAgB,MAAhB;AACA,QAAO,KAAP,GAAe,iBAAf;AACA,QAAO,YAAP,CAAoB,UAApB,EAAgC,EAAhC;AACA,QAAO,YAAP,CAAoB,KAApB,EAA2B,GAA3B;AACA,QAAO,YAAP,CAAoB,SAApB,EAA+B,8GAA/B;AACA,QAAO,KAAP,CAAa,OAAb,GAAuB,OAAvB;AACA,UAAS,aAAT,CAAuB,MAAvB,EAA+B,WAA/B,CAA2C,MAA3C;;AAEA,QAAO,MAAP;AACA","file":"rethink.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// version: 0.10.0\n// date: Wed Nov 08 2017 12:28:40 GMT+0000 (WET)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n// version: 0.10.0\n// date: Wed Nov 08 2017 12:28:40 GMT+0000 (WET)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(\"minibus\",[],e):\"object\"==typeof exports?exports.minibus=e():t.minibus=e()}(this,function(){/******/\nreturn function(t){/******/\n/******/\n// The require function\n/******/\nfunction __webpack_require__(n){/******/\n/******/\n// Check if module is in cache\n/******/\nif(e[n])/******/\nreturn e[n].exports;/******/\n// Create a new module (and put it into the cache)\n/******/\nvar r=e[n]={/******/\ni:n,/******/\nl:!1,/******/\nexports:{}};/******/\n/******/\n// Return the exports of the module\n/******/\n/******/\n/******/\n// Execute the module function\n/******/\n/******/\n/******/\n// Flag the module as loaded\n/******/\nreturn t[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}// webpackBootstrap\n/******/\n// The module cache\n/******/\nvar e={};/******/\n/******/\n// Load entry module and return exports\n/******/\n/******/\n/******/\n/******/\n// expose the modules object (__webpack_modules__)\n/******/\n/******/\n/******/\n// expose the module cache\n/******/\n/******/\n/******/\n// define getter function for harmony exports\n/******/\n/******/\n/******/\n// getDefaultExport function for compatibility with non-harmony modules\n/******/\n/******/\n/******/\n// Object.prototype.hasOwnProperty.call\n/******/\n/******/\n/******/\n// __webpack_public_path__\n/******/\nreturn __webpack_require__.m=t,__webpack_require__.c=e,__webpack_require__.d=function(t,e,n){/******/\n__webpack_require__.o(t,e)||/******/\nObject.defineProperty(t,e,{/******/\nconfigurable:!1,/******/\nenumerable:!0,/******/\nget:n})},__webpack_require__.n=function(t){/******/\nvar e=t&&t.__esModule?/******/\nfunction(){return t.default}:/******/\nfunction(){return t};/******/\n/******/\nreturn __webpack_require__.d(e,\"a\",e),e},__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.p=\"\",__webpack_require__(__webpack_require__.s=135)}([/* 0 */\n/***/\nfunction(t,e){var n=t.exports={version:\"2.5.1\"};\"number\"==typeof __e&&(__e=n)},/* 1 */\n/***/\nfunction(t,e){\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},/* 2 */\n/***/\nfunction(t,e,n){var r=n(28)(\"wks\"),o=n(19),i=n(1).Symbol,u=\"function\"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)(\"Symbol.\"+t))}).store=r},/* 3 */\n/***/\nfunction(t,e,n){var r=n(1),o=n(0),i=n(14),u=n(8),c=function(t,e,n){var s,f,a,l=t&c.F,p=t&c.G,v=t&c.S,d=t&c.P,h=t&c.B,_=t&c.W,y=p?o:o[e]||(o[e]={}),b=y.prototype,g=p?r:v?r[e]:(r[e]||{}).prototype;p&&(n=e);for(s in n)\n// contains in native\n(f=!l&&g&&void 0!==g[s])&&s in y||(\n// export native or passed\na=f?g[s]:n[s],\n// prevent global pollution for namespaces\ny[s]=p&&\"function\"!=typeof g[s]?n[s]:h&&f?i(a,r):_&&g[s]==a?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(a):d&&\"function\"==typeof a?i(Function.call,a):a,\n// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\nd&&((y.virtual||(y.virtual={}))[s]=a,\n// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\nt&c.R&&b&&!b[s]&&u(b,s,a)))};\n// type bitmap\nc.F=1,// forced\nc.G=2,// global\nc.S=4,// static\nc.P=8,// proto\nc.B=16,// bind\nc.W=32,// wrap\nc.U=64,// safe\nc.R=128,// real proto method for `library`\nt.exports=c},/* 4 */\n/***/\nfunction(t,e,n){var r=n(7);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},/* 5 */\n/***/\nfunction(t,e,n){\n// Thank's IE8 for his funny defineProperty\nt.exports=!n(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},/* 6 */\n/***/\nfunction(t,e,n){var r=n(4),o=n(36),i=n(26),u=Object.defineProperty;e.f=n(5)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(t[e]=n.value),t}},/* 7 */\n/***/\nfunction(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},/* 8 */\n/***/\nfunction(t,e,n){var r=n(6),o=n(18);t.exports=n(5)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},/* 9 */\n/***/\nfunction(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},/* 10 */\n/***/\nfunction(t,e,n){\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar r=n(57),o=n(22);t.exports=function(t){return r(o(t))}},/* 11 */\n/***/\nfunction(t,e,n){\"use strict\";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}},/* 12 */\n/***/\nfunction(t,e,n){\"use strict\";e.__esModule=!0;var r=n(60),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=function(){function defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,o.default)(t,r.key,r)}}return function(t,e,n){return e&&defineProperties(t.prototype,e),n&&defineProperties(t,n),t}}()},/* 13 */\n/***/\nfunction(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},/* 14 */\n/***/\nfunction(t,e,n){\n// optional / simple context binding\nvar r=n(17);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},/* 15 */\n/***/\nfunction(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},/* 16 */\n/***/\nfunction(t,e){t.exports={}},/* 17 */\n/***/\nfunction(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},/* 18 */\n/***/\nfunction(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},/* 19 */\n/***/\nfunction(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},/* 20 */\n/***/\nfunction(t,e,n){\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar r=n(37),o=n(29);t.exports=Object.keys||function(t){return r(t,o)}},/* 21 */\n/***/\nfunction(t,e){\n// 7.1.4 ToInteger\nvar n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},/* 22 */\n/***/\nfunction(t,e){\n// 7.2.1 RequireObjectCoercible(argument)\nt.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},/* 23 */\n/***/\nfunction(t,e){t.exports=!0},/* 24 */\n/***/\nfunction(t,e,n){var r=n(6).f,o=n(9),i=n(2)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},/* 25 */\n/***/\nfunction(t,e,n){var r=n(7),o=n(1).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},/* 26 */\n/***/\nfunction(t,e,n){\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar r=n(7);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nt.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},/* 27 */\n/***/\nfunction(t,e,n){var r=n(28)(\"keys\"),o=n(19);t.exports=function(t){return r[t]||(r[t]=o(t))}},/* 28 */\n/***/\nfunction(t,e,n){var r=n(1),o=r[\"__core-js_shared__\"]||(r[\"__core-js_shared__\"]={});t.exports=function(t){return o[t]||(o[t]={})}},/* 29 */\n/***/\nfunction(t,e){\n// IE 8- don't enum bug keys\nt.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},/* 30 */\n/***/\nfunction(t,e,n){\n// 7.1.13 ToObject(argument)\nvar r=n(22);t.exports=function(t){return Object(r(t))}},/* 31 */\n/***/\nfunction(t,e,n){\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar r=n(4),o=n(69),i=n(29),u=n(27)(\"IE_PROTO\"),c=function(){},s=function(){\n// Thrash, waste and sodomy: IE GC bug\nvar t,e=n(25)(\"iframe\"),r=i.length;for(e.style.display=\"none\",n(46).appendChild(e),e.src=\"javascript:\",// eslint-disable-line no-script-url\n// createDict = iframe.contentWindow.Object;\n// html.removeChild(iframe);\nt=e.contentWindow.document,t.open(),t.write(\"<script>document.F=Object<\\/script>\"),t.close(),s=t.F;r--;)delete s.prototype[i[r]];return s()};t.exports=Object.create||function(t,e){var n;\n// add \"__proto__\" for Object.getPrototypeOf polyfill\nreturn null!==t?(c.prototype=r(t),n=new c,c.prototype=null,n[u]=t):n=s(),void 0===e?n:o(n,e)}},/* 32 */\n/***/\nfunction(t,e,n){\"use strict\";function PromiseCapability(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}\n// 25.4.1.5 NewPromiseCapability(C)\nvar r=n(17);t.exports.f=function(t){return new PromiseCapability(t)}},/* 33 */\n/***/\nfunction(t,e,n){e.f=n(2)},/* 34 */\n/***/\nfunction(t,e,n){var r=n(1),o=n(0),i=n(23),u=n(33),c=n(6).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});\"_\"==t.charAt(0)||t in e||c(e,t,{value:u.f(t)})}},/* 35 */\n/***/\nfunction(t,e){e.f={}.propertyIsEnumerable},/* 36 */\n/***/\nfunction(t,e,n){t.exports=!n(5)&&!n(13)(function(){return 7!=Object.defineProperty(n(25)(\"div\"),\"a\",{get:function(){return 7}}).a})},/* 37 */\n/***/\nfunction(t,e,n){var r=n(9),o=n(10),i=n(58)(!1),u=n(27)(\"IE_PROTO\");t.exports=function(t,e){var n,c=o(t),s=0,f=[];for(n in c)n!=u&&r(c,n)&&f.push(n);\n// Don't enum bug & hidden keys\nfor(;e.length>s;)r(c,n=e[s++])&&(~i(f,n)||f.push(n));return f}},/* 38 */\n/***/\nfunction(t,e,n){\n// 7.1.15 ToLength\nvar r=n(21),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},/* 39 */\n/***/\nfunction(t,e,n){\n// most Object methods by ES6 should accept primitives\nvar r=n(3),o=n(0),i=n(13);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},/* 40 */\n/***/\nfunction(t,e,n){var r=n(35),o=n(18),i=n(10),u=n(26),c=n(9),s=n(36),f=Object.getOwnPropertyDescriptor;e.f=n(5)?f:function(t,e){if(t=i(t),e=u(e,!0),s)try{return f(t,e)}catch(t){}if(c(t,e))return o(!r.f.call(t,e),t[e])}},/* 41 */\n/***/\nfunction(t,e,n){t.exports={default:n(66),__esModule:!0}},/* 42 */\n/***/\nfunction(t,e){},/* 43 */\n/***/\nfunction(t,e,n){\"use strict\";var r=n(67)(!0);\n// 21.1.3.27 String.prototype[@@iterator]()\nn(44)(String,\"String\",function(t){this._t=String(t),// target\nthis._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},/* 44 */\n/***/\nfunction(t,e,n){\"use strict\";var r=n(23),o=n(3),i=n(45),u=n(8),c=n(9),s=n(16),f=n(68),a=n(24),l=n(47),p=n(2)(\"iterator\"),v=!([].keys&&\"next\"in[].keys()),d=function(){return this};t.exports=function(t,e,n,h,_,y,b){f(n,e,h);var g,m,w,x=function(t){if(!v&&t in P)return P[t];switch(t){case\"keys\":case\"values\":return function(){return new n(this,t)}}return function(){return new n(this,t)}},O=e+\" Iterator\",M=\"values\"==_,S=!1,P=t.prototype,L=P[p]||P[\"@@iterator\"]||_&&P[_],j=L||x(_),k=_?M?x(\"entries\"):j:void 0,E=\"Array\"==e?P.entries||L:L;if(\n// Fix native\nE&&(w=l(E.call(new t)))!==Object.prototype&&w.next&&(\n// Set @@toStringTag to native iterators\na(w,O,!0),\n// fix for some old engines\nr||c(w,p)||u(w,p,d)),\n// fix Array#{values, @@iterator}.name in V8 / FF\nM&&L&&\"values\"!==L.name&&(S=!0,j=function(){return L.call(this)}),\n// Define iterator\nr&&!b||!v&&!S&&P[p]||u(P,p,j),\n// Plug for library\ns[e]=j,s[O]=d,_)if(g={values:M?j:x(\"values\"),keys:y?j:x(\"keys\"),entries:k},b)for(m in g)m in P||i(P,m,g[m]);else o(o.P+o.F*(v||S),e,g);return g}},/* 45 */\n/***/\nfunction(t,e,n){t.exports=n(8)},/* 46 */\n/***/\nfunction(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},/* 47 */\n/***/\nfunction(t,e,n){\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar r=n(9),o=n(30),i=n(27)(\"IE_PROTO\"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},/* 48 */\n/***/\nfunction(t,e,n){n(70);for(var r=n(1),o=n(8),i=n(16),u=n(2)(\"toStringTag\"),c=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),s=0;s<c.length;s++){var f=c[s],a=r[f],l=a&&a.prototype;l&&!l[u]&&o(l,u,f),i[f]=i.Array}},/* 49 */\n/***/\nfunction(t,e,n){\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar r=n(15),o=n(2)(\"toStringTag\"),i=\"Arguments\"==r(function(){return arguments}()),u=function(t,e){try{return t[e]}catch(t){}};t.exports=function(t){var e,n,c;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=u(e=Object(t),o))?n:i?r(e):\"Object\"==(c=r(e))&&\"function\"==typeof e.callee?\"Arguments\":c}},/* 50 */\n/***/\nfunction(t,e,n){\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar r=n(4),o=n(17),i=n(2)(\"species\");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||void 0==(n=r(u)[i])?e:o(n)}},/* 51 */\n/***/\nfunction(t,e,n){var r,o,i,u=n(14),c=n(79),s=n(46),f=n(25),a=n(1),l=a.process,p=a.setImmediate,v=a.clearImmediate,d=a.MessageChannel,h=a.Dispatch,_=0,y={},b=function(){var t=+this;\n// eslint-disable-next-line no-prototype-builtins\nif(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},g=function(t){b.call(t.data)};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\np&&v||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++_]=function(){\n// eslint-disable-next-line no-new-func\nc(\"function\"==typeof t?t:Function(t),e)},r(_),_},v=function(t){delete y[t]},\n// Node.js 0.8-\n\"process\"==n(15)(l)?r=function(t){l.nextTick(u(b,t,1))}:h&&h.now?r=function(t){h.now(u(b,t,1))}:d?(o=new d,i=o.port2,o.port1.onmessage=g,r=u(i.postMessage,i,1)):a.addEventListener&&\"function\"==typeof postMessage&&!a.importScripts?(r=function(t){a.postMessage(t+\"\",\"*\")},a.addEventListener(\"message\",g,!1)):r=\"onreadystatechange\"in f(\"script\")?function(t){s.appendChild(f(\"script\")).onreadystatechange=function(){s.removeChild(this),b.call(t)}}:function(t){setTimeout(u(b,t,1),0)}),t.exports={set:p,clear:v}},/* 52 */\n/***/\nfunction(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},/* 53 */\n/***/\nfunction(t,e,n){var r=n(4),o=n(7),i=n(32);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},/* 54 */\n/***/\nfunction(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(89),o=_interopRequireDefault(r),i=n(91),u=_interopRequireDefault(i),c=\"function\"==typeof u.default&&\"symbol\"==typeof o.default?function(t){return typeof t}:function(t){return t&&\"function\"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?\"symbol\":typeof t};e.default=\"function\"==typeof u.default&&\"symbol\"===c(o.default)?function(t){return void 0===t?\"undefined\":c(t)}:function(t){return t&&\"function\"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?\"symbol\":void 0===t?\"undefined\":c(t)}},/* 55 */\n/***/\nfunction(t,e){e.f=Object.getOwnPropertySymbols},/* 56 */\n/***/\nfunction(t,e,n){\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar r=n(37),o=n(29).concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},/* 57 */\n/***/\nfunction(t,e,n){\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar r=n(15);\n// eslint-disable-next-line no-prototype-builtins\nt.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},/* 58 */\n/***/\nfunction(t,e,n){\n// false -> Array#indexOf\n// true  -> Array#includes\nvar r=n(10),o=n(38),i=n(59);t.exports=function(t){return function(e,n,u){var c,s=r(e),f=o(s.length),a=i(u,f);\n// Array#includes uses SameValueZero equality algorithm\n// eslint-disable-next-line no-self-compare\nif(t&&n!=n){for(;f>a;)\n// eslint-disable-next-line no-self-compare\nif((c=s[a++])!=c)return!0}else for(;f>a;a++)if((t||a in s)&&s[a]===n)return t||a||0;return!t&&-1}}},/* 59 */\n/***/\nfunction(t,e,n){var r=n(21),o=Math.max,i=Math.min;t.exports=function(t,e){return t=r(t),t<0?o(t+e,0):i(t,e)}},/* 60 */\n/***/\nfunction(t,e,n){t.exports={default:n(61),__esModule:!0}},/* 61 */\n/***/\nfunction(t,e,n){n(62);var r=n(0).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},/* 62 */\n/***/\nfunction(t,e,n){var r=n(3);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\nr(r.S+r.F*!n(5),\"Object\",{defineProperty:n(6).f})},/* 63 */\n/***/\nfunction(t,e,n){t.exports={default:n(87),__esModule:!0}},/* 64 */\n/***/\nfunction(t,e,n){\"use strict\";e.__esModule=!0;var r=n(54),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(void 0===e?\"undefined\":(0,o.default)(e))&&\"function\"!=typeof e?t:e}},/* 65 */\n/***/\nfunction(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(100),o=_interopRequireDefault(r),i=n(104),u=_interopRequireDefault(i),c=n(54),s=_interopRequireDefault(c);e.default=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+(void 0===e?\"undefined\":(0,s.default)(e)));t.prototype=(0,u.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o.default?(0,o.default)(t,e):t.__proto__=e)}},/* 66 */\n/***/\nfunction(t,e,n){n(42),n(43),n(48),n(73),n(84),n(85),t.exports=n(0).Promise},/* 67 */\n/***/\nfunction(t,e,n){var r=n(21),o=n(22);\n// true  -> String#at\n// false -> String#codePointAt\nt.exports=function(t){return function(e,n){var i,u,c=String(o(e)),s=r(n),f=c.length;return s<0||s>=f?t?\"\":void 0:(i=c.charCodeAt(s),i<55296||i>56319||s+1===f||(u=c.charCodeAt(s+1))<56320||u>57343?t?c.charAt(s):i:t?c.slice(s,s+2):u-56320+(i-55296<<10)+65536)}}},/* 68 */\n/***/\nfunction(t,e,n){\"use strict\";var r=n(31),o=n(18),i=n(24),u={};\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nn(8)(u,n(2)(\"iterator\"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+\" Iterator\")}},/* 69 */\n/***/\nfunction(t,e,n){var r=n(6),o=n(4),i=n(20);t.exports=n(5)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),c=u.length,s=0;c>s;)r.f(t,n=u[s++],e[n]);return t}},/* 70 */\n/***/\nfunction(t,e,n){\"use strict\";var r=n(71),o=n(72),i=n(16),u=n(10);\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nt.exports=n(44)(Array,\"Array\",function(t,e){this._t=u(t),// target\nthis._i=0,// next index\nthis._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):\"keys\"==e?o(0,n):\"values\"==e?o(0,t[n]):o(0,[n,t[n]])},\"values\"),\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\ni.Arguments=i.Array,r(\"keys\"),r(\"values\"),r(\"entries\")},/* 71 */\n/***/\nfunction(t,e){t.exports=function(){}},/* 72 */\n/***/\nfunction(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},/* 73 */\n/***/\nfunction(t,e,n){\"use strict\";var r,o,i,u,c=n(23),s=n(1),f=n(14),a=n(49),l=n(3),p=n(7),v=n(17),d=n(74),h=n(75),_=n(50),y=n(51).set,b=n(80)(),g=n(32),m=n(52),w=n(53),x=s.TypeError,O=s.process,M=s.Promise,S=\"process\"==a(O),P=function(){},L=o=g.f,j=!!function(){try{\n// correct subclassing with @@species support\nvar t=M.resolve(1),e=(t.constructor={})[n(2)(\"species\")]=function(t){t(P,P)};\n// unhandled rejections tracking support, NodeJS Promise without it fails @@species test\nreturn(S||\"function\"==typeof PromiseRejectionEvent)&&t.then(P)instanceof e}catch(t){}}(),k=function(t){var e;return!(!p(t)||\"function\"!=typeof(e=t.then))&&e},E=function(t,e){if(!t._n){t._n=!0;var n=t._c;b(function(){for(var r=t._v,o=1==t._s,i=0;n.length>i;)!function(e){var n,i,u=o?e.ok:e.fail,c=e.resolve,s=e.reject,f=e.domain;try{u?(o||(2==t._h&&C(t),t._h=1),!0===u?n=r:(f&&f.enter(),n=u(r),f&&f.exit()),n===e.promise?s(x(\"Promise-chain cycle\")):(i=k(n))?i.call(n,c,s):c(n)):s(r)}catch(t){s(t)}}(n[i++]);// variable length - can't use forEach\nt._c=[],t._n=!1,e&&!t._h&&R(t)})}},R=function(t){y.call(s,function(){var e,n,r,o=t._v,i=T(t);if(i&&(e=m(function(){S?O.emit(\"unhandledRejection\",o,t):(n=s.onunhandledrejection)?n({promise:t,reason:o}):(r=s.console)&&r.error&&r.error(\"Unhandled promise rejection\",o)}),\n// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\nt._h=S||T(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},T=function(t){if(1==t._h)return!1;for(var e,n=t._a||t._c,r=0;n.length>r;)if(e=n[r++],e.fail||!T(e.promise))return!1;return!0},C=function(t){y.call(s,function(){var e;S?O.emit(\"rejectionHandled\",t):(e=s.onrejectionhandled)&&e({promise:t,reason:t._v})})},A=function(t){var e=this;e._d||(e._d=!0,e=e._w||e,// unwrap\ne._v=t,e._s=2,e._a||(e._a=e._c.slice()),E(e,!0))},D=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;// unwrap\ntry{if(n===t)throw x(\"Promise can't be resolved itself\");(e=k(t))?b(function(){var r={_w:n,_d:!1};// wrap\ntry{e.call(t,f(D,r,1),f(A,r,1))}catch(t){A.call(r,t)}}):(n._v=t,n._s=1,E(n,!1))}catch(t){A.call({_w:n,_d:!1},t)}}};\n// constructor polyfill\nj||(\n// 25.4.3.1 Promise(executor)\nM=function(t){d(this,M,\"Promise\",\"_h\"),v(t),r.call(this);try{t(f(D,this,1),f(A,this,1))}catch(t){A.call(this,t)}},\n// eslint-disable-next-line no-unused-vars\nr=function(t){this._c=[],// <- awaiting reactions\nthis._a=void 0,// <- checked in isUnhandled reactions\nthis._s=0,// <- state\nthis._d=!1,// <- done\nthis._v=void 0,// <- value\nthis._h=0,// <- rejection state, 0 - default, 1 - handled, 2 - unhandled\nthis._n=!1},r.prototype=n(81)(M.prototype,{\n// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\nthen:function(t,e){var n=L(_(this,M));return n.ok=\"function\"!=typeof t||t,n.fail=\"function\"==typeof e&&e,n.domain=S?O.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&E(this,!1),n.promise},\n// 25.4.5.1 Promise.prototype.catch(onRejected)\ncatch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=f(D,t,1),this.reject=f(A,t,1)},g.f=L=function(t){return t===M||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!j,{Promise:M}),n(24)(M,\"Promise\"),n(82)(\"Promise\"),u=n(0).Promise,\n// statics\nl(l.S+l.F*!j,\"Promise\",{\n// 25.4.4.5 Promise.reject(r)\nreject:function(t){var e=L(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(c||!j),\"Promise\",{\n// 25.4.4.6 Promise.resolve(x)\nresolve:function(t){return w(c&&this===u?M:this,t)}}),l(l.S+l.F*!(j&&n(83)(function(t){M.all(t).catch(P)})),\"Promise\",{\n// 25.4.4.1 Promise.all(iterable)\nall:function(t){var e=this,n=L(e),r=n.resolve,o=n.reject,i=m(function(){var n=[],i=0,u=1;h(t,!1,function(t){var c=i++,s=!1;n.push(void 0),u++,e.resolve(t).then(function(t){s||(s=!0,n[c]=t,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},\n// 25.4.4.4 Promise.race(iterable)\nrace:function(t){var e=this,n=L(e),r=n.reject,o=m(function(){h(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},/* 74 */\n/***/\nfunction(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+\": incorrect invocation!\");return t}},/* 75 */\n/***/\nfunction(t,e,n){var r=n(14),o=n(76),i=n(77),u=n(4),c=n(38),s=n(78),f={},a={},e=t.exports=function(t,e,n,l,p){var v,d,h,_,y=p?function(){return t}:s(t),b=r(n,l,e?2:1),g=0;if(\"function\"!=typeof y)throw TypeError(t+\" is not iterable!\");\n// fast case for arrays with default iterator\nif(i(y)){for(v=c(t.length);v>g;g++)if((_=e?b(u(d=t[g])[0],d[1]):b(t[g]))===f||_===a)return _}else for(h=y.call(t);!(d=h.next()).done;)if((_=o(h,b,d.value,e))===f||_===a)return _};e.BREAK=f,e.RETURN=a},/* 76 */\n/***/\nfunction(t,e,n){\n// call something on iterator step with safe closing on error\nvar r=n(4);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},/* 77 */\n/***/\nfunction(t,e,n){\n// check on default Array iterator\nvar r=n(16),o=n(2)(\"iterator\"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},/* 78 */\n/***/\nfunction(t,e,n){var r=n(49),o=n(2)(\"iterator\"),i=n(16);t.exports=n(0).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t[\"@@iterator\"]||i[r(t)]}},/* 79 */\n/***/\nfunction(t,e){\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nt.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},/* 80 */\n/***/\nfunction(t,e,n){var r=n(1),o=n(51).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,s=\"process\"==n(15)(u);t.exports=function(){var t,e,n,f=function(){var r,o;for(s&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};\n// Node.js\nif(s)n=function(){u.nextTick(f)};else if(i){var a=!0,l=document.createTextNode(\"\");new i(f).observe(l,{characterData:!0}),// eslint-disable-line no-new\nn=function(){l.data=a=!a}}else if(c&&c.resolve){var p=c.resolve();n=function(){p.then(f)}}else n=function(){\n// strange IE + webpack dev server bug - use .call(global)\no.call(r,f)};return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},/* 81 */\n/***/\nfunction(t,e,n){var r=n(8);t.exports=function(t,e,n){for(var o in e)n&&t[o]?t[o]=e[o]:r(t,o,e[o]);return t}},/* 82 */\n/***/\nfunction(t,e,n){\"use strict\";var r=n(1),o=n(0),i=n(6),u=n(5),c=n(2)(\"species\");t.exports=function(t){var e=\"function\"==typeof o[t]?o[t]:r[t];u&&e&&!e[c]&&i.f(e,c,{configurable:!0,get:function(){return this}})}},/* 83 */\n/***/\nfunction(t,e,n){var r=n(2)(\"iterator\"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},\n// eslint-disable-next-line no-throw-literal\nArray.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},t(i)}catch(t){}return n}},/* 84 */\n/***/\nfunction(t,e,n){\"use strict\";\n// https://github.com/tc39/proposal-promise-finally\nvar r=n(3),o=n(0),i=n(1),u=n(50),c=n(53);r(r.P+r.R,\"Promise\",{finally:function(t){var e=u(this,o.Promise||i.Promise),n=\"function\"==typeof t;return this.then(n?function(n){return c(e,t()).then(function(){return n})}:t,n?function(n){return c(e,t()).then(function(){throw n})}:t)}})},/* 85 */\n/***/\nfunction(t,e,n){\"use strict\";\n// https://github.com/tc39/proposal-promise-try\nvar r=n(3),o=n(32),i=n(52);r(r.S,\"Promise\",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},/* 86 */\n/***/\nfunction(t,e,n){var r,o;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n!function(i,u){\"use strict\";r=u,void 0!==(o=\"function\"==typeof r?r.call(e,n,e,t):r)&&(t.exports=o)}(0,function(){\"use strict\";\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(t,e){var n=t[e];if(\"function\"==typeof n.bind)return n.bind(t);try{return Function.prototype.bind.call(n,t)}catch(e){\n// Missing bind shim or IE8 + Modernizr, fallback to wrapping\nreturn function(){return Function.prototype.apply.apply(n,[t,arguments])}}}\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(n){return\"debug\"===n&&(n=\"log\"),typeof console!==e&&(void 0!==console[n]?bindMethod(console,n):void 0!==console.log?bindMethod(console,\"log\"):t)}\n// These private functions always need `this` to be set properly\nfunction replaceLoggingMethods(e,r){/*jshint validthis:true */\nfor(var o=0;o<n.length;o++){var i=n[o];this[i]=o<e?t:this.methodFactory(i,e,r)}\n// Define log.log as an alias for log.debug\nthis.log=this.debug}\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(t,n,r){return function(){typeof console!==e&&(replaceLoggingMethods.call(this,n,r),this[t].apply(this,arguments))}}\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(t,e,n){/*jshint validthis:true */\nreturn realMethod(t)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(t,r,o){function persistLevelIfPossible(t){var r=(n[t]||\"silent\").toUpperCase();if(typeof window!==e){\n// Use localStorage if available\ntry{return void(window.localStorage[c]=r)}catch(t){}\n// Use session cookie as fallback\ntry{window.document.cookie=encodeURIComponent(c)+\"=\"+r+\";\"}catch(t){}}}function getPersistedLevel(){var t;if(typeof window!==e){try{t=window.localStorage[c]}catch(t){}\n// Fallback to cookies if local storage gives us nothing\nif(typeof t===e)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(c)+\"=\");-1!==r&&(t=/^([^;]+)/.exec(n.slice(r))[1])}catch(t){}\n// If the stored level is not valid, treat it as if nothing was stored.\nreturn void 0===u.levels[t]&&(t=void 0),t}}var i,u=this,c=\"loglevel\";t&&(c+=\":\"+t),/*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\nu.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},u.methodFactory=o||defaultMethodFactory,u.getLevel=function(){return i},u.setLevel=function(n,r){if(\"string\"==typeof n&&void 0!==u.levels[n.toUpperCase()]&&(n=u.levels[n.toUpperCase()]),!(\"number\"==typeof n&&n>=0&&n<=u.levels.SILENT))throw\"log.setLevel() called with invalid level: \"+n;if(i=n,!1!==r&&// defaults to true\npersistLevelIfPossible(n),replaceLoggingMethods.call(u,n,t),typeof console===e&&n<u.levels.SILENT)return\"No console available for logging\"},u.setDefaultLevel=function(t){getPersistedLevel()||u.setLevel(t,!1)},u.enableAll=function(t){u.setLevel(u.levels.TRACE,t)},u.disableAll=function(t){u.setLevel(u.levels.SILENT,t)};\n// Initialize with the right level\nvar s=getPersistedLevel();null==s&&(s=null==r?\"WARN\":r),u.setLevel(s,!1)}\n// Slightly dubious tricks to cut down minimized file size\nvar t=function(){},e=\"undefined\",n=[\"trace\",\"debug\",\"info\",\"warn\",\"error\"],r=new Logger,o={};r.getLogger=function(t){if(\"string\"!=typeof t||\"\"===t)throw new TypeError(\"You must supply a name when creating a logger.\");var e=o[t];return e||(e=o[t]=new Logger(t,r.getLevel(),r.methodFactory)),e};\n// Grab the current global log variable in case of overwrite\nvar i=typeof window!==e?window.log:void 0;return r.noConflict=function(){return typeof window!==e&&window.log===r&&(window.log=i),r},r})},/* 87 */\n/***/\nfunction(t,e,n){n(88),t.exports=n(0).Object.getPrototypeOf},/* 88 */\n/***/\nfunction(t,e,n){\n// 19.1.2.9 Object.getPrototypeOf(O)\nvar r=n(30),o=n(47);n(39)(\"getPrototypeOf\",function(){return function(t){return o(r(t))}})},/* 89 */\n/***/\nfunction(t,e,n){t.exports={default:n(90),__esModule:!0}},/* 90 */\n/***/\nfunction(t,e,n){n(43),n(48),t.exports=n(33).f(\"iterator\")},/* 91 */\n/***/\nfunction(t,e,n){t.exports={default:n(92),__esModule:!0}},/* 92 */\n/***/\nfunction(t,e,n){n(93),n(42),n(98),n(99),t.exports=n(0).Symbol},/* 93 */\n/***/\nfunction(t,e,n){\"use strict\";\n// ECMAScript 6 symbols shim\nvar r=n(1),o=n(9),i=n(5),u=n(3),c=n(45),s=n(94).KEY,f=n(13),a=n(28),l=n(24),p=n(19),v=n(2),d=n(33),h=n(34),_=n(95),y=n(96),b=n(4),g=n(10),m=n(26),w=n(18),x=n(31),O=n(97),M=n(40),S=n(6),P=n(20),L=M.f,j=S.f,k=O.f,E=r.Symbol,R=r.JSON,T=R&&R.stringify,C=v(\"_hidden\"),A=v(\"toPrimitive\"),D={}.propertyIsEnumerable,F=a(\"symbol-registry\"),q=a(\"symbols\"),I=a(\"op-symbols\"),N=Object.prototype,B=\"function\"==typeof E,W=r.QObject,G=!W||!W.prototype||!W.prototype.findChild,U=i&&f(function(){return 7!=x(j({},\"a\",{get:function(){return j(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=L(N,e);r&&delete N[e],j(t,e,n),r&&t!==N&&j(N,e,r)}:j,V=function(t){var e=q[t]=x(E.prototype);return e._k=t,e},H=B&&\"symbol\"==typeof E.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof E},K=function(t,e,n){return t===N&&K(I,e,n),b(t),e=m(e,!0),b(n),o(q,e)?(n.enumerable?(o(t,C)&&t[C][e]&&(t[C][e]=!1),n=x(n,{enumerable:w(0,!1)})):(o(t,C)||j(t,C,w(1,{})),t[C][e]=!0),U(t,e,n)):j(t,e,n)},J=function(t,e){b(t);for(var n,r=_(e=g(e)),o=0,i=r.length;i>o;)K(t,n=r[o++],e[n]);return t},Y=function(t,e){return void 0===e?x(t):J(x(t),e)},z=function(t){var e=D.call(this,t=m(t,!0));return!(this===N&&o(q,t)&&!o(I,t))&&(!(e||!o(this,t)||!o(q,t)||o(this,C)&&this[C][t])||e)},Q=function(t,e){if(t=g(t),e=m(e,!0),t!==N||!o(q,e)||o(I,e)){var n=L(t,e);return!n||!o(q,e)||o(t,C)&&t[C][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=k(g(t)),r=[],i=0;n.length>i;)o(q,e=n[i++])||e==C||e==s||r.push(e);return r},Z=function(t){for(var e,n=t===N,r=k(n?I:g(t)),i=[],u=0;r.length>u;)!o(q,e=r[u++])||n&&!o(N,e)||i.push(q[e]);return i};\n// 19.4.1.1 Symbol([description])\nB||(E=function(){if(this instanceof E)throw TypeError(\"Symbol is not a constructor!\");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===N&&e.call(I,n),o(this,C)&&o(this[C],t)&&(this[C][t]=!1),U(this,t,w(1,n))};return i&&G&&U(N,t,{configurable:!0,set:e}),V(t)},c(E.prototype,\"toString\",function(){return this._k}),M.f=Q,S.f=K,n(56).f=O.f=X,n(35).f=z,n(55).f=Z,i&&!n(23)&&c(N,\"propertyIsEnumerable\",z,!0),d.f=function(t){return V(v(t))}),u(u.G+u.W+u.F*!B,{Symbol:E});for(var $=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),tt=0;$.length>tt;)v($[tt++]);for(var et=P(v.store),nt=0;et.length>nt;)h(et[nt++]);u(u.S+u.F*!B,\"Symbol\",{\n// 19.4.2.1 Symbol.for(key)\nfor:function(t){return o(F,t+=\"\")?F[t]:F[t]=E(t)},\n// 19.4.2.5 Symbol.keyFor(sym)\nkeyFor:function(t){if(!H(t))throw TypeError(t+\" is not a symbol!\");for(var e in F)if(F[e]===t)return e},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!B,\"Object\",{\n// 19.1.2.2 Object.create(O [, Properties])\ncreate:Y,\n// 19.1.2.4 Object.defineProperty(O, P, Attributes)\ndefineProperty:K,\n// 19.1.2.3 Object.defineProperties(O, Properties)\ndefineProperties:J,\n// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\ngetOwnPropertyDescriptor:Q,\n// 19.1.2.7 Object.getOwnPropertyNames(O)\ngetOwnPropertyNames:X,\n// 19.1.2.8 Object.getOwnPropertySymbols(O)\ngetOwnPropertySymbols:Z}),\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\nR&&u(u.S+u.F*(!B||f(function(){var t=E();\n// MS Edge converts symbol values to JSON as {}\n// WebKit converts symbol values to JSON as null\n// V8 throws on boxed symbols\nreturn\"[null]\"!=T([t])||\"{}\"!=T({a:t})||\"{}\"!=T(Object(t))})),\"JSON\",{stringify:function(t){if(void 0!==t&&!H(t)){for(// IE8 returns string on undefined\nvar e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);return e=r[1],\"function\"==typeof e&&(n=e),!n&&y(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!H(e))return e}),r[1]=e,T.apply(R,r)}}}),\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\nE.prototype[A]||n(8)(E.prototype,A,E.prototype.valueOf),\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nl(E,\"Symbol\"),\n// 20.2.1.9 Math[@@toStringTag]\nl(Math,\"Math\",!0),\n// 24.3.3 JSON[@@toStringTag]\nl(r.JSON,\"JSON\",!0)},/* 94 */\n/***/\nfunction(t,e,n){var r=n(19)(\"meta\"),o=n(7),i=n(9),u=n(6).f,c=0,s=Object.isExtensible||function(){return!0},f=!n(13)(function(){return s(Object.preventExtensions({}))}),a=function(t){u(t,r,{value:{i:\"O\"+ ++c,// object ID\nw:{}}})},l=function(t,e){\n// return primitive with prefix\nif(!o(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!i(t,r)){\n// can't set metadata to uncaught frozen object\nif(!s(t))return\"F\";\n// not necessary to add metadata\nif(!e)return\"E\";\n// add missing metadata\na(t)}return t[r].i},p=function(t,e){if(!i(t,r)){\n// can't set metadata to uncaught frozen object\nif(!s(t))return!0;\n// not necessary to add metadata\nif(!e)return!1;\n// add missing metadata\na(t)}return t[r].w},v=function(t){return f&&d.NEED&&s(t)&&!i(t,r)&&a(t),t},d=t.exports={KEY:r,NEED:!1,fastKey:l,getWeak:p,onFreeze:v}},/* 95 */\n/***/\nfunction(t,e,n){\n// all enumerable object keys, includes symbols\nvar r=n(20),o=n(55),i=n(35);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,c=n(t),s=i.f,f=0;c.length>f;)s.call(t,u=c[f++])&&e.push(u);return e}},/* 96 */\n/***/\nfunction(t,e,n){\n// 7.2.2 IsArray(argument)\nvar r=n(15);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},/* 97 */\n/***/\nfunction(t,e,n){\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar r=n(10),o=n(56).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&\"[object Window]\"==i.call(t)?c(t):o(r(t))}},/* 98 */\n/***/\nfunction(t,e,n){n(34)(\"asyncIterator\")},/* 99 */\n/***/\nfunction(t,e,n){n(34)(\"observable\")},/* 100 */\n/***/\nfunction(t,e,n){t.exports={default:n(101),__esModule:!0}},/* 101 */\n/***/\nfunction(t,e,n){n(102),t.exports=n(0).Object.setPrototypeOf},/* 102 */\n/***/\nfunction(t,e,n){\n// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar r=n(3);r(r.S,\"Object\",{setPrototypeOf:n(103).set})},/* 103 */\n/***/\nfunction(t,e,n){\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar r=n(7),o=n(4),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?// eslint-disable-line\nfunction(t,e,r){try{r=n(14)(Function.call,n(40).f(Object.prototype,\"__proto__\").set,2),r(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},/* 104 */\n/***/\nfunction(t,e,n){t.exports={default:n(105),__esModule:!0}},/* 105 */\n/***/\nfunction(t,e,n){n(106);var r=n(0).Object;t.exports=function(t,e){return r.create(t,e)}},/* 106 */\n/***/\nfunction(t,e,n){var r=n(3);\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nr(r.S,\"Object\",{create:n(31)})},/* 107 */\n,/* 108 */\n,/* 109 */\n,/* 110 */\n,/* 111 */\n,/* 112 */\n,/* 113 */\n,/* 114 */\n,/* 115 */\n/***/\nfunction(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(63),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),c=n(12),s=_interopRequireDefault(c),f=n(64),a=_interopRequireDefault(f),l=n(65),p=_interopRequireDefault(l),v=n(116),d=_interopRequireDefault(v),h=function(t){function MiniBus(){return(0,u.default)(this,MiniBus),(0,a.default)(this,(MiniBus.__proto__||(0,o.default)(MiniBus)).call(this))}/**\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\n   * @return {number}                  the Message id\n   */\nreturn(0,p.default)(MiniBus,t),(0,s.default)(MiniBus,[{key:\"postMessage\",value:function(t,e){var n=this;\n//always send to external (to core MessageBus)\nreturn n._genId(t),n._responseCallback(t,e),n._onPostMessage(t),t.id}},{key:\"_onMessage\",value:function(t){var e=this;if(!e._onResponse(t)){var n=e._subscriptions[t.to];n?(e._publishOn(n,t),t.to.startsWith(\"hyperty\")||e._publishOnDefault(t)):e._publishOnDefault(t)}}}]),MiniBus}(d.default);/**\n                  * Copyright 2016 PT Inovação e Sistemas SA\n                  * Copyright 2016 INESC-ID\n                  * Copyright 2016 QUOBIS NETWORKS SL\n                  * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                  * Copyright 2016 ORANGE SA\n                  * Copyright 2016 Deutsche Telekom AG\n                  * Copyright 2016 Apizee\n                  * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                  *\n                  * Licensed under the Apache License, Version 2.0 (the \"License\");\n                  * you may not use this file except in compliance with the License.\n                  * You may obtain a copy of the License at\n                  *\n                  *   http://www.apache.org/licenses/LICENSE-2.0\n                  *\n                  * Unless required by applicable law or agreed to in writing, software\n                  * distributed under the License is distributed on an \"AS IS\" BASIS,\n                  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                  * See the License for the specific language governing permissions and\n                  * limitations under the License.\n                  **/\ne.default=h,t.exports=e.default},/* 116 */\n/***/\nfunction(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(41),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),c=n(12),s=_interopRequireDefault(c),f=n(86),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(f),l=a.getLogger(\"Bus\"),p=function(){/* private\n  _msgId: number;\n  _subscriptions: <url: MsgListener[]>\n   _responseTimeOut: number\n  _responseCallbacks: <url+id: (msg) => void>\n   */\nfunction Bus(){(0,u.default)(this,Bus);var t=this;t._msgId=0,t._subscriptions={},t._responseTimeOut=15e3,//default to 3s\nt._responseCallbacks={},t._registerExternalListener()}/**\n  * Register listener to receive message when \"msg.to === url\".\n  * Special url \"*\" for default listener is accepted to intercept all messages.\n  * @param {URL} url Address to intercept, tha is in the message \"to\"\n  * @param {Listener} listener listener\n  * @return {MsgListener} instance of MsgListener\n  */\nreturn(0,s.default)(Bus,[{key:\"addListener\",value:function(t,e){var n=this,r=new v(n._subscriptions,t,e),o=n._subscriptions[t];return o||(o=[],n._subscriptions[t]=o),o.push(r),r}},{key:\"addResponseListener\",value:function(t,e,n){this._responseCallbacks[t+e]=n}},{key:\"removeResponseListener\",value:function(t,e){delete this._responseCallbacks[t+e]}},{key:\"removeAllListenersOf\",value:function(t){delete this._subscriptions[t]}},{key:\"bind\",value:function(t,e,n){var r=this,o=this;return{thisListener:o.addListener(t,function(t){n.postMessage(t)}),targetListener:n.addListener(e,function(t){o.postMessage(t)}),unbind:function(){r.thisListener.remove(),r.targetListener.remove()}}}},{key:\"_publishOnDefault\",value:function(t){\n//is there any \"*\" (default) listeners?\nvar e=this._subscriptions[\"*\"];e&&this._publishOn(e,t)}},{key:\"_publishOn\",value:function(t,e){t.forEach(function(t){t._callback(e)})}},{key:\"_responseCallback\",value:function(t,e){var n=this;\n//automatic management of response handlers\nif(e){var r=t.from+t.id;n._responseCallbacks[r]=e,setTimeout(function(){var e=n._responseCallbacks[r];if(delete n._responseCallbacks[r],e){e({id:t.id,type:\"response\",body:{code:408,desc:\"Response timeout!\",value:t}})}},n._responseTimeOut)}}},{key:\"_onResponse\",value:function(t){var e=this;if(\"response\"===t.type){var n=t.to+t.id,r=e._responseCallbacks[n];if(t.body.code>=200&&\n//if it's a provisional response, don't delete response listener\ndelete e._responseCallbacks[n],r)return r(t),!0}return!1}},{key:\"_onMessage\",value:function(t){var e=this;if(!e._onResponse(t)){var n=e._subscriptions[t.to];n?e._publishOn(n,t):e._publishOnDefault(t)}}},{key:\"_genId\",value:function(t){\n//TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?\n//Global counter will not work, because there will be multiple MiniBus instances!\n//Per URL, can be a lot of data to maintain!\n//Maybe a counter per MiniBus instance. This is the assumed solution for now.\nt.id&&0!==t.id||(this._msgId++,t.id=this._msgId)}},{key:\"postMessage\",value:function(t,e){}},{key:\"postMessageWithRetries\",value:function(t,e,n){var r=this,i=0,u=function(){return new o.default(function(e,o){r.postMessage(t,function(r){408===r.body.code||500===r.body.code?o():(l.info(\"[Bus.postMessageWithRetries] msg delivered: \",t),n(r),e())})})};!function tryAgain(){u().then(function(){},function(){if(l.warn(\"[Bus.postMessageWithRetries] Message Bounced (retry \"+i+\"): '\",t),!(i++<e)){var n=\"[Error] Message Bounced (delivery attempts \"+e+\"): '\";throw new Error(n+t)}tryAgain()})}()}},{key:\"_onPostMessage\",value:function(t){}},{key:\"_registerExternalListener\",value:function(){}}]),Bus}(),v=function(){/* private\n  _subscriptions: <string: MsgListener[]>;\n  _url: string;\n  _callback: (msg) => void;\n  */\nfunction MsgListener(t,e,n){(0,u.default)(this,MsgListener);var r=this;r._subscriptions=t,r._url=e,r._callback=n}return(0,s.default)(MsgListener,[{key:\"remove\",/**\n     * Remove this listener from the Bus\n     */\nvalue:function(){var t=this,e=t._subscriptions[t._url];if(e){var n=e.indexOf(t);e.splice(n,1),\n//if there are no listeners, remove the subscription entirely.\n0===e.length&&delete t._subscriptions[t._url]}}},{key:\"url\",get:function(){return this._url}}]),MsgListener}();e.default=p,t.exports=e.default},/* 117 */\n,/* 118 */\n,/* 119 */\n,/* 120 */\n,/* 121 */\n,/* 122 */\n,/* 123 */\n,/* 124 */\n,/* 125 */\n,/* 126 */\n,/* 127 */\n,/* 128 */\n,/* 129 */\n,/* 130 */\n,/* 131 */\n,/* 132 */\n,/* 133 */\n,/* 134 */\n,/* 135 */\n/***/\nfunction(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(115),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=o.default,/**\n                                     * Copyright 2016 PT Inovação e Sistemas SA\n                                     * Copyright 2016 INESC-ID\n                                     * Copyright 2016 QUOBIS NETWORKS SL\n                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                     * Copyright 2016 ORANGE SA\n                                     * Copyright 2016 Deutsche Telekom AG\n                                     * Copyright 2016 Apizee\n                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                     *\n                                     * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                     * you may not use this file except in compliance with the License.\n                                     * You may obtain a copy of the License at\n                                     *\n                                     *   http://www.apache.org/licenses/LICENSE-2.0\n                                     *\n                                     * Unless required by applicable law or agreed to in writing, software\n                                     * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                     * See the License for the specific language governing permissions and\n                                     * limitations under the License.\n                                     **/\nt.exports=e.default}])});","// version: 0.10.0\n// date: Wed Nov 08 2017 12:28:40 GMT+0000 (WET)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n// version: 0.10.0\n// date: Wed Nov 08 2017 12:28:40 GMT+0000 (WET)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"sandbox\",[],t):\"object\"==typeof exports?exports.sandbox=t():e.sandbox=t()}(this,function(){/******/\nreturn function(e){/******/\n/******/\n// The require function\n/******/\nfunction __webpack_require__(n){/******/\n/******/\n// Check if module is in cache\n/******/\nif(t[n])/******/\nreturn t[n].exports;/******/\n// Create a new module (and put it into the cache)\n/******/\nvar r=t[n]={/******/\ni:n,/******/\nl:!1,/******/\nexports:{}};/******/\n/******/\n// Return the exports of the module\n/******/\n/******/\n/******/\n// Execute the module function\n/******/\n/******/\n/******/\n// Flag the module as loaded\n/******/\nreturn e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}// webpackBootstrap\n/******/\n// The module cache\n/******/\nvar t={};/******/\n/******/\n// Load entry module and return exports\n/******/\n/******/\n/******/\n/******/\n// expose the modules object (__webpack_modules__)\n/******/\n/******/\n/******/\n// expose the module cache\n/******/\n/******/\n/******/\n// define getter function for harmony exports\n/******/\n/******/\n/******/\n// getDefaultExport function for compatibility with non-harmony modules\n/******/\n/******/\n/******/\n// Object.prototype.hasOwnProperty.call\n/******/\n/******/\n/******/\n// __webpack_public_path__\n/******/\nreturn __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,n){/******/\n__webpack_require__.o(e,t)||/******/\nObject.defineProperty(e,t,{/******/\nconfigurable:!1,/******/\nenumerable:!0,/******/\nget:n})},__webpack_require__.n=function(e){/******/\nvar t=e&&e.__esModule?/******/\nfunction(){return e.default}:/******/\nfunction(){return e};/******/\n/******/\nreturn __webpack_require__.d(t,\"a\",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p=\"\",__webpack_require__(__webpack_require__.s=133)}([/* 0 */\n/***/\nfunction(e,t){var n=e.exports={version:\"2.5.1\"};\"number\"==typeof __e&&(__e=n)},/* 1 */\n/***/\nfunction(e,t){\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar n=e.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},/* 2 */\n/***/\nfunction(e,t,n){var r=n(28)(\"wks\"),o=n(19),i=n(1).Symbol,u=\"function\"==typeof i;(e.exports=function(e){return r[e]||(r[e]=u&&i[e]||(u?i:o)(\"Symbol.\"+e))}).store=r},/* 3 */\n/***/\nfunction(e,t,n){var r=n(1),o=n(0),i=n(14),u=n(8),s=function(e,t,n){var c,a,f,l=e&s.F,p=e&s.G,d=e&s.S,v=e&s.P,y=e&s.B,_=e&s.W,h=p?o:o[t]||(o[t]={}),b=h.prototype,g=p?r:d?r[t]:(r[t]||{}).prototype;p&&(n=t);for(c in n)\n// contains in native\n(a=!l&&g&&void 0!==g[c])&&c in h||(\n// export native or passed\nf=a?g[c]:n[c],\n// prevent global pollution for namespaces\nh[c]=p&&\"function\"!=typeof g[c]?n[c]:y&&a?i(f,r):_&&g[c]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):v&&\"function\"==typeof f?i(Function.call,f):f,\n// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\nv&&((h.virtual||(h.virtual={}))[c]=f,\n// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\ne&s.R&&b&&!b[c]&&u(b,c,f)))};\n// type bitmap\ns.F=1,// forced\ns.G=2,// global\ns.S=4,// static\ns.P=8,// proto\ns.B=16,// bind\ns.W=32,// wrap\ns.U=64,// safe\ns.R=128,// real proto method for `library`\ne.exports=s},/* 4 */\n/***/\nfunction(e,t,n){var r=n(7);e.exports=function(e){if(!r(e))throw TypeError(e+\" is not an object!\");return e}},/* 5 */\n/***/\nfunction(e,t,n){\n// Thank's IE8 for his funny defineProperty\ne.exports=!n(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},/* 6 */\n/***/\nfunction(e,t,n){var r=n(4),o=n(36),i=n(26),u=Object.defineProperty;t.f=n(5)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(e[t]=n.value),e}},/* 7 */\n/***/\nfunction(e,t){e.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},/* 8 */\n/***/\nfunction(e,t,n){var r=n(6),o=n(18);e.exports=n(5)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},/* 9 */\n/***/\nfunction(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},/* 10 */\n/***/\nfunction(e,t,n){\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar r=n(57),o=n(22);e.exports=function(e){return r(o(e))}},/* 11 */\n/***/\nfunction(e,t,n){\"use strict\";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}},/* 12 */\n/***/\nfunction(e,t,n){\"use strict\";t.__esModule=!0;var r=n(60),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,o.default)(e,r.key,r)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}()},/* 13 */\n/***/\nfunction(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},/* 14 */\n/***/\nfunction(e,t,n){\n// optional / simple context binding\nvar r=n(17);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},/* 15 */\n/***/\nfunction(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},/* 16 */\n/***/\nfunction(e,t){e.exports={}},/* 17 */\n/***/\nfunction(e,t){e.exports=function(e){if(\"function\"!=typeof e)throw TypeError(e+\" is not a function!\");return e}},/* 18 */\n/***/\nfunction(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},/* 19 */\n/***/\nfunction(e,t){var n=0,r=Math.random();e.exports=function(e){return\"Symbol(\".concat(void 0===e?\"\":e,\")_\",(++n+r).toString(36))}},/* 20 */\n/***/\nfunction(e,t,n){\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar r=n(37),o=n(29);e.exports=Object.keys||function(e){return r(e,o)}},/* 21 */\n/***/\nfunction(e,t){\n// 7.1.4 ToInteger\nvar n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},/* 22 */\n/***/\nfunction(e,t){\n// 7.2.1 RequireObjectCoercible(argument)\ne.exports=function(e){if(void 0==e)throw TypeError(\"Can't call method on  \"+e);return e}},/* 23 */\n/***/\nfunction(e,t){e.exports=!0},/* 24 */\n/***/\nfunction(e,t,n){var r=n(6).f,o=n(9),i=n(2)(\"toStringTag\");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},/* 25 */\n/***/\nfunction(e,t,n){var r=n(7),o=n(1).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},/* 26 */\n/***/\nfunction(e,t,n){\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar r=n(7);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\ne.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if(\"function\"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError(\"Can't convert object to primitive value\")}},/* 27 */\n/***/\nfunction(e,t,n){var r=n(28)(\"keys\"),o=n(19);e.exports=function(e){return r[e]||(r[e]=o(e))}},/* 28 */\n/***/\nfunction(e,t,n){var r=n(1),o=r[\"__core-js_shared__\"]||(r[\"__core-js_shared__\"]={});e.exports=function(e){return o[e]||(o[e]={})}},/* 29 */\n/***/\nfunction(e,t){\n// IE 8- don't enum bug keys\ne.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},/* 30 */\n/***/\nfunction(e,t,n){\n// 7.1.13 ToObject(argument)\nvar r=n(22);e.exports=function(e){return Object(r(e))}},/* 31 */\n/***/\nfunction(e,t,n){\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar r=n(4),o=n(69),i=n(29),u=n(27)(\"IE_PROTO\"),s=function(){},c=function(){\n// Thrash, waste and sodomy: IE GC bug\nvar e,t=n(25)(\"iframe\"),r=i.length;for(t.style.display=\"none\",n(46).appendChild(t),t.src=\"javascript:\",// eslint-disable-line no-script-url\n// createDict = iframe.contentWindow.Object;\n// html.removeChild(iframe);\ne=t.contentWindow.document,e.open(),e.write(\"<script>document.F=Object<\\/script>\"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;\n// add \"__proto__\" for Object.getPrototypeOf polyfill\nreturn null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[u]=e):n=c(),void 0===t?n:o(n,t)}},/* 32 */\n/***/\nfunction(e,t,n){\"use strict\";function PromiseCapability(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError(\"Bad Promise constructor\");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}\n// 25.4.1.5 NewPromiseCapability(C)\nvar r=n(17);e.exports.f=function(e){return new PromiseCapability(e)}},/* 33 */\n/***/\nfunction(e,t,n){t.f=n(2)},/* 34 */\n/***/\nfunction(e,t,n){var r=n(1),o=n(0),i=n(23),u=n(33),s=n(6).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});\"_\"==e.charAt(0)||e in t||s(t,e,{value:u.f(e)})}},/* 35 */\n/***/\nfunction(e,t){t.f={}.propertyIsEnumerable},/* 36 */\n/***/\nfunction(e,t,n){e.exports=!n(5)&&!n(13)(function(){return 7!=Object.defineProperty(n(25)(\"div\"),\"a\",{get:function(){return 7}}).a})},/* 37 */\n/***/\nfunction(e,t,n){var r=n(9),o=n(10),i=n(58)(!1),u=n(27)(\"IE_PROTO\");e.exports=function(e,t){var n,s=o(e),c=0,a=[];for(n in s)n!=u&&r(s,n)&&a.push(n);\n// Don't enum bug & hidden keys\nfor(;t.length>c;)r(s,n=t[c++])&&(~i(a,n)||a.push(n));return a}},/* 38 */\n/***/\nfunction(e,t,n){\n// 7.1.15 ToLength\nvar r=n(21),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},/* 39 */\n/***/\nfunction(e,t,n){\n// most Object methods by ES6 should accept primitives\nvar r=n(3),o=n(0),i=n(13);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],u={};u[e]=t(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},/* 40 */\n/***/\nfunction(e,t,n){var r=n(35),o=n(18),i=n(10),u=n(26),s=n(9),c=n(36),a=Object.getOwnPropertyDescriptor;t.f=n(5)?a:function(e,t){if(e=i(e),t=u(t,!0),c)try{return a(e,t)}catch(e){}if(s(e,t))return o(!r.f.call(e,t),e[t])}},/* 41 */\n/***/\nfunction(e,t,n){e.exports={default:n(66),__esModule:!0}},/* 42 */\n/***/\nfunction(e,t){},/* 43 */\n/***/\nfunction(e,t,n){\"use strict\";var r=n(67)(!0);\n// 21.1.3.27 String.prototype[@@iterator]()\nn(44)(String,\"String\",function(e){this._t=String(e),// target\nthis._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},/* 44 */\n/***/\nfunction(e,t,n){\"use strict\";var r=n(23),o=n(3),i=n(45),u=n(8),s=n(9),c=n(16),a=n(68),f=n(24),l=n(47),p=n(2)(\"iterator\"),d=!([].keys&&\"next\"in[].keys()),v=function(){return this};e.exports=function(e,t,n,y,_,h,b){a(n,t,y);var g,m,x,w=function(e){if(!d&&e in P)return P[e];switch(e){case\"keys\":case\"values\":return function(){return new n(this,e)}}return function(){return new n(this,e)}},O=t+\" Iterator\",S=\"values\"==_,M=!1,P=e.prototype,k=P[p]||P[\"@@iterator\"]||_&&P[_],R=k||w(_),L=_?S?w(\"entries\"):R:void 0,j=\"Array\"==t?P.entries||k:k;if(\n// Fix native\nj&&(x=l(j.call(new e)))!==Object.prototype&&x.next&&(\n// Set @@toStringTag to native iterators\nf(x,O,!0),\n// fix for some old engines\nr||s(x,p)||u(x,p,v)),\n// fix Array#{values, @@iterator}.name in V8 / FF\nS&&k&&\"values\"!==k.name&&(M=!0,R=function(){return k.call(this)}),\n// Define iterator\nr&&!b||!d&&!M&&P[p]||u(P,p,R),\n// Plug for library\nc[t]=R,c[O]=v,_)if(g={values:S?R:w(\"values\"),keys:h?R:w(\"keys\"),entries:L},b)for(m in g)m in P||i(P,m,g[m]);else o(o.P+o.F*(d||M),t,g);return g}},/* 45 */\n/***/\nfunction(e,t,n){e.exports=n(8)},/* 46 */\n/***/\nfunction(e,t,n){var r=n(1).document;e.exports=r&&r.documentElement},/* 47 */\n/***/\nfunction(e,t,n){\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar r=n(9),o=n(30),i=n(27)(\"IE_PROTO\"),u=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:\"function\"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},/* 48 */\n/***/\nfunction(e,t,n){n(70);for(var r=n(1),o=n(8),i=n(16),u=n(2)(\"toStringTag\"),s=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),c=0;c<s.length;c++){var a=s[c],f=r[a],l=f&&f.prototype;l&&!l[u]&&o(l,u,a),i[a]=i.Array}},/* 49 */\n/***/\nfunction(e,t,n){\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar r=n(15),o=n(2)(\"toStringTag\"),i=\"Arguments\"==r(function(){return arguments}()),u=function(e,t){try{return e[t]}catch(e){}};e.exports=function(e){var t,n,s;return void 0===e?\"Undefined\":null===e?\"Null\":\"string\"==typeof(n=u(t=Object(e),o))?n:i?r(t):\"Object\"==(s=r(t))&&\"function\"==typeof t.callee?\"Arguments\":s}},/* 50 */\n/***/\nfunction(e,t,n){\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar r=n(4),o=n(17),i=n(2)(\"species\");e.exports=function(e,t){var n,u=r(e).constructor;return void 0===u||void 0==(n=r(u)[i])?t:o(n)}},/* 51 */\n/***/\nfunction(e,t,n){var r,o,i,u=n(14),s=n(79),c=n(46),a=n(25),f=n(1),l=f.process,p=f.setImmediate,d=f.clearImmediate,v=f.MessageChannel,y=f.Dispatch,_=0,h={},b=function(){var e=+this;\n// eslint-disable-next-line no-prototype-builtins\nif(h.hasOwnProperty(e)){var t=h[e];delete h[e],t()}},g=function(e){b.call(e.data)};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\np&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return h[++_]=function(){\n// eslint-disable-next-line no-new-func\ns(\"function\"==typeof e?e:Function(e),t)},r(_),_},d=function(e){delete h[e]},\n// Node.js 0.8-\n\"process\"==n(15)(l)?r=function(e){l.nextTick(u(b,e,1))}:y&&y.now?r=function(e){y.now(u(b,e,1))}:v?(o=new v,i=o.port2,o.port1.onmessage=g,r=u(i.postMessage,i,1)):f.addEventListener&&\"function\"==typeof postMessage&&!f.importScripts?(r=function(e){f.postMessage(e+\"\",\"*\")},f.addEventListener(\"message\",g,!1)):r=\"onreadystatechange\"in a(\"script\")?function(e){c.appendChild(a(\"script\")).onreadystatechange=function(){c.removeChild(this),b.call(e)}}:function(e){setTimeout(u(b,e,1),0)}),e.exports={set:p,clear:d}},/* 52 */\n/***/\nfunction(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},/* 53 */\n/***/\nfunction(e,t,n){var r=n(4),o=n(7),i=n(32);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},/* 54 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var r=n(89),o=_interopRequireDefault(r),i=n(91),u=_interopRequireDefault(i),s=\"function\"==typeof u.default&&\"symbol\"==typeof o.default?function(e){return typeof e}:function(e){return e&&\"function\"==typeof u.default&&e.constructor===u.default&&e!==u.default.prototype?\"symbol\":typeof e};t.default=\"function\"==typeof u.default&&\"symbol\"===s(o.default)?function(e){return void 0===e?\"undefined\":s(e)}:function(e){return e&&\"function\"==typeof u.default&&e.constructor===u.default&&e!==u.default.prototype?\"symbol\":void 0===e?\"undefined\":s(e)}},/* 55 */\n/***/\nfunction(e,t){t.f=Object.getOwnPropertySymbols},/* 56 */\n/***/\nfunction(e,t,n){\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar r=n(37),o=n(29).concat(\"length\",\"prototype\");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},/* 57 */\n/***/\nfunction(e,t,n){\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar r=n(15);\n// eslint-disable-next-line no-prototype-builtins\ne.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(e){return\"String\"==r(e)?e.split(\"\"):Object(e)}},/* 58 */\n/***/\nfunction(e,t,n){\n// false -> Array#indexOf\n// true  -> Array#includes\nvar r=n(10),o=n(38),i=n(59);e.exports=function(e){return function(t,n,u){var s,c=r(t),a=o(c.length),f=i(u,a);\n// Array#includes uses SameValueZero equality algorithm\n// eslint-disable-next-line no-self-compare\nif(e&&n!=n){for(;a>f;)\n// eslint-disable-next-line no-self-compare\nif((s=c[f++])!=s)return!0}else for(;a>f;f++)if((e||f in c)&&c[f]===n)return e||f||0;return!e&&-1}}},/* 59 */\n/***/\nfunction(e,t,n){var r=n(21),o=Math.max,i=Math.min;e.exports=function(e,t){return e=r(e),e<0?o(e+t,0):i(e,t)}},/* 60 */\n/***/\nfunction(e,t,n){e.exports={default:n(61),__esModule:!0}},/* 61 */\n/***/\nfunction(e,t,n){n(62);var r=n(0).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},/* 62 */\n/***/\nfunction(e,t,n){var r=n(3);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\nr(r.S+r.F*!n(5),\"Object\",{defineProperty:n(6).f})},/* 63 */\n/***/\nfunction(e,t,n){e.exports={default:n(87),__esModule:!0}},/* 64 */\n/***/\nfunction(e,t,n){\"use strict\";t.__esModule=!0;var r=n(54),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!==(void 0===t?\"undefined\":(0,o.default)(t))&&\"function\"!=typeof t?e:t}},/* 65 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var r=n(100),o=_interopRequireDefault(r),i=n(104),u=_interopRequireDefault(i),s=n(54),c=_interopRequireDefault(s);t.default=function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+(void 0===t?\"undefined\":(0,c.default)(t)));e.prototype=(0,u.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.default?(0,o.default)(e,t):e.__proto__=t)}},/* 66 */\n/***/\nfunction(e,t,n){n(42),n(43),n(48),n(73),n(84),n(85),e.exports=n(0).Promise},/* 67 */\n/***/\nfunction(e,t,n){var r=n(21),o=n(22);\n// true  -> String#at\n// false -> String#codePointAt\ne.exports=function(e){return function(t,n){var i,u,s=String(o(t)),c=r(n),a=s.length;return c<0||c>=a?e?\"\":void 0:(i=s.charCodeAt(c),i<55296||i>56319||c+1===a||(u=s.charCodeAt(c+1))<56320||u>57343?e?s.charAt(c):i:e?s.slice(c,c+2):u-56320+(i-55296<<10)+65536)}}},/* 68 */\n/***/\nfunction(e,t,n){\"use strict\";var r=n(31),o=n(18),i=n(24),u={};\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nn(8)(u,n(2)(\"iterator\"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(u,{next:o(1,n)}),i(e,t+\" Iterator\")}},/* 69 */\n/***/\nfunction(e,t,n){var r=n(6),o=n(4),i=n(20);e.exports=n(5)?Object.defineProperties:function(e,t){o(e);for(var n,u=i(t),s=u.length,c=0;s>c;)r.f(e,n=u[c++],t[n]);return e}},/* 70 */\n/***/\nfunction(e,t,n){\"use strict\";var r=n(71),o=n(72),i=n(16),u=n(10);\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\ne.exports=n(44)(Array,\"Array\",function(e,t){this._t=u(e),// target\nthis._i=0,// next index\nthis._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):\"keys\"==t?o(0,n):\"values\"==t?o(0,e[n]):o(0,[n,e[n]])},\"values\"),\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\ni.Arguments=i.Array,r(\"keys\"),r(\"values\"),r(\"entries\")},/* 71 */\n/***/\nfunction(e,t){e.exports=function(){}},/* 72 */\n/***/\nfunction(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},/* 73 */\n/***/\nfunction(e,t,n){\"use strict\";var r,o,i,u,s=n(23),c=n(1),a=n(14),f=n(49),l=n(3),p=n(7),d=n(17),v=n(74),y=n(75),_=n(50),h=n(51).set,b=n(80)(),g=n(32),m=n(52),x=n(53),w=c.TypeError,O=c.process,S=c.Promise,M=\"process\"==f(O),P=function(){},k=o=g.f,R=!!function(){try{\n// correct subclassing with @@species support\nvar e=S.resolve(1),t=(e.constructor={})[n(2)(\"species\")]=function(e){e(P,P)};\n// unhandled rejections tracking support, NodeJS Promise without it fails @@species test\nreturn(M||\"function\"==typeof PromiseRejectionEvent)&&e.then(P)instanceof t}catch(e){}}(),L=function(e){var t;return!(!p(e)||\"function\"!=typeof(t=e.then))&&t},j=function(e,t){if(!e._n){e._n=!0;var n=e._c;b(function(){for(var r=e._v,o=1==e._s,i=0;n.length>i;)!function(t){var n,i,u=o?t.ok:t.fail,s=t.resolve,c=t.reject,a=t.domain;try{u?(o||(2==e._h&&T(e),e._h=1),!0===u?n=r:(a&&a.enter(),n=u(r),a&&a.exit()),n===t.promise?c(w(\"Promise-chain cycle\")):(i=L(n))?i.call(n,s,c):s(n)):c(r)}catch(e){c(e)}}(n[i++]);// variable length - can't use forEach\ne._c=[],e._n=!1,t&&!e._h&&D(e)})}},D=function(e){h.call(c,function(){var t,n,r,o=e._v,i=E(e);if(i&&(t=m(function(){M?O.emit(\"unhandledRejection\",o,e):(n=c.onunhandledrejection)?n({promise:e,reason:o}):(r=c.console)&&r.error&&r.error(\"Unhandled promise rejection\",o)}),\n// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\ne._h=M||E(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},E=function(e){if(1==e._h)return!1;for(var t,n=e._a||e._c,r=0;n.length>r;)if(t=n[r++],t.fail||!E(t.promise))return!1;return!0},T=function(e){h.call(c,function(){var t;M?O.emit(\"rejectionHandled\",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},q=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,// unwrap\nt._v=e,t._s=2,t._a||(t._a=t._c.slice()),j(t,!0))},A=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;// unwrap\ntry{if(n===e)throw w(\"Promise can't be resolved itself\");(t=L(e))?b(function(){var r={_w:n,_d:!1};// wrap\ntry{t.call(e,a(A,r,1),a(q,r,1))}catch(e){q.call(r,e)}}):(n._v=e,n._s=1,j(n,!1))}catch(e){q.call({_w:n,_d:!1},e)}}};\n// constructor polyfill\nR||(\n// 25.4.3.1 Promise(executor)\nS=function(e){v(this,S,\"Promise\",\"_h\"),d(e),r.call(this);try{e(a(A,this,1),a(q,this,1))}catch(e){q.call(this,e)}},\n// eslint-disable-next-line no-unused-vars\nr=function(e){this._c=[],// <- awaiting reactions\nthis._a=void 0,// <- checked in isUnhandled reactions\nthis._s=0,// <- state\nthis._d=!1,// <- done\nthis._v=void 0,// <- value\nthis._h=0,// <- rejection state, 0 - default, 1 - handled, 2 - unhandled\nthis._n=!1},r.prototype=n(81)(S.prototype,{\n// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\nthen:function(e,t){var n=k(_(this,S));return n.ok=\"function\"!=typeof e||e,n.fail=\"function\"==typeof t&&t,n.domain=M?O.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&j(this,!1),n.promise},\n// 25.4.5.1 Promise.prototype.catch(onRejected)\ncatch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=a(A,e,1),this.reject=a(q,e,1)},g.f=k=function(e){return e===S||e===u?new i(e):o(e)}),l(l.G+l.W+l.F*!R,{Promise:S}),n(24)(S,\"Promise\"),n(82)(\"Promise\"),u=n(0).Promise,\n// statics\nl(l.S+l.F*!R,\"Promise\",{\n// 25.4.4.5 Promise.reject(r)\nreject:function(e){var t=k(this);return(0,t.reject)(e),t.promise}}),l(l.S+l.F*(s||!R),\"Promise\",{\n// 25.4.4.6 Promise.resolve(x)\nresolve:function(e){return x(s&&this===u?S:this,e)}}),l(l.S+l.F*!(R&&n(83)(function(e){S.all(e).catch(P)})),\"Promise\",{\n// 25.4.4.1 Promise.all(iterable)\nall:function(e){var t=this,n=k(t),r=n.resolve,o=n.reject,i=m(function(){var n=[],i=0,u=1;y(e,!1,function(e){var s=i++,c=!1;n.push(void 0),u++,t.resolve(e).then(function(e){c||(c=!0,n[s]=e,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},\n// 25.4.4.4 Promise.race(iterable)\nrace:function(e){var t=this,n=k(t),r=n.reject,o=m(function(){y(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},/* 74 */\n/***/\nfunction(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+\": incorrect invocation!\");return e}},/* 75 */\n/***/\nfunction(e,t,n){var r=n(14),o=n(76),i=n(77),u=n(4),s=n(38),c=n(78),a={},f={},t=e.exports=function(e,t,n,l,p){var d,v,y,_,h=p?function(){return e}:c(e),b=r(n,l,t?2:1),g=0;if(\"function\"!=typeof h)throw TypeError(e+\" is not iterable!\");\n// fast case for arrays with default iterator\nif(i(h)){for(d=s(e.length);d>g;g++)if((_=t?b(u(v=e[g])[0],v[1]):b(e[g]))===a||_===f)return _}else for(y=h.call(e);!(v=y.next()).done;)if((_=o(y,b,v.value,t))===a||_===f)return _};t.BREAK=a,t.RETURN=f},/* 76 */\n/***/\nfunction(e,t,n){\n// call something on iterator step with safe closing on error\nvar r=n(4);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},/* 77 */\n/***/\nfunction(e,t,n){\n// check on default Array iterator\nvar r=n(16),o=n(2)(\"iterator\"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},/* 78 */\n/***/\nfunction(e,t,n){var r=n(49),o=n(2)(\"iterator\"),i=n(16);e.exports=n(0).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e[\"@@iterator\"]||i[r(e)]}},/* 79 */\n/***/\nfunction(e,t){\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\ne.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},/* 80 */\n/***/\nfunction(e,t,n){var r=n(1),o=n(51).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,s=r.Promise,c=\"process\"==n(15)(u);e.exports=function(){var e,t,n,a=function(){var r,o;for(c&&(r=u.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};\n// Node.js\nif(c)n=function(){u.nextTick(a)};else if(i){var f=!0,l=document.createTextNode(\"\");new i(a).observe(l,{characterData:!0}),// eslint-disable-line no-new\nn=function(){l.data=f=!f}}else if(s&&s.resolve){var p=s.resolve();n=function(){p.then(a)}}else n=function(){\n// strange IE + webpack dev server bug - use .call(global)\no.call(r,a)};return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},/* 81 */\n/***/\nfunction(e,t,n){var r=n(8);e.exports=function(e,t,n){for(var o in t)n&&e[o]?e[o]=t[o]:r(e,o,t[o]);return e}},/* 82 */\n/***/\nfunction(e,t,n){\"use strict\";var r=n(1),o=n(0),i=n(6),u=n(5),s=n(2)(\"species\");e.exports=function(e){var t=\"function\"==typeof o[e]?o[e]:r[e];u&&t&&!t[s]&&i.f(t,s,{configurable:!0,get:function(){return this}})}},/* 83 */\n/***/\nfunction(e,t,n){var r=n(2)(\"iterator\"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},\n// eslint-disable-next-line no-throw-literal\nArray.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},e(i)}catch(e){}return n}},/* 84 */\n/***/\nfunction(e,t,n){\"use strict\";\n// https://github.com/tc39/proposal-promise-finally\nvar r=n(3),o=n(0),i=n(1),u=n(50),s=n(53);r(r.P+r.R,\"Promise\",{finally:function(e){var t=u(this,o.Promise||i.Promise),n=\"function\"==typeof e;return this.then(n?function(n){return s(t,e()).then(function(){return n})}:e,n?function(n){return s(t,e()).then(function(){throw n})}:e)}})},/* 85 */\n/***/\nfunction(e,t,n){\"use strict\";\n// https://github.com/tc39/proposal-promise-try\nvar r=n(3),o=n(32),i=n(52);r(r.S,\"Promise\",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},/* 86 */\n/***/\nfunction(e,t,n){var r,o;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n!function(i,u){\"use strict\";r=u,void 0!==(o=\"function\"==typeof r?r.call(t,n,t,e):r)&&(e.exports=o)}(0,function(){\"use strict\";\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(e,t){var n=e[t];if(\"function\"==typeof n.bind)return n.bind(e);try{return Function.prototype.bind.call(n,e)}catch(t){\n// Missing bind shim or IE8 + Modernizr, fallback to wrapping\nreturn function(){return Function.prototype.apply.apply(n,[e,arguments])}}}\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(n){return\"debug\"===n&&(n=\"log\"),typeof console!==t&&(void 0!==console[n]?bindMethod(console,n):void 0!==console.log?bindMethod(console,\"log\"):e)}\n// These private functions always need `this` to be set properly\nfunction replaceLoggingMethods(t,r){/*jshint validthis:true */\nfor(var o=0;o<n.length;o++){var i=n[o];this[i]=o<t?e:this.methodFactory(i,t,r)}\n// Define log.log as an alias for log.debug\nthis.log=this.debug}\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(e,n,r){return function(){typeof console!==t&&(replaceLoggingMethods.call(this,n,r),this[e].apply(this,arguments))}}\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(e,t,n){/*jshint validthis:true */\nreturn realMethod(e)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(e,r,o){function persistLevelIfPossible(e){var r=(n[e]||\"silent\").toUpperCase();if(typeof window!==t){\n// Use localStorage if available\ntry{return void(window.localStorage[s]=r)}catch(e){}\n// Use session cookie as fallback\ntry{window.document.cookie=encodeURIComponent(s)+\"=\"+r+\";\"}catch(e){}}}function getPersistedLevel(){var e;if(typeof window!==t){try{e=window.localStorage[s]}catch(e){}\n// Fallback to cookies if local storage gives us nothing\nif(typeof e===t)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(s)+\"=\");-1!==r&&(e=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}\n// If the stored level is not valid, treat it as if nothing was stored.\nreturn void 0===u.levels[e]&&(e=void 0),e}}var i,u=this,s=\"loglevel\";e&&(s+=\":\"+e),/*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\nu.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},u.methodFactory=o||defaultMethodFactory,u.getLevel=function(){return i},u.setLevel=function(n,r){if(\"string\"==typeof n&&void 0!==u.levels[n.toUpperCase()]&&(n=u.levels[n.toUpperCase()]),!(\"number\"==typeof n&&n>=0&&n<=u.levels.SILENT))throw\"log.setLevel() called with invalid level: \"+n;if(i=n,!1!==r&&// defaults to true\npersistLevelIfPossible(n),replaceLoggingMethods.call(u,n,e),typeof console===t&&n<u.levels.SILENT)return\"No console available for logging\"},u.setDefaultLevel=function(e){getPersistedLevel()||u.setLevel(e,!1)},u.enableAll=function(e){u.setLevel(u.levels.TRACE,e)},u.disableAll=function(e){u.setLevel(u.levels.SILENT,e)};\n// Initialize with the right level\nvar c=getPersistedLevel();null==c&&(c=null==r?\"WARN\":r),u.setLevel(c,!1)}\n// Slightly dubious tricks to cut down minimized file size\nvar e=function(){},t=\"undefined\",n=[\"trace\",\"debug\",\"info\",\"warn\",\"error\"],r=new Logger,o={};r.getLogger=function(e){if(\"string\"!=typeof e||\"\"===e)throw new TypeError(\"You must supply a name when creating a logger.\");var t=o[e];return t||(t=o[e]=new Logger(e,r.getLevel(),r.methodFactory)),t};\n// Grab the current global log variable in case of overwrite\nvar i=typeof window!==t?window.log:void 0;return r.noConflict=function(){return typeof window!==t&&window.log===r&&(window.log=i),r},r})},/* 87 */\n/***/\nfunction(e,t,n){n(88),e.exports=n(0).Object.getPrototypeOf},/* 88 */\n/***/\nfunction(e,t,n){\n// 19.1.2.9 Object.getPrototypeOf(O)\nvar r=n(30),o=n(47);n(39)(\"getPrototypeOf\",function(){return function(e){return o(r(e))}})},/* 89 */\n/***/\nfunction(e,t,n){e.exports={default:n(90),__esModule:!0}},/* 90 */\n/***/\nfunction(e,t,n){n(43),n(48),e.exports=n(33).f(\"iterator\")},/* 91 */\n/***/\nfunction(e,t,n){e.exports={default:n(92),__esModule:!0}},/* 92 */\n/***/\nfunction(e,t,n){n(93),n(42),n(98),n(99),e.exports=n(0).Symbol},/* 93 */\n/***/\nfunction(e,t,n){\"use strict\";\n// ECMAScript 6 symbols shim\nvar r=n(1),o=n(9),i=n(5),u=n(3),s=n(45),c=n(94).KEY,a=n(13),f=n(28),l=n(24),p=n(19),d=n(2),v=n(33),y=n(34),_=n(95),h=n(96),b=n(4),g=n(10),m=n(26),x=n(18),w=n(31),O=n(97),S=n(40),M=n(6),P=n(20),k=S.f,R=M.f,L=O.f,j=r.Symbol,D=r.JSON,E=D&&D.stringify,T=d(\"_hidden\"),q=d(\"toPrimitive\"),A={}.propertyIsEnumerable,C=f(\"symbol-registry\"),I=f(\"symbols\"),F=f(\"op-symbols\"),N=Object.prototype,B=\"function\"==typeof j,W=r.QObject,G=!W||!W.prototype||!W.prototype.findChild,U=i&&a(function(){return 7!=w(R({},\"a\",{get:function(){return R(this,\"a\",{value:7}).a}})).a})?function(e,t,n){var r=k(N,t);r&&delete N[t],R(e,t,n),r&&e!==N&&R(N,t,r)}:R,V=function(e){var t=I[e]=w(j.prototype);return t._k=e,t},H=B&&\"symbol\"==typeof j.iterator?function(e){return\"symbol\"==typeof e}:function(e){return e instanceof j},K=function(e,t,n){return e===N&&K(F,t,n),b(e),t=m(t,!0),b(n),o(I,t)?(n.enumerable?(o(e,T)&&e[T][t]&&(e[T][t]=!1),n=w(n,{enumerable:x(0,!1)})):(o(e,T)||R(e,T,x(1,{})),e[T][t]=!0),U(e,t,n)):R(e,t,n)},J=function(e,t){b(e);for(var n,r=_(t=g(t)),o=0,i=r.length;i>o;)K(e,n=r[o++],t[n]);return e},Y=function(e,t){return void 0===t?w(e):J(w(e),t)},z=function(e){var t=A.call(this,e=m(e,!0));return!(this===N&&o(I,e)&&!o(F,e))&&(!(t||!o(this,e)||!o(I,e)||o(this,T)&&this[T][e])||t)},Q=function(e,t){if(e=g(e),t=m(t,!0),e!==N||!o(I,t)||o(F,t)){var n=k(e,t);return!n||!o(I,t)||o(e,T)&&e[T][t]||(n.enumerable=!0),n}},X=function(e){for(var t,n=L(g(e)),r=[],i=0;n.length>i;)o(I,t=n[i++])||t==T||t==c||r.push(t);return r},Z=function(e){for(var t,n=e===N,r=L(n?F:g(e)),i=[],u=0;r.length>u;)!o(I,t=r[u++])||n&&!o(N,t)||i.push(I[t]);return i};\n// 19.4.1.1 Symbol([description])\nB||(j=function(){if(this instanceof j)throw TypeError(\"Symbol is not a constructor!\");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===N&&t.call(F,n),o(this,T)&&o(this[T],e)&&(this[T][e]=!1),U(this,e,x(1,n))};return i&&G&&U(N,e,{configurable:!0,set:t}),V(e)},s(j.prototype,\"toString\",function(){return this._k}),S.f=Q,M.f=K,n(56).f=O.f=X,n(35).f=z,n(55).f=Z,i&&!n(23)&&s(N,\"propertyIsEnumerable\",z,!0),v.f=function(e){return V(d(e))}),u(u.G+u.W+u.F*!B,{Symbol:j});for(var $=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),ee=0;$.length>ee;)d($[ee++]);for(var te=P(d.store),ne=0;te.length>ne;)y(te[ne++]);u(u.S+u.F*!B,\"Symbol\",{\n// 19.4.2.1 Symbol.for(key)\nfor:function(e){return o(C,e+=\"\")?C[e]:C[e]=j(e)},\n// 19.4.2.5 Symbol.keyFor(sym)\nkeyFor:function(e){if(!H(e))throw TypeError(e+\" is not a symbol!\");for(var t in C)if(C[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!B,\"Object\",{\n// 19.1.2.2 Object.create(O [, Properties])\ncreate:Y,\n// 19.1.2.4 Object.defineProperty(O, P, Attributes)\ndefineProperty:K,\n// 19.1.2.3 Object.defineProperties(O, Properties)\ndefineProperties:J,\n// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\ngetOwnPropertyDescriptor:Q,\n// 19.1.2.7 Object.getOwnPropertyNames(O)\ngetOwnPropertyNames:X,\n// 19.1.2.8 Object.getOwnPropertySymbols(O)\ngetOwnPropertySymbols:Z}),\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\nD&&u(u.S+u.F*(!B||a(function(){var e=j();\n// MS Edge converts symbol values to JSON as {}\n// WebKit converts symbol values to JSON as null\n// V8 throws on boxed symbols\nreturn\"[null]\"!=E([e])||\"{}\"!=E({a:e})||\"{}\"!=E(Object(e))})),\"JSON\",{stringify:function(e){if(void 0!==e&&!H(e)){for(// IE8 returns string on undefined\nvar t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);return t=r[1],\"function\"==typeof t&&(n=t),!n&&h(t)||(t=function(e,t){if(n&&(t=n.call(this,e,t)),!H(t))return t}),r[1]=t,E.apply(D,r)}}}),\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\nj.prototype[q]||n(8)(j.prototype,q,j.prototype.valueOf),\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nl(j,\"Symbol\"),\n// 20.2.1.9 Math[@@toStringTag]\nl(Math,\"Math\",!0),\n// 24.3.3 JSON[@@toStringTag]\nl(r.JSON,\"JSON\",!0)},/* 94 */\n/***/\nfunction(e,t,n){var r=n(19)(\"meta\"),o=n(7),i=n(9),u=n(6).f,s=0,c=Object.isExtensible||function(){return!0},a=!n(13)(function(){return c(Object.preventExtensions({}))}),f=function(e){u(e,r,{value:{i:\"O\"+ ++s,// object ID\nw:{}}})},l=function(e,t){\n// return primitive with prefix\nif(!o(e))return\"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!i(e,r)){\n// can't set metadata to uncaught frozen object\nif(!c(e))return\"F\";\n// not necessary to add metadata\nif(!t)return\"E\";\n// add missing metadata\nf(e)}return e[r].i},p=function(e,t){if(!i(e,r)){\n// can't set metadata to uncaught frozen object\nif(!c(e))return!0;\n// not necessary to add metadata\nif(!t)return!1;\n// add missing metadata\nf(e)}return e[r].w},d=function(e){return a&&v.NEED&&c(e)&&!i(e,r)&&f(e),e},v=e.exports={KEY:r,NEED:!1,fastKey:l,getWeak:p,onFreeze:d}},/* 95 */\n/***/\nfunction(e,t,n){\n// all enumerable object keys, includes symbols\nvar r=n(20),o=n(55),i=n(35);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var u,s=n(e),c=i.f,a=0;s.length>a;)c.call(e,u=s[a++])&&t.push(u);return t}},/* 96 */\n/***/\nfunction(e,t,n){\n// 7.2.2 IsArray(argument)\nvar r=n(15);e.exports=Array.isArray||function(e){return\"Array\"==r(e)}},/* 97 */\n/***/\nfunction(e,t,n){\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar r=n(10),o=n(56).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(e){return u.slice()}};e.exports.f=function(e){return u&&\"[object Window]\"==i.call(e)?s(e):o(r(e))}},/* 98 */\n/***/\nfunction(e,t,n){n(34)(\"asyncIterator\")},/* 99 */\n/***/\nfunction(e,t,n){n(34)(\"observable\")},/* 100 */\n/***/\nfunction(e,t,n){e.exports={default:n(101),__esModule:!0}},/* 101 */\n/***/\nfunction(e,t,n){n(102),e.exports=n(0).Object.setPrototypeOf},/* 102 */\n/***/\nfunction(e,t,n){\n// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar r=n(3);r(r.S,\"Object\",{setPrototypeOf:n(103).set})},/* 103 */\n/***/\nfunction(e,t,n){\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar r=n(7),o=n(4),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+\": can't set as prototype!\")};e.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?// eslint-disable-line\nfunction(e,t,r){try{r=n(14)(Function.call,n(40).f(Object.prototype,\"__proto__\").set,2),r(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},/* 104 */\n/***/\nfunction(e,t,n){e.exports={default:n(105),__esModule:!0}},/* 105 */\n/***/\nfunction(e,t,n){n(106);var r=n(0).Object;e.exports=function(e,t){return r.create(e,t)}},/* 106 */\n/***/\nfunction(e,t,n){var r=n(3);\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nr(r.S,\"Object\",{create:n(31)})},/* 107 */\n/***/\nfunction(e,t,n){e.exports={default:n(108),__esModule:!0}},/* 108 */\n/***/\nfunction(e,t,n){n(109),e.exports=n(0).Object.keys},/* 109 */\n/***/\nfunction(e,t,n){\n// 19.1.2.14 Object.keys(O)\nvar r=n(30),o=n(20);n(39)(\"keys\",function(){return function(e){return o(r(e))}})},/* 110 */\n,/* 111 */\n,/* 112 */\n,/* 113 */\n,/* 114 */\n,/* 115 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(63),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),s=n(12),c=_interopRequireDefault(s),a=n(64),f=_interopRequireDefault(a),l=n(65),p=_interopRequireDefault(l),d=n(116),v=_interopRequireDefault(d),y=function(e){function MiniBus(){return(0,u.default)(this,MiniBus),(0,f.default)(this,(MiniBus.__proto__||(0,o.default)(MiniBus)).call(this))}/**\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\n   * @return {number}                  the Message id\n   */\nreturn(0,p.default)(MiniBus,e),(0,c.default)(MiniBus,[{key:\"postMessage\",value:function(e,t){var n=this;\n//always send to external (to core MessageBus)\nreturn n._genId(e),n._responseCallback(e,t),n._onPostMessage(e),e.id}},{key:\"_onMessage\",value:function(e){var t=this;if(!t._onResponse(e)){var n=t._subscriptions[e.to];n?(t._publishOn(n,e),e.to.startsWith(\"hyperty\")||t._publishOnDefault(e)):t._publishOnDefault(e)}}}]),MiniBus}(v.default);/**\n                  * Copyright 2016 PT Inovação e Sistemas SA\n                  * Copyright 2016 INESC-ID\n                  * Copyright 2016 QUOBIS NETWORKS SL\n                  * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                  * Copyright 2016 ORANGE SA\n                  * Copyright 2016 Deutsche Telekom AG\n                  * Copyright 2016 Apizee\n                  * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                  *\n                  * Licensed under the Apache License, Version 2.0 (the \"License\");\n                  * you may not use this file except in compliance with the License.\n                  * You may obtain a copy of the License at\n                  *\n                  *   http://www.apache.org/licenses/LICENSE-2.0\n                  *\n                  * Unless required by applicable law or agreed to in writing, software\n                  * distributed under the License is distributed on an \"AS IS\" BASIS,\n                  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                  * See the License for the specific language governing permissions and\n                  * limitations under the License.\n                  **/\nt.default=y,e.exports=t.default},/* 116 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(41),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),s=n(12),c=_interopRequireDefault(s),a=n(86),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(a),l=f.getLogger(\"Bus\"),p=function(){/* private\n  _msgId: number;\n  _subscriptions: <url: MsgListener[]>\n   _responseTimeOut: number\n  _responseCallbacks: <url+id: (msg) => void>\n   */\nfunction Bus(){(0,u.default)(this,Bus);var e=this;e._msgId=0,e._subscriptions={},e._responseTimeOut=15e3,//default to 3s\ne._responseCallbacks={},e._registerExternalListener()}/**\n  * Register listener to receive message when \"msg.to === url\".\n  * Special url \"*\" for default listener is accepted to intercept all messages.\n  * @param {URL} url Address to intercept, tha is in the message \"to\"\n  * @param {Listener} listener listener\n  * @return {MsgListener} instance of MsgListener\n  */\nreturn(0,c.default)(Bus,[{key:\"addListener\",value:function(e,t){var n=this,r=new d(n._subscriptions,e,t),o=n._subscriptions[e];return o||(o=[],n._subscriptions[e]=o),o.push(r),r}},{key:\"addResponseListener\",value:function(e,t,n){this._responseCallbacks[e+t]=n}},{key:\"removeResponseListener\",value:function(e,t){delete this._responseCallbacks[e+t]}},{key:\"removeAllListenersOf\",value:function(e){delete this._subscriptions[e]}},{key:\"bind\",value:function(e,t,n){var r=this,o=this;return{thisListener:o.addListener(e,function(e){n.postMessage(e)}),targetListener:n.addListener(t,function(e){o.postMessage(e)}),unbind:function(){r.thisListener.remove(),r.targetListener.remove()}}}},{key:\"_publishOnDefault\",value:function(e){\n//is there any \"*\" (default) listeners?\nvar t=this._subscriptions[\"*\"];t&&this._publishOn(t,e)}},{key:\"_publishOn\",value:function(e,t){e.forEach(function(e){e._callback(t)})}},{key:\"_responseCallback\",value:function(e,t){var n=this;\n//automatic management of response handlers\nif(t){var r=e.from+e.id;n._responseCallbacks[r]=t,setTimeout(function(){var t=n._responseCallbacks[r];if(delete n._responseCallbacks[r],t){t({id:e.id,type:\"response\",body:{code:408,desc:\"Response timeout!\",value:e}})}},n._responseTimeOut)}}},{key:\"_onResponse\",value:function(e){var t=this;if(\"response\"===e.type){var n=e.to+e.id,r=t._responseCallbacks[n];if(e.body.code>=200&&\n//if it's a provisional response, don't delete response listener\ndelete t._responseCallbacks[n],r)return r(e),!0}return!1}},{key:\"_onMessage\",value:function(e){var t=this;if(!t._onResponse(e)){var n=t._subscriptions[e.to];n?t._publishOn(n,e):t._publishOnDefault(e)}}},{key:\"_genId\",value:function(e){\n//TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?\n//Global counter will not work, because there will be multiple MiniBus instances!\n//Per URL, can be a lot of data to maintain!\n//Maybe a counter per MiniBus instance. This is the assumed solution for now.\ne.id&&0!==e.id||(this._msgId++,e.id=this._msgId)}},{key:\"postMessage\",value:function(e,t){}},{key:\"postMessageWithRetries\",value:function(e,t,n){var r=this,i=0,u=function(){return new o.default(function(t,o){r.postMessage(e,function(r){408===r.body.code||500===r.body.code?o():(l.info(\"[Bus.postMessageWithRetries] msg delivered: \",e),n(r),t())})})};!function tryAgain(){u().then(function(){},function(){if(l.warn(\"[Bus.postMessageWithRetries] Message Bounced (retry \"+i+\"): '\",e),!(i++<t)){var n=\"[Error] Message Bounced (delivery attempts \"+t+\"): '\";throw new Error(n+e)}tryAgain()})}()}},{key:\"_onPostMessage\",value:function(e){}},{key:\"_registerExternalListener\",value:function(){}}]),Bus}(),d=function(){/* private\n  _subscriptions: <string: MsgListener[]>;\n  _url: string;\n  _callback: (msg) => void;\n  */\nfunction MsgListener(e,t,n){(0,u.default)(this,MsgListener);var r=this;r._subscriptions=e,r._url=t,r._callback=n}return(0,c.default)(MsgListener,[{key:\"remove\",/**\n     * Remove this listener from the Bus\n     */\nvalue:function(){var e=this,t=e._subscriptions[e._url];if(t){var n=t.indexOf(e);t.splice(n,1),\n//if there are no listeners, remove the subscription entirely.\n0===t.length&&delete e._subscriptions[e._url]}}},{key:\"url\",get:function(){return this._url}}]),MsgListener}();t.default=p,e.exports=t.default},/* 117 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(11),o=_interopRequireDefault(r),i=n(12),u=_interopRequireDefault(i),s=function(){/* private\n  _components: <url: instance>\n  */\nfunction SandboxRegistry(e){(0,o.default)(this,SandboxRegistry);var t=this;t._bus=e,t._components={},e.addListener(SandboxRegistry.InternalDeployAddress,function(e){\n//console.log('SandboxRegistry-RCV: ', msg);\n// let responseMsg = {\n//   id: msg.id, type: 'response', from: SandboxRegistry.InternalDeployAddress, to: SandboxRegistry.ExternalDeployAddress\n// };\nswitch(e.type){case\"create\":t._onDeploy(e);break;case\"delete\":t._onRemove(e)}})}return(0,u.default)(SandboxRegistry,[{key:\"_responseMsg\",value:function(e,t,n){var r={id:e.id,type:\"response\",from:SandboxRegistry.InternalDeployAddress,to:SandboxRegistry.ExternalDeployAddress},o={};\n// return messageFactory.createResponse(msg, code, value);\nreturn t&&(o.code=t),n&&(o.desc=n),r.body=o,r}},{key:\"_onDeploy\",value:function(e){var t=this,n=e.body.config,r=e.body.url,o=e.body.sourceCode,i=void 0,u=void 0;if(t._components.hasOwnProperty(r))i=500,u=\"Instance \"+r+\" already exist!\";else try{t._components[r]=t._create(r,o,n),i=200}catch(e){i=500,u=e}var s=t._responseMsg(e,i,u);t._bus.postMessage(s)}},{key:\"_onRemove\",value:function(e){var t=this,n=e.body.url,r=void 0,o=void 0;t._components.hasOwnProperty(n)?(\n//remove component from the pool and all listeners\ndelete t._components[n],t._bus.removeAllListenersOf(n),r=200):(r=500,o=\"Instance \"+n+\" doesn't exist!\");var i=t._responseMsg(e,r,o);t._bus.postMessage(i)}},{key:\"_create\",value:function(e,t,n){}},{key:\"components\",get:function(){return this._components}}]),SandboxRegistry}();s.ExternalDeployAddress=\"hyperty-runtime://sandbox/external\",s.InternalDeployAddress=\"hyperty-runtime://sandbox/internal\",t.default=s,e.exports=t.default},/* 118 */\n,/* 119 */\n,/* 120 */\n,/* 121 */\n,/* 122 */\n,/* 123 */\n,/* 124 */\n,/* 125 */\n,/* 126 */\n,/* 127 */\n,/* 128 */\n,/* 129 */\n,/* 130 */\n,/* 131 */\n,/* 132 */\n,/* 133 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.SandboxRegistry=t.SandboxType=t.Sandbox=void 0;var r=n(134),o=_interopRequireDefault(r),i=n(117),u=_interopRequireDefault(i);t.Sandbox=o.default,t.SandboxType=r.SandboxType,t.SandboxRegistry=u.default},/* 134 */\n/***/\nfunction(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.SandboxType=void 0;var r=n(107),o=_interopRequireDefault(r),i=n(41),u=_interopRequireDefault(i),s=n(63),c=_interopRequireDefault(s),a=n(11),f=_interopRequireDefault(a),l=n(12),p=_interopRequireDefault(l),d=n(64),v=_interopRequireDefault(d),y=n(65),_=_interopRequireDefault(y),h=n(117),b=_interopRequireDefault(h),g=n(115),m=_interopRequireDefault(g),x=(t.SandboxType={APP:\"app\",NORMAL:\"normal\",WINDOW:\"window\"},function(e){function Sandbox(e){(0,f.default)(this,Sandbox);var t=(0,v.default)(this,(Sandbox.__proto__||(0,c.default)(Sandbox)).call(this)),n=t;return e&&(n.capabilities=e),t}/**\n   * Deploy an instance of the component into the sandbox.\n   * @param  {string} componentSourceCode Component source code (Hyperty, ProtoStub, etc)\n   * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\n   * @param  {Config} configuration Config parameters of the component\n   * @return {Promise<string>} return deployed if successful, or any other string with an error\n   */\nreturn(0,_.default)(Sandbox,e),(0,p.default)(Sandbox,[{key:\"deployComponent\",value:function(e,t,n){var r=this;\n// let messageFactory = _this.messageFactory;\nreturn new u.default(function(o,i){\n//FLOW-OUT: deploy message for the internal SandboxRegistry -> _onDeploy\nvar u={type:\"create\",from:b.default.ExternalDeployAddress,to:b.default.InternalDeployAddress,body:{url:t,sourceCode:e,config:n}};\n//send message into the sandbox internals and wait for reply\nr.postMessage(u,function(e){200===e.body.code?\n//is this response complaint with the spec?\no(\"deployed\"):i(e.body.desc)})})}},{key:\"removeComponent\",value:function(e){var t=this;return new u.default(function(n,r){\n//FLOW-OUT: un-deploy message for the internal SandboxRegistry -> _onRemove\nvar o={type:\"delete\",from:b.default.ExternalDeployAddress,to:b.default.InternalDeployAddress,body:{url:e}};\n//send message into the sandbox internals and wait for reply\nt.postMessage(o,function(e){200===e.body.code?\n//is this response complaint with the spec?\nn(\"undeployed\"):r(e.body.desc)})})}},{key:\"matches\",value:function(e){var t=this,n=(0,o.default)(e).filter(function(n){return!(t.capabilities[n]&&t.capabilities[n]===e[n])});return 0===n.length||!e[n]}}]),Sandbox}(m.default));t.default=x}])});","/*!\n * URI.js - Mutating URLs\n * IPv6 Support\n *\n * Version: 1.19.0\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.IPv6 = factory(root);\n  }\n}(this, function (root) {\n  'use strict';\n\n  /*\n  var _in = \"fe80:0000:0000:0000:0204:61ff:fe9d:f156\";\n  var _out = IPv6.best(_in);\n  var _expected = \"fe80::204:61ff:fe9d:f156\";\n\n  console.log(_in, _out, _expected, _out === _expected);\n  */\n\n  // save current IPv6 variable, if any\n  var _IPv6 = root && root.IPv6;\n\n  function bestPresentation(address) {\n    // based on:\n    // Javascript to test an IPv6 address for proper format, and to\n    // present the \"best text representation\" according to IETF Draft RFC at\n    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04\n    // 8 Feb 2010 Rich Brown, Dartware, LLC\n    // Please feel free to use this code as long as you provide a link to\n    // http://www.intermapper.com\n    // http://intermapper.com/support/tools/IPV6-Validator.aspx\n    // http://download.dartware.com/thirdparty/ipv6validator.js\n\n    var _address = address.toLowerCase();\n    var segments = _address.split(':');\n    var length = segments.length;\n    var total = 8;\n\n    // trim colons (:: or ::a:b:c… or …a:b:c::)\n    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {\n      // must have been ::\n      // remove first two items\n      segments.shift();\n      segments.shift();\n    } else if (segments[0] === '' && segments[1] === '') {\n      // must have been ::xxxx\n      // remove the first item\n      segments.shift();\n    } else if (segments[length - 1] === '' && segments[length - 2] === '') {\n      // must have been xxxx::\n      segments.pop();\n    }\n\n    length = segments.length;\n\n    // adjust total segments for IPv4 trailer\n    if (segments[length - 1].indexOf('.') !== -1) {\n      // found a \".\" which means IPv4\n      total = 7;\n    }\n\n    // fill empty segments them with \"0000\"\n    var pos;\n    for (pos = 0; pos < length; pos++) {\n      if (segments[pos] === '') {\n        break;\n      }\n    }\n\n    if (pos < total) {\n      segments.splice(pos, 1, '0000');\n      while (segments.length < total) {\n        segments.splice(pos, 0, '0000');\n      }\n    }\n\n    // strip leading zeros\n    var _segments;\n    for (var i = 0; i < total; i++) {\n      _segments = segments[i].split('');\n      for (var j = 0; j < 3 ; j++) {\n        if (_segments[0] === '0' && _segments.length > 1) {\n          _segments.splice(0,1);\n        } else {\n          break;\n        }\n      }\n\n      segments[i] = _segments.join('');\n    }\n\n    // find longest sequence of zeroes and coalesce them into one segment\n    var best = -1;\n    var _best = 0;\n    var _current = 0;\n    var current = -1;\n    var inzeroes = false;\n    // i; already declared\n\n    for (i = 0; i < total; i++) {\n      if (inzeroes) {\n        if (segments[i] === '0') {\n          _current += 1;\n        } else {\n          inzeroes = false;\n          if (_current > _best) {\n            best = current;\n            _best = _current;\n          }\n        }\n      } else {\n        if (segments[i] === '0') {\n          inzeroes = true;\n          current = i;\n          _current = 1;\n        }\n      }\n    }\n\n    if (_current > _best) {\n      best = current;\n      _best = _current;\n    }\n\n    if (_best > 1) {\n      segments.splice(best, _best, '');\n    }\n\n    length = segments.length;\n\n    // assemble remaining segments\n    var result = '';\n    if (segments[0] === '')  {\n      result = ':';\n    }\n\n    for (i = 0; i < length; i++) {\n      result += segments[i];\n      if (i === length - 1) {\n        break;\n      }\n\n      result += ':';\n    }\n\n    if (segments[length - 1] === '') {\n      result += ':';\n    }\n\n    return result;\n  }\n\n  function noConflict() {\n    /*jshint validthis: true */\n    if (root.IPv6 === this) {\n      root.IPv6 = _IPv6;\n    }\n\n    return this;\n  }\n\n  return {\n    best: bestPresentation,\n    noConflict: noConflict\n  };\n}));\n","/*!\n * URI.js - Mutating URLs\n * Second Level Domain (SLD) Support\n *\n * Version: 1.19.0\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.SecondLevelDomains = factory(root);\n  }\n}(this, function (root) {\n  'use strict';\n\n  // save current SecondLevelDomains variable, if any\n  var _SecondLevelDomains = root && root.SecondLevelDomains;\n\n  var SLD = {\n    // list of known Second Level Domains\n    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains\n    // ----\n    // publicsuffix.org is more current and actually used by a couple of browsers internally.\n    // downside is it also contains domains like \"dyndns.org\" - which is fine for the security\n    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js\n    // ----\n    list: {\n      'ac':' com gov mil net org ',\n      'ae':' ac co gov mil name net org pro sch ',\n      'af':' com edu gov net org ',\n      'al':' com edu gov mil net org ',\n      'ao':' co ed gv it og pb ',\n      'ar':' com edu gob gov int mil net org tur ',\n      'at':' ac co gv or ',\n      'au':' asn com csiro edu gov id net org ',\n      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',\n      'bb':' biz co com edu gov info net org store tv ',\n      'bh':' biz cc com edu gov info net org ',\n      'bn':' com edu gov net org ',\n      'bo':' com edu gob gov int mil net org tv ',\n      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',\n      'bs':' com edu gov net org ',\n      'bz':' du et om ov rg ',\n      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',\n      'ck':' biz co edu gen gov info net org ',\n      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',\n      'co':' com edu gov mil net nom org ',\n      'cr':' ac c co ed fi go or sa ',\n      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',\n      'do':' art com edu gob gov mil net org sld web ',\n      'dz':' art asso com edu gov net org pol ',\n      'ec':' com edu fin gov info med mil net org pro ',\n      'eg':' com edu eun gov mil name net org sci ',\n      'er':' com edu gov ind mil net org rochest w ',\n      'es':' com edu gob nom org ',\n      'et':' biz com edu gov info name net org ',\n      'fj':' ac biz com info mil name net org pro ',\n      'fk':' ac co gov net nom org ',\n      'fr':' asso com f gouv nom prd presse tm ',\n      'gg':' co net org ',\n      'gh':' com edu gov mil org ',\n      'gn':' ac com gov net org ',\n      'gr':' com edu gov mil net org ',\n      'gt':' com edu gob ind mil net org ',\n      'gu':' com edu gov net org ',\n      'hk':' com edu gov idv net org ',\n      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',\n      'id':' ac co go mil net or sch web ',\n      'il':' ac co gov idf k12 muni net org ',\n      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',\n      'iq':' com edu gov i mil net org ',\n      'ir':' ac co dnssec gov i id net org sch ',\n      'it':' edu gov ',\n      'je':' co net org ',\n      'jo':' com edu gov mil name net org sch ',\n      'jp':' ac ad co ed go gr lg ne or ',\n      'ke':' ac co go info me mobi ne or sc ',\n      'kh':' com edu gov mil net org per ',\n      'ki':' biz com de edu gov info mob net org tel ',\n      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',\n      'kn':' edu gov net org ',\n      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',\n      'kw':' com edu gov net org ',\n      'ky':' com edu gov net org ',\n      'kz':' com edu gov mil net org ',\n      'lb':' com edu gov net org ',\n      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',\n      'lr':' com edu gov net org ',\n      'lv':' asn com conf edu gov id mil net org ',\n      'ly':' com edu gov id med net org plc sch ',\n      'ma':' ac co gov m net org press ',\n      'mc':' asso tm ',\n      'me':' ac co edu gov its net org priv ',\n      'mg':' com edu gov mil nom org prd tm ',\n      'mk':' com edu gov inf name net org pro ',\n      'ml':' com edu gov net org presse ',\n      'mn':' edu gov org ',\n      'mo':' com edu gov net org ',\n      'mt':' com edu gov net org ',\n      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',\n      'mw':' ac co com coop edu gov int museum net org ',\n      'mx':' com edu gob net org ',\n      'my':' com edu gov mil name net org sch ',\n      'nf':' arts com firm info net other per rec store web ',\n      'ng':' biz com edu gov mil mobi name net org sch ',\n      'ni':' ac co com edu gob mil net nom org ',\n      'np':' com edu gov mil net org ',\n      'nr':' biz com edu gov info net org ',\n      'om':' ac biz co com edu gov med mil museum net org pro sch ',\n      'pe':' com edu gob mil net nom org sld ',\n      'ph':' com edu gov i mil net ngo org ',\n      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',\n      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',\n      'pr':' ac biz com edu est gov info isla name net org pro prof ',\n      'ps':' com edu gov net org plo sec ',\n      'pw':' belau co ed go ne or ',\n      'ro':' arts com firm info nom nt org rec store tm www ',\n      'rs':' ac co edu gov in org ',\n      'sb':' com edu gov net org ',\n      'sc':' com edu gov net org ',\n      'sh':' co com edu gov net nom org ',\n      'sl':' com edu gov net org ',\n      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',\n      'sv':' com edu gob org red ',\n      'sz':' ac co org ',\n      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',\n      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',\n      'tw':' club com ebiz edu game gov idv mil net org ',\n      'mu':' ac co com gov net or org ',\n      'mz':' ac co edu gov org ',\n      'na':' co com ',\n      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',\n      'pa':' abo ac com edu gob ing med net nom org sld ',\n      'pt':' com edu gov int net nome org publ ',\n      'py':' com edu gov mil net org ',\n      'qa':' com edu gov mil net org ',\n      're':' asso com nom ',\n      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',\n      'rw':' ac co com edu gouv gov int mil net ',\n      'sa':' com edu gov med net org pub sch ',\n      'sd':' com edu gov info med net org tv ',\n      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',\n      'sg':' com edu gov idn net org per ',\n      'sn':' art com edu gouv org perso univ ',\n      'sy':' com edu gov mil net news org ',\n      'th':' ac co go in mi net or ',\n      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',\n      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',\n      'tz':' ac co go ne or ',\n      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',\n      'ug':' ac co go ne or org sc ',\n      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',\n      'us':' dni fed isa kids nsn ',\n      'uy':' com edu gub mil net org ',\n      've':' co com edu gob info mil net org web ',\n      'vi':' co com k12 net org ',\n      'vn':' ac biz com edu gov health info int name net org pro ',\n      'ye':' co com gov ltd me net org plc ',\n      'yu':' ac co edu gov org ',\n      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',\n      'zm':' ac co com edu gov net org sch ',\n      // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains\n      'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',\n      'net': 'gb jp se uk ',\n      'org': 'ae',\n      'de': 'com '\n    },\n    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost\n    // in both performance and memory footprint. No initialization required.\n    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4\n    // Following methods use lastIndexOf() rather than array.split() in order\n    // to avoid any memory allocations.\n    has: function(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\n        return false;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\n      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {\n        return false;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\n      if (!sldList) {\n        return false;\n      }\n      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;\n    },\n    is: function(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\n        return false;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\n      if (sldOffset >= 0) {\n        return false;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\n      if (!sldList) {\n        return false;\n      }\n      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;\n    },\n    get: function(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\n        return null;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\n      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {\n        return null;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\n      if (!sldList) {\n        return null;\n      }\n      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {\n        return null;\n      }\n      return domain.slice(sldOffset+1);\n    },\n    noConflict: function(){\n      if (root.SecondLevelDomains === this) {\n        root.SecondLevelDomains = _SecondLevelDomains;\n      }\n      return this;\n    }\n  };\n\n  return SLD;\n}));\n","/*!\n * URI.js - Mutating URLs\n *\n * Version: 1.19.0\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);\n  } else {\n    // Browser globals (root is window)\n    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);\n  }\n}(this, function (punycode, IPv6, SLD, root) {\n  'use strict';\n  /*global location, escape, unescape */\n  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase\n  /*jshint camelcase: false */\n\n  // save current URI variable, if any\n  var _URI = root && root.URI;\n\n  function URI(url, base) {\n    var _urlSupplied = arguments.length >= 1;\n    var _baseSupplied = arguments.length >= 2;\n\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof URI)) {\n      if (_urlSupplied) {\n        if (_baseSupplied) {\n          return new URI(url, base);\n        }\n\n        return new URI(url);\n      }\n\n      return new URI();\n    }\n\n    if (url === undefined) {\n      if (_urlSupplied) {\n        throw new TypeError('undefined is not a valid argument for URI');\n      }\n\n      if (typeof location !== 'undefined') {\n        url = location.href + '';\n      } else {\n        url = '';\n      }\n    }\n\n    if (url === null) {\n      if (_urlSupplied) {\n        throw new TypeError('null is not a valid argument for URI');\n      }\n    }\n\n    this.href(url);\n\n    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor\n    if (base !== undefined) {\n      return this.absoluteTo(base);\n    }\n\n    return this;\n  }\n\n  function isInteger(value) {\n    return /^[0-9]+$/.test(value);\n  }\n\n  URI.version = '1.19.0';\n\n  var p = URI.prototype;\n  var hasOwn = Object.prototype.hasOwnProperty;\n\n  function escapeRegEx(string) {\n    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963\n    return string.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  }\n\n  function getType(value) {\n    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value\n    if (value === undefined) {\n      return 'Undefined';\n    }\n\n    return String(Object.prototype.toString.call(value)).slice(8, -1);\n  }\n\n  function isArray(obj) {\n    return getType(obj) === 'Array';\n  }\n\n  function filterArrayValues(data, value) {\n    var lookup = {};\n    var i, length;\n\n    if (getType(value) === 'RegExp') {\n      lookup = null;\n    } else if (isArray(value)) {\n      for (i = 0, length = value.length; i < length; i++) {\n        lookup[value[i]] = true;\n      }\n    } else {\n      lookup[value] = true;\n    }\n\n    for (i = 0, length = data.length; i < length; i++) {\n      /*jshint laxbreak: true */\n      var _match = lookup && lookup[data[i]] !== undefined\n        || !lookup && value.test(data[i]);\n      /*jshint laxbreak: false */\n      if (_match) {\n        data.splice(i, 1);\n        length--;\n        i--;\n      }\n    }\n\n    return data;\n  }\n\n  function arrayContains(list, value) {\n    var i, length;\n\n    // value may be string, number, array, regexp\n    if (isArray(value)) {\n      // Note: this can be optimized to O(n) (instead of current O(m * n))\n      for (i = 0, length = value.length; i < length; i++) {\n        if (!arrayContains(list, value[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    var _type = getType(value);\n    for (i = 0, length = list.length; i < length; i++) {\n      if (_type === 'RegExp') {\n        if (typeof list[i] === 'string' && list[i].match(value)) {\n          return true;\n        }\n      } else if (list[i] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function arraysEqual(one, two) {\n    if (!isArray(one) || !isArray(two)) {\n      return false;\n    }\n\n    // arrays can't be equal if they have different amount of content\n    if (one.length !== two.length) {\n      return false;\n    }\n\n    one.sort();\n    two.sort();\n\n    for (var i = 0, l = one.length; i < l; i++) {\n      if (one[i] !== two[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function trimSlashes(text) {\n    var trim_expression = /^\\/+|\\/+$/g;\n    return text.replace(trim_expression, '');\n  }\n\n  URI._parts = function() {\n    return {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      urn: null,\n      port: null,\n      path: null,\n      query: null,\n      fragment: null,\n      // state\n      preventInvalidHostname: URI.preventInvalidHostname,\n      duplicateQueryParameters: URI.duplicateQueryParameters,\n      escapeQuerySpace: URI.escapeQuerySpace\n    };\n  };\n  // state: throw on invalid hostname\n  // see https://github.com/medialize/URI.js/pull/345\n  // and https://github.com/medialize/URI.js/issues/354\n  URI.preventInvalidHostname = false;\n  // state: allow duplicate query parameters (a=1&a=1)\n  URI.duplicateQueryParameters = false;\n  // state: replaces + with %20 (space in query strings)\n  URI.escapeQuerySpace = true;\n  // static properties\n  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;\n  URI.idn_expression = /[^a-z0-9\\._-]/i;\n  URI.punycode_expression = /(xn--)/i;\n  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?\n  URI.ip4_expression = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  // credits to Rich Brown\n  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096\n  // specification: http://www.ietf.org/rfc/rfc4291.txt\n  URI.ip6_expression = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/;\n  // expression used is \"gruber revised\" (@gruber v2) determined to be the\n  // best solution in a regex-golf we did a couple of ages ago at\n  // * http://mathiasbynens.be/demo/url-regex\n  // * http://rodneyrehm.de/t/url-regex.html\n  URI.find_uri_expression = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/ig;\n  URI.findUri = {\n    // valid \"scheme://\" or \"www.\"\n    start: /\\b(?:([a-z][a-z0-9.+-]*:\\/\\/)|www\\.)/gi,\n    // everything up to the next whitespace\n    end: /[\\s\\r\\n]|$/,\n    // trim trailing punctuation captured by end RegExp\n    trim: /[`!()\\[\\]{};:'\".,<>?«»“”„‘’]+$/,\n    // balanced parens inclusion (), [], {}, <>\n    parens: /(\\([^\\)]*\\)|\\[[^\\]]*\\]|\\{[^}]*\\}|<[^>]*>)/g,\n  };\n  // http://www.iana.org/assignments/uri-schemes.html\n  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports\n  URI.defaultPorts = {\n    http: '80',\n    https: '443',\n    ftp: '21',\n    gopher: '70',\n    ws: '80',\n    wss: '443'\n  };\n  // list of protocols which always require a hostname\n  URI.hostProtocols = [\n    'http',\n    'https'\n  ];\n\n  // allowed hostname characters according to RFC 3986\n  // ALPHA DIGIT \"-\" \".\" \"_\" \"~\" \"!\" \"$\" \"&\" \"'\" \"(\" \")\" \"*\" \"+\" \",\" \";\" \"=\" %encoded\n  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _\n  URI.invalid_hostname_characters = /[^a-zA-Z0-9\\.\\-:_]/;\n  // map DOM Elements to their URI attribute\n  URI.domAttributes = {\n    'a': 'href',\n    'blockquote': 'cite',\n    'link': 'href',\n    'base': 'href',\n    'script': 'src',\n    'form': 'action',\n    'img': 'src',\n    'area': 'href',\n    'iframe': 'src',\n    'embed': 'src',\n    'source': 'src',\n    'track': 'src',\n    'input': 'src', // but only if type=\"image\"\n    'audio': 'src',\n    'video': 'src'\n  };\n  URI.getDomAttribute = function(node) {\n    if (!node || !node.nodeName) {\n      return undefined;\n    }\n\n    var nodeName = node.nodeName.toLowerCase();\n    // <input> should only expose src for type=\"image\"\n    if (nodeName === 'input' && node.type !== 'image') {\n      return undefined;\n    }\n\n    return URI.domAttributes[nodeName];\n  };\n\n  function escapeForDumbFirefox36(value) {\n    // https://github.com/medialize/URI.js/issues/91\n    return escape(value);\n  }\n\n  // encoding / decoding according to RFC3986\n  function strictEncodeURIComponent(string) {\n    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\n    return encodeURIComponent(string)\n      .replace(/[!'()*]/g, escapeForDumbFirefox36)\n      .replace(/\\*/g, '%2A');\n  }\n  URI.encode = strictEncodeURIComponent;\n  URI.decode = decodeURIComponent;\n  URI.iso8859 = function() {\n    URI.encode = escape;\n    URI.decode = unescape;\n  };\n  URI.unicode = function() {\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = decodeURIComponent;\n  };\n  URI.characters = {\n    pathname: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,\n        map: {\n          // -._~!'()*\n          '%24': '$',\n          '%26': '&',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%3A': ':',\n          '%40': '@'\n        }\n      },\n      decode: {\n        expression: /[\\/\\?#]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23'\n        }\n      }\n    },\n    reserved: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,\n        map: {\n          // gen-delims\n          '%3A': ':',\n          '%2F': '/',\n          '%3F': '?',\n          '%23': '#',\n          '%5B': '[',\n          '%5D': ']',\n          '%40': '@',\n          // sub-delims\n          '%21': '!',\n          '%24': '$',\n          '%26': '&',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '='\n        }\n      }\n    },\n    urnpath: {\n      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable\n      // for usage in a URN. RFC2141 also calls out \"-\", \".\", and \"_\" as acceptable characters, but\n      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also\n      // note that the colon character is not featured in the encoding map; this is because URI.js\n      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it\n      // should not appear unencoded in a segment itself.\n      // See also the note above about RFC3986 and capitalalized hex digits.\n      encode: {\n        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,\n        map: {\n          '%21': '!',\n          '%24': '$',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%40': '@'\n        }\n      },\n      // These characters are the characters called out by RFC2141 as \"reserved\" characters that\n      // should never appear in a URN, plus the colon character (see note above).\n      decode: {\n        expression: /[\\/\\?#:]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23',\n          ':': '%3A'\n        }\n      }\n    }\n  };\n  URI.encodeQuery = function(string, escapeQuerySpace) {\n    var escaped = URI.encode(string + '');\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;\n  };\n  URI.decodeQuery = function(string, escapeQuerySpace) {\n    string += '';\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    try {\n      return URI.decode(escapeQuerySpace ? string.replace(/\\+/g, '%20') : string);\n    } catch(e) {\n      // we're not going to mess with weird encodings,\n      // give up and return the undecoded original string\n      // see https://github.com/medialize/URI.js/issues/87\n      // see https://github.com/medialize/URI.js/issues/92\n      return string;\n    }\n  };\n  // generate encode/decode path functions\n  var _parts = {'encode':'encode', 'decode':'decode'};\n  var _part;\n  var generateAccessor = function(_group, _part) {\n    return function(string) {\n      try {\n        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {\n          return URI.characters[_group][_part].map[c];\n        });\n      } catch (e) {\n        // we're not going to mess with weird encodings,\n        // give up and return the undecoded original string\n        // see https://github.com/medialize/URI.js/issues/87\n        // see https://github.com/medialize/URI.js/issues/92\n        return string;\n      }\n    };\n  };\n\n  for (_part in _parts) {\n    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);\n    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);\n  }\n\n  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {\n    return function(string) {\n      // Why pass in names of functions, rather than the function objects themselves? The\n      // definitions of some functions (but in particular, URI.decode) will occasionally change due\n      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure\n      // that the functions we use here are \"fresh\".\n      var actualCodingFunc;\n      if (!_innerCodingFuncName) {\n        actualCodingFunc = URI[_codingFuncName];\n      } else {\n        actualCodingFunc = function(string) {\n          return URI[_codingFuncName](URI[_innerCodingFuncName](string));\n        };\n      }\n\n      var segments = (string + '').split(_sep);\n\n      for (var i = 0, length = segments.length; i < length; i++) {\n        segments[i] = actualCodingFunc(segments[i]);\n      }\n\n      return segments.join(_sep);\n    };\n  };\n\n  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.\n  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');\n  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');\n  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');\n  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');\n\n  URI.encodeReserved = generateAccessor('reserved', 'encode');\n\n  URI.parse = function(string, parts) {\n    var pos;\n    if (!parts) {\n      parts = {\n        preventInvalidHostname: URI.preventInvalidHostname\n      };\n    }\n    // [protocol\"://\"[username[\":\"password]\"@\"]hostname[\":\"port]\"/\"?][path][\"?\"querystring][\"#\"fragment]\n\n    // extract fragment\n    pos = string.indexOf('#');\n    if (pos > -1) {\n      // escaping?\n      parts.fragment = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract query\n    pos = string.indexOf('?');\n    if (pos > -1) {\n      // escaping?\n      parts.query = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract protocol\n    if (string.substring(0, 2) === '//') {\n      // relative-scheme\n      parts.protocol = null;\n      string = string.substring(2);\n      // extract \"user:pass@host:port\"\n      string = URI.parseAuthority(string, parts);\n    } else {\n      pos = string.indexOf(':');\n      if (pos > -1) {\n        parts.protocol = string.substring(0, pos) || null;\n        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {\n          // : may be within the path\n          parts.protocol = undefined;\n        } else if (string.substring(pos + 1, pos + 3) === '//') {\n          string = string.substring(pos + 3);\n\n          // extract \"user:pass@host:port\"\n          string = URI.parseAuthority(string, parts);\n        } else {\n          string = string.substring(pos + 1);\n          parts.urn = true;\n        }\n      }\n    }\n\n    // what's left must be the path\n    parts.path = string;\n\n    // and we're done\n    return parts;\n  };\n  URI.parseHost = function(string, parts) {\n    if (!string) {\n      string = '';\n    }\n\n    // Copy chrome, IE, opera backslash-handling behavior.\n    // Back slashes before the query string get converted to forward slashes\n    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\n    // https://github.com/medialize/URI.js/pull/233\n    string = string.replace(/\\\\/g, '/');\n\n    // extract host:port\n    var pos = string.indexOf('/');\n    var bracketPos;\n    var t;\n\n    if (pos === -1) {\n      pos = string.length;\n    }\n\n    if (string.charAt(0) === '[') {\n      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6\n      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts\n      // IPv6+port in the format [2001:db8::1]:80 (for the time being)\n      bracketPos = string.indexOf(']');\n      parts.hostname = string.substring(1, bracketPos) || null;\n      parts.port = string.substring(bracketPos + 2, pos) || null;\n      if (parts.port === '/') {\n        parts.port = null;\n      }\n    } else {\n      var firstColon = string.indexOf(':');\n      var firstSlash = string.indexOf('/');\n      var nextColon = string.indexOf(':', firstColon + 1);\n      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {\n        // IPv6 host contains multiple colons - but no port\n        // this notation is actually not allowed by RFC 3986, but we're a liberal parser\n        parts.hostname = string.substring(0, pos) || null;\n        parts.port = null;\n      } else {\n        t = string.substring(0, pos).split(':');\n        parts.hostname = t[0] || null;\n        parts.port = t[1] || null;\n      }\n    }\n\n    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {\n      pos++;\n      string = '/' + string;\n    }\n\n    if (parts.preventInvalidHostname) {\n      URI.ensureValidHostname(parts.hostname, parts.protocol);\n    }\n\n    if (parts.port) {\n      URI.ensureValidPort(parts.port);\n    }\n\n    return string.substring(pos) || '/';\n  };\n  URI.parseAuthority = function(string, parts) {\n    string = URI.parseUserinfo(string, parts);\n    return URI.parseHost(string, parts);\n  };\n  URI.parseUserinfo = function(string, parts) {\n    // extract username:password\n    var firstSlash = string.indexOf('/');\n    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);\n    var t;\n\n    // authority@ must come before /path\n    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {\n      t = string.substring(0, pos).split(':');\n      parts.username = t[0] ? URI.decode(t[0]) : null;\n      t.shift();\n      parts.password = t[0] ? URI.decode(t.join(':')) : null;\n      string = string.substring(pos + 1);\n    } else {\n      parts.username = null;\n      parts.password = null;\n    }\n\n    return string;\n  };\n  URI.parseQuery = function(string, escapeQuerySpace) {\n    if (!string) {\n      return {};\n    }\n\n    // throw out the funky business - \"?\"[name\"=\"value\"&\"]+\n    string = string.replace(/&+/g, '&').replace(/^\\?*&*|&+$/g, '');\n\n    if (!string) {\n      return {};\n    }\n\n    var items = {};\n    var splits = string.split('&');\n    var length = splits.length;\n    var v, name, value;\n\n    for (var i = 0; i < length; i++) {\n      v = splits[i].split('=');\n      name = URI.decodeQuery(v.shift(), escapeQuerySpace);\n      // no \"=\" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters\n      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;\n\n      if (hasOwn.call(items, name)) {\n        if (typeof items[name] === 'string' || items[name] === null) {\n          items[name] = [items[name]];\n        }\n\n        items[name].push(value);\n      } else {\n        items[name] = value;\n      }\n    }\n\n    return items;\n  };\n\n  URI.build = function(parts) {\n    var t = '';\n\n    if (parts.protocol) {\n      t += parts.protocol + ':';\n    }\n\n    if (!parts.urn && (t || parts.hostname)) {\n      t += '//';\n    }\n\n    t += (URI.buildAuthority(parts) || '');\n\n    if (typeof parts.path === 'string') {\n      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {\n        t += '/';\n      }\n\n      t += parts.path;\n    }\n\n    if (typeof parts.query === 'string' && parts.query) {\n      t += '?' + parts.query;\n    }\n\n    if (typeof parts.fragment === 'string' && parts.fragment) {\n      t += '#' + parts.fragment;\n    }\n    return t;\n  };\n  URI.buildHost = function(parts) {\n    var t = '';\n\n    if (!parts.hostname) {\n      return '';\n    } else if (URI.ip6_expression.test(parts.hostname)) {\n      t += '[' + parts.hostname + ']';\n    } else {\n      t += parts.hostname;\n    }\n\n    if (parts.port) {\n      t += ':' + parts.port;\n    }\n\n    return t;\n  };\n  URI.buildAuthority = function(parts) {\n    return URI.buildUserinfo(parts) + URI.buildHost(parts);\n  };\n  URI.buildUserinfo = function(parts) {\n    var t = '';\n\n    if (parts.username) {\n      t += URI.encode(parts.username);\n    }\n\n    if (parts.password) {\n      t += ':' + URI.encode(parts.password);\n    }\n\n    if (t) {\n      t += '@';\n    }\n\n    return t;\n  };\n  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {\n    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html\n    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed\n    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!\n    // URI.js treats the query string as being application/x-www-form-urlencoded\n    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type\n\n    var t = '';\n    var unique, key, i, length;\n    for (key in data) {\n      if (hasOwn.call(data, key) && key) {\n        if (isArray(data[key])) {\n          unique = {};\n          for (i = 0, length = data[key].length; i < length; i++) {\n            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {\n              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);\n              if (duplicateQueryParameters !== true) {\n                unique[data[key][i] + ''] = true;\n              }\n            }\n          }\n        } else if (data[key] !== undefined) {\n          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);\n        }\n      }\n    }\n\n    return t.substring(1);\n  };\n  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {\n    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded\n    // don't append \"=\" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization\n    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');\n  };\n\n  URI.addQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.addQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (data[name] === undefined) {\n        data[name] = value;\n        return;\n      } else if (typeof data[name] === 'string') {\n        data[name] = [data[name]];\n      }\n\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      data[name] = (data[name] || []).concat(value);\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.setQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.setQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      data[name] = value === undefined ? null : value;\n    } else {\n      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.removeQuery = function(data, name, value) {\n    var i, length, key;\n\n    if (isArray(name)) {\n      for (i = 0, length = name.length; i < length; i++) {\n        data[name[i]] = undefined;\n      }\n    } else if (getType(name) === 'RegExp') {\n      for (key in data) {\n        if (name.test(key)) {\n          data[key] = undefined;\n        }\n      }\n    } else if (typeof name === 'object') {\n      for (key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.removeQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (value !== undefined) {\n        if (getType(value) === 'RegExp') {\n          if (!isArray(data[name]) && value.test(data[name])) {\n            data[name] = undefined;\n          } else {\n            data[name] = filterArrayValues(data[name], value);\n          }\n        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {\n          data[name] = undefined;\n        } else if (isArray(data[name])) {\n          data[name] = filterArrayValues(data[name], value);\n        }\n      } else {\n        data[name] = undefined;\n      }\n    } else {\n      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');\n    }\n  };\n  URI.hasQuery = function(data, name, value, withinArray) {\n    switch (getType(name)) {\n      case 'String':\n        // Nothing to do here\n        break;\n\n      case 'RegExp':\n        for (var key in data) {\n          if (hasOwn.call(data, key)) {\n            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n\n      case 'Object':\n        for (var _key in name) {\n          if (hasOwn.call(name, _key)) {\n            if (!URI.hasQuery(data, _key, name[_key])) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');\n    }\n\n    switch (getType(value)) {\n      case 'Undefined':\n        // true if exists (but may be empty)\n        return name in data; // data[name] !== undefined;\n\n      case 'Boolean':\n        // true if exists and non-empty\n        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);\n        return value === _booly;\n\n      case 'Function':\n        // allow complex comparison\n        return !!value(data[name], name, data);\n\n      case 'Array':\n        if (!isArray(data[name])) {\n          return false;\n        }\n\n        var op = withinArray ? arrayContains : arraysEqual;\n        return op(data[name], value);\n\n      case 'RegExp':\n        if (!isArray(data[name])) {\n          return Boolean(data[name] && data[name].match(value));\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      case 'Number':\n        value = String(value);\n        /* falls through */\n      case 'String':\n        if (!isArray(data[name])) {\n          return data[name] === value;\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');\n    }\n  };\n\n\n  URI.joinPaths = function() {\n    var input = [];\n    var segments = [];\n    var nonEmptySegments = 0;\n\n    for (var i = 0; i < arguments.length; i++) {\n      var url = new URI(arguments[i]);\n      input.push(url);\n      var _segments = url.segment();\n      for (var s = 0; s < _segments.length; s++) {\n        if (typeof _segments[s] === 'string') {\n          segments.push(_segments[s]);\n        }\n\n        if (_segments[s]) {\n          nonEmptySegments++;\n        }\n      }\n    }\n\n    if (!segments.length || !nonEmptySegments) {\n      return new URI('');\n    }\n\n    var uri = new URI('').segment(segments);\n\n    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {\n      uri.path('/' + uri.path());\n    }\n\n    return uri.normalize();\n  };\n\n  URI.commonPath = function(one, two) {\n    var length = Math.min(one.length, two.length);\n    var pos;\n\n    // find first non-matching character\n    for (pos = 0; pos < length; pos++) {\n      if (one.charAt(pos) !== two.charAt(pos)) {\n        pos--;\n        break;\n      }\n    }\n\n    if (pos < 1) {\n      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';\n    }\n\n    // revert to last /\n    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {\n      pos = one.substring(0, pos).lastIndexOf('/');\n    }\n\n    return one.substring(0, pos + 1);\n  };\n\n  URI.withinString = function(string, callback, options) {\n    options || (options = {});\n    var _start = options.start || URI.findUri.start;\n    var _end = options.end || URI.findUri.end;\n    var _trim = options.trim || URI.findUri.trim;\n    var _parens = options.parens || URI.findUri.parens;\n    var _attributeOpen = /[a-z0-9-]=[\"']?$/i;\n\n    _start.lastIndex = 0;\n    while (true) {\n      var match = _start.exec(string);\n      if (!match) {\n        break;\n      }\n\n      var start = match.index;\n      if (options.ignoreHtml) {\n        // attribut(e=[\"']?$)\n        var attributeOpen = string.slice(Math.max(start - 3, 0), start);\n        if (attributeOpen && _attributeOpen.test(attributeOpen)) {\n          continue;\n        }\n      }\n\n      var end = start + string.slice(start).search(_end);\n      var slice = string.slice(start, end);\n      // make sure we include well balanced parens\n      var parensEnd = -1;\n      while (true) {\n        var parensMatch = _parens.exec(slice);\n        if (!parensMatch) {\n          break;\n        }\n\n        var parensMatchEnd = parensMatch.index + parensMatch[0].length;\n        parensEnd = Math.max(parensEnd, parensMatchEnd);\n      }\n\n      if (parensEnd > -1) {\n        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');\n      } else {\n        slice = slice.replace(_trim, '');\n      }\n\n      if (slice.length <= match[0].length) {\n        // the extract only contains the starting marker of a URI,\n        // e.g. \"www\" or \"http://\"\n        continue;\n      }\n\n      if (options.ignore && options.ignore.test(slice)) {\n        continue;\n      }\n\n      end = start + slice.length;\n      var result = callback(slice, start, end, string);\n      if (result === undefined) {\n        _start.lastIndex = end;\n        continue;\n      }\n\n      result = String(result);\n      string = string.slice(0, start) + result + string.slice(end);\n      _start.lastIndex = start + result.length;\n    }\n\n    _start.lastIndex = 0;\n    return string;\n  };\n\n  URI.ensureValidHostname = function(v, protocol) {\n    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)\n    // they are not part of DNS and therefore ignored by URI.js\n\n    var hasHostname = !!v; // not null and not an empty string\n    var hasProtocol = !!protocol;\n    var rejectEmptyHostname = false;\n\n    if (hasProtocol) {\n      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);\n    }\n\n    if (rejectEmptyHostname && !hasHostname) {\n      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);\n    } else if (v && v.match(URI.invalid_hostname_characters)) {\n      // test punycode\n      if (!punycode) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');\n      }\n      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_]');\n      }\n    }\n  };\n\n  URI.ensureValidPort = function (v) {\n    if (!v) {\n      return;\n    }\n\n    var port = Number(v);\n    if (isInteger(port) && (port > 0) && (port < 65536)) {\n      return;\n    }\n\n    throw new TypeError('Port \"' + v + '\" is not a valid port');\n  };\n\n  // noConflict\n  URI.noConflict = function(removeAll) {\n    if (removeAll) {\n      var unconflicted = {\n        URI: this.noConflict()\n      };\n\n      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {\n        unconflicted.URITemplate = root.URITemplate.noConflict();\n      }\n\n      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {\n        unconflicted.IPv6 = root.IPv6.noConflict();\n      }\n\n      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {\n        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();\n      }\n\n      return unconflicted;\n    } else if (root.URI === this) {\n      root.URI = _URI;\n    }\n\n    return this;\n  };\n\n  p.build = function(deferBuild) {\n    if (deferBuild === true) {\n      this._deferred_build = true;\n    } else if (deferBuild === undefined || this._deferred_build) {\n      this._string = URI.build(this._parts);\n      this._deferred_build = false;\n    }\n\n    return this;\n  };\n\n  p.clone = function() {\n    return new URI(this);\n  };\n\n  p.valueOf = p.toString = function() {\n    return this.build(false)._string;\n  };\n\n\n  function generateSimpleAccessor(_part){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        this._parts[_part] = v || null;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  function generatePrefixAccessor(_part, _key){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        if (v !== null) {\n          v = v + '';\n          if (v.charAt(0) === _key) {\n            v = v.substring(1);\n          }\n        }\n\n        this._parts[_part] = v;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  p.protocol = generateSimpleAccessor('protocol');\n  p.username = generateSimpleAccessor('username');\n  p.password = generateSimpleAccessor('password');\n  p.hostname = generateSimpleAccessor('hostname');\n  p.port = generateSimpleAccessor('port');\n  p.query = generatePrefixAccessor('query', '?');\n  p.fragment = generatePrefixAccessor('fragment', '#');\n\n  p.search = function(v, build) {\n    var t = this.query(v, build);\n    return typeof t === 'string' && t.length ? ('?' + t) : t;\n  };\n  p.hash = function(v, build) {\n    var t = this.fragment(v, build);\n    return typeof t === 'string' && t.length ? ('#' + t) : t;\n  };\n\n  p.pathname = function(v, build) {\n    if (v === undefined || v === true) {\n      var res = this._parts.path || (this._parts.hostname ? '/' : '');\n      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;\n    } else {\n      if (this._parts.urn) {\n        this._parts.path = v ? URI.recodeUrnPath(v) : '';\n      } else {\n        this._parts.path = v ? URI.recodePath(v) : '/';\n      }\n      this.build(!build);\n      return this;\n    }\n  };\n  p.path = p.pathname;\n  p.href = function(href, build) {\n    var key;\n\n    if (href === undefined) {\n      return this.toString();\n    }\n\n    this._string = '';\n    this._parts = URI._parts();\n\n    var _URI = href instanceof URI;\n    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);\n    if (href.nodeName) {\n      var attribute = URI.getDomAttribute(href);\n      href = href[attribute] || '';\n      _object = false;\n    }\n\n    // window.location is reported to be an object, but it's not the sort\n    // of object we're looking for:\n    // * location.protocol ends with a colon\n    // * location.query != object.search\n    // * location.hash != object.fragment\n    // simply serializing the unknown object should do the trick\n    // (for location, not for everything...)\n    if (!_URI && _object && href.pathname !== undefined) {\n      href = href.toString();\n    }\n\n    if (typeof href === 'string' || href instanceof String) {\n      this._parts = URI.parse(String(href), this._parts);\n    } else if (_URI || _object) {\n      var src = _URI ? href._parts : href;\n      for (key in src) {\n        if (hasOwn.call(this._parts, key)) {\n          this._parts[key] = src[key];\n        }\n      }\n    } else {\n      throw new TypeError('invalid input');\n    }\n\n    this.build(!build);\n    return this;\n  };\n\n  // identification accessors\n  p.is = function(what) {\n    var ip = false;\n    var ip4 = false;\n    var ip6 = false;\n    var name = false;\n    var sld = false;\n    var idn = false;\n    var punycode = false;\n    var relative = !this._parts.urn;\n\n    if (this._parts.hostname) {\n      relative = false;\n      ip4 = URI.ip4_expression.test(this._parts.hostname);\n      ip6 = URI.ip6_expression.test(this._parts.hostname);\n      ip = ip4 || ip6;\n      name = !ip;\n      sld = name && SLD && SLD.has(this._parts.hostname);\n      idn = name && URI.idn_expression.test(this._parts.hostname);\n      punycode = name && URI.punycode_expression.test(this._parts.hostname);\n    }\n\n    switch (what.toLowerCase()) {\n      case 'relative':\n        return relative;\n\n      case 'absolute':\n        return !relative;\n\n      // hostname identification\n      case 'domain':\n      case 'name':\n        return name;\n\n      case 'sld':\n        return sld;\n\n      case 'ip':\n        return ip;\n\n      case 'ip4':\n      case 'ipv4':\n      case 'inet4':\n        return ip4;\n\n      case 'ip6':\n      case 'ipv6':\n      case 'inet6':\n        return ip6;\n\n      case 'idn':\n        return idn;\n\n      case 'url':\n        return !this._parts.urn;\n\n      case 'urn':\n        return !!this._parts.urn;\n\n      case 'punycode':\n        return punycode;\n    }\n\n    return null;\n  };\n\n  // component specific input validation\n  var _protocol = p.protocol;\n  var _port = p.port;\n  var _hostname = p.hostname;\n\n  p.protocol = function(v, build) {\n    if (v) {\n      // accept trailing ://\n      v = v.replace(/:(\\/\\/)?$/, '');\n\n      if (!v.match(URI.protocol_expression)) {\n        throw new TypeError('Protocol \"' + v + '\" contains characters other than [A-Z0-9.+-] or doesn\\'t start with [A-Z]');\n      }\n    }\n\n    return _protocol.call(this, v, build);\n  };\n  p.scheme = p.protocol;\n  p.port = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      if (v === 0) {\n        v = null;\n      }\n\n      if (v) {\n        v += '';\n        if (v.charAt(0) === ':') {\n          v = v.substring(1);\n        }\n\n        URI.ensureValidPort(v);\n      }\n    }\n    return _port.call(this, v, build);\n  };\n  p.hostname = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };\n      var res = URI.parseHost(v, x);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      v = x.hostname;\n      if (this._parts.preventInvalidHostname) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n    }\n\n    return _hostname.call(this, v, build);\n  };\n\n  // compound accessors\n  p.origin = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var protocol = this.protocol();\n      var authority = this.authority();\n      if (!authority) {\n        return '';\n      }\n\n      return (protocol ? protocol + '://' : '') + this.authority();\n    } else {\n      var origin = URI(v);\n      this\n        .protocol(origin.protocol())\n        .authority(origin.authority())\n        .build(!build);\n      return this;\n    }\n  };\n  p.host = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildHost(this._parts) : '';\n    } else {\n      var res = URI.parseHost(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.authority = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';\n    } else {\n      var res = URI.parseAuthority(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.userinfo = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var t = URI.buildUserinfo(this._parts);\n      return t ? t.substring(0, t.length -1) : t;\n    } else {\n      if (v[v.length-1] !== '@') {\n        v += '@';\n      }\n\n      URI.parseUserinfo(v, this._parts);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.resource = function(v, build) {\n    var parts;\n\n    if (v === undefined) {\n      return this.path() + this.search() + this.hash();\n    }\n\n    parts = URI.parse(v);\n    this._parts.path = parts.path;\n    this._parts.query = parts.query;\n    this._parts.fragment = parts.fragment;\n    this.build(!build);\n    return this;\n  };\n\n  // fraction accessors\n  p.subdomain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    // convenience, return \"www\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // grab domain and add another segment\n      var end = this._parts.hostname.length - this.domain().length - 1;\n      return this._parts.hostname.substring(0, end) || '';\n    } else {\n      var e = this._parts.hostname.length - this.domain().length;\n      var sub = this._parts.hostname.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(sub));\n\n      if (v && v.charAt(v.length - 1) !== '.') {\n        v += '.';\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      if (v) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n\n      this._parts.hostname = this._parts.hostname.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.domain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // convenience, return \"example.org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // if hostname consists of 1 or 2 segments, it must be the domain\n      var t = this._parts.hostname.match(/\\./g);\n      if (t && t.length < 2) {\n        return this._parts.hostname;\n      }\n\n      // grab tld and add another segment\n      var end = this._parts.hostname.length - this.tld(build).length - 1;\n      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;\n      return this._parts.hostname.substring(end) || '';\n    } else {\n      if (!v) {\n        throw new TypeError('cannot set domain empty');\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      URI.ensureValidHostname(v, this._parts.protocol);\n\n      if (!this._parts.hostname || this.is('IP')) {\n        this._parts.hostname = v;\n      } else {\n        var replace = new RegExp(escapeRegEx(this.domain()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.tld = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // return \"org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      var pos = this._parts.hostname.lastIndexOf('.');\n      var tld = this._parts.hostname.substring(pos + 1);\n\n      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {\n        return SLD.get(this._parts.hostname) || tld;\n      }\n\n      return tld;\n    } else {\n      var replace;\n\n      if (!v) {\n        throw new TypeError('cannot set TLD empty');\n      } else if (v.match(/[^a-zA-Z0-9-]/)) {\n        if (SLD && SLD.is(v)) {\n          replace = new RegExp(escapeRegEx(this.tld()) + '$');\n          this._parts.hostname = this._parts.hostname.replace(replace, v);\n        } else {\n          throw new TypeError('TLD \"' + v + '\" contains characters other than [A-Z0-9]');\n        }\n      } else if (!this._parts.hostname || this.is('IP')) {\n        throw new ReferenceError('cannot set TLD on non-domain host');\n      } else {\n        replace = new RegExp(escapeRegEx(this.tld()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.directory = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path && !this._parts.hostname) {\n        return '';\n      }\n\n      if (this._parts.path === '/') {\n        return '/';\n      }\n\n      var end = this._parts.path.length - this.filename().length - 1;\n      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');\n\n      return v ? URI.decodePath(res) : res;\n\n    } else {\n      var e = this._parts.path.length - this.filename().length;\n      var directory = this._parts.path.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(directory));\n\n      // fully qualifier directories begin with a slash\n      if (!this.is('relative')) {\n        if (!v) {\n          v = '/';\n        }\n\n        if (v.charAt(0) !== '/') {\n          v = '/' + v;\n        }\n      }\n\n      // directories always end with a slash\n      if (v && v.charAt(v.length - 1) !== '/') {\n        v += '/';\n      }\n\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.filename = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v !== 'string') {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var pos = this._parts.path.lastIndexOf('/');\n      var res = this._parts.path.substring(pos+1);\n\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      var mutatedDirectory = false;\n\n      if (v.charAt(0) === '/') {\n        v = v.substring(1);\n      }\n\n      if (v.match(/\\.?\\//)) {\n        mutatedDirectory = true;\n      }\n\n      var replace = new RegExp(escapeRegEx(this.filename()) + '$');\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n\n      if (mutatedDirectory) {\n        this.normalizePath(build);\n      } else {\n        this.build(!build);\n      }\n\n      return this;\n    }\n  };\n  p.suffix = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var filename = this.filename();\n      var pos = filename.lastIndexOf('.');\n      var s, res;\n\n      if (pos === -1) {\n        return '';\n      }\n\n      // suffix may only contain alnum characters (yup, I made this up.)\n      s = filename.substring(pos+1);\n      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      if (v.charAt(0) === '.') {\n        v = v.substring(1);\n      }\n\n      var suffix = this.suffix();\n      var replace;\n\n      if (!suffix) {\n        if (!v) {\n          return this;\n        }\n\n        this._parts.path += '.' + URI.recodePath(v);\n      } else if (!v) {\n        replace = new RegExp(escapeRegEx('.' + suffix) + '$');\n      } else {\n        replace = new RegExp(escapeRegEx(suffix) + '$');\n      }\n\n      if (replace) {\n        v = URI.recodePath(v);\n        this._parts.path = this._parts.path.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.segment = function(segment, v, build) {\n    var separator = this._parts.urn ? ':' : '/';\n    var path = this.path();\n    var absolute = path.substring(0, 1) === '/';\n    var segments = path.split(separator);\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      throw new Error('Bad segment \"' + segment + '\", must be 0-based integer');\n    }\n\n    if (absolute) {\n      segments.shift();\n    }\n\n    if (segment < 0) {\n      // allow negative indexes to address from the end\n      segment = Math.max(segments.length + segment, 0);\n    }\n\n    if (v === undefined) {\n      /*jshint laxbreak: true */\n      return segment === undefined\n        ? segments\n        : segments[segment];\n      /*jshint laxbreak: false */\n    } else if (segment === null || segments[segment] === undefined) {\n      if (isArray(v)) {\n        segments = [];\n        // collapse empty elements within array\n        for (var i=0, l=v.length; i < l; i++) {\n          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {\n            continue;\n          }\n\n          if (segments.length && !segments[segments.length -1].length) {\n            segments.pop();\n          }\n\n          segments.push(trimSlashes(v[i]));\n        }\n      } else if (v || typeof v === 'string') {\n        v = trimSlashes(v);\n        if (segments[segments.length -1] === '') {\n          // empty trailing elements have to be overwritten\n          // to prevent results such as /foo//bar\n          segments[segments.length -1] = v;\n        } else {\n          segments.push(v);\n        }\n      }\n    } else {\n      if (v) {\n        segments[segment] = trimSlashes(v);\n      } else {\n        segments.splice(segment, 1);\n      }\n    }\n\n    if (absolute) {\n      segments.unshift('');\n    }\n\n    return this.path(segments.join(separator), build);\n  };\n  p.segmentCoded = function(segment, v, build) {\n    var segments, i, l;\n\n    if (typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (v === undefined) {\n      segments = this.segment(segment, v, build);\n      if (!isArray(segments)) {\n        segments = segments !== undefined ? URI.decode(segments) : undefined;\n      } else {\n        for (i = 0, l = segments.length; i < l; i++) {\n          segments[i] = URI.decode(segments[i]);\n        }\n      }\n\n      return segments;\n    }\n\n    if (!isArray(v)) {\n      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;\n    } else {\n      for (i = 0, l = v.length; i < l; i++) {\n        v[i] = URI.encode(v[i]);\n      }\n    }\n\n    return this.segment(segment, v, build);\n  };\n\n  // mutating query string\n  var q = p.query;\n  p.query = function(v, build) {\n    if (v === true) {\n      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    } else if (typeof v === 'function') {\n      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n      var result = v.call(this, data);\n      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else if (v !== undefined && typeof v !== 'string') {\n      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else {\n      return q.call(this, v, build);\n    }\n  };\n  p.setQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n\n    if (typeof name === 'string' || name instanceof String) {\n      data[name] = value !== undefined ? value : null;\n    } else if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          data[key] = name[key];\n        }\n      }\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.addQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.addQuery(data, name, value === undefined ? null : value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.removeQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.removeQuery(data, name, value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.hasQuery = function(name, value, withinArray) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    return URI.hasQuery(data, name, value, withinArray);\n  };\n  p.setSearch = p.setQuery;\n  p.addSearch = p.addQuery;\n  p.removeSearch = p.removeQuery;\n  p.hasSearch = p.hasQuery;\n\n  // sanitizing URLs\n  p.normalize = function() {\n    if (this._parts.urn) {\n      return this\n        .normalizeProtocol(false)\n        .normalizePath(false)\n        .normalizeQuery(false)\n        .normalizeFragment(false)\n        .build();\n    }\n\n    return this\n      .normalizeProtocol(false)\n      .normalizeHostname(false)\n      .normalizePort(false)\n      .normalizePath(false)\n      .normalizeQuery(false)\n      .normalizeFragment(false)\n      .build();\n  };\n  p.normalizeProtocol = function(build) {\n    if (typeof this._parts.protocol === 'string') {\n      this._parts.protocol = this._parts.protocol.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeHostname = function(build) {\n    if (this._parts.hostname) {\n      if (this.is('IDN') && punycode) {\n        this._parts.hostname = punycode.toASCII(this._parts.hostname);\n      } else if (this.is('IPv6') && IPv6) {\n        this._parts.hostname = IPv6.best(this._parts.hostname);\n      }\n\n      this._parts.hostname = this._parts.hostname.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePort = function(build) {\n    // remove port of it's the protocol's default\n    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {\n      this._parts.port = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePath = function(build) {\n    var _path = this._parts.path;\n    if (!_path) {\n      return this;\n    }\n\n    if (this._parts.urn) {\n      this._parts.path = URI.recodeUrnPath(this._parts.path);\n      this.build(!build);\n      return this;\n    }\n\n    if (this._parts.path === '/') {\n      return this;\n    }\n\n    _path = URI.recodePath(_path);\n\n    var _was_relative;\n    var _leadingParents = '';\n    var _parent, _pos;\n\n    // handle relative paths\n    if (_path.charAt(0) !== '/') {\n      _was_relative = true;\n      _path = '/' + _path;\n    }\n\n    // handle relative files (as opposed to directories)\n    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {\n      _path += '/';\n    }\n\n    // resolve simples\n    _path = _path\n      .replace(/(\\/(\\.\\/)+)|(\\/\\.$)/g, '/')\n      .replace(/\\/{2,}/g, '/');\n\n    // remember leading parents\n    if (_was_relative) {\n      _leadingParents = _path.substring(1).match(/^(\\.\\.\\/)+/) || '';\n      if (_leadingParents) {\n        _leadingParents = _leadingParents[0];\n      }\n    }\n\n    // resolve parents\n    while (true) {\n      _parent = _path.search(/\\/\\.\\.(\\/|$)/);\n      if (_parent === -1) {\n        // no more ../ to resolve\n        break;\n      } else if (_parent === 0) {\n        // top level cannot be relative, skip it\n        _path = _path.substring(3);\n        continue;\n      }\n\n      _pos = _path.substring(0, _parent).lastIndexOf('/');\n      if (_pos === -1) {\n        _pos = _parent;\n      }\n      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);\n    }\n\n    // revert to relative\n    if (_was_relative && this.is('relative')) {\n      _path = _leadingParents + _path.substring(1);\n    }\n\n    this._parts.path = _path;\n    this.build(!build);\n    return this;\n  };\n  p.normalizePathname = p.normalizePath;\n  p.normalizeQuery = function(build) {\n    if (typeof this._parts.query === 'string') {\n      if (!this._parts.query.length) {\n        this._parts.query = null;\n      } else {\n        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));\n      }\n\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeFragment = function(build) {\n    if (!this._parts.fragment) {\n      this._parts.fragment = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeSearch = p.normalizeQuery;\n  p.normalizeHash = p.normalizeFragment;\n\n  p.iso8859 = function() {\n    // expect unicode input, iso8859 output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = escape;\n    URI.decode = decodeURIComponent;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.unicode = function() {\n    // expect iso8859 input, unicode output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = unescape;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.readable = function() {\n    var uri = this.clone();\n    // removing username, password, because they shouldn't be displayed according to RFC 3986\n    uri.username('').password('').normalize();\n    var t = '';\n    if (uri._parts.protocol) {\n      t += uri._parts.protocol + '://';\n    }\n\n    if (uri._parts.hostname) {\n      if (uri.is('punycode') && punycode) {\n        t += punycode.toUnicode(uri._parts.hostname);\n        if (uri._parts.port) {\n          t += ':' + uri._parts.port;\n        }\n      } else {\n        t += uri.host();\n      }\n    }\n\n    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {\n      t += '/';\n    }\n\n    t += uri.path(true);\n    if (uri._parts.query) {\n      var q = '';\n      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {\n        var kv = (qp[i] || '').split('=');\n        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)\n          .replace(/&/g, '%26');\n\n        if (kv[1] !== undefined) {\n          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)\n            .replace(/&/g, '%26');\n        }\n      }\n      t += '?' + q.substring(1);\n    }\n\n    t += URI.decodeQuery(uri.hash(), true);\n    return t;\n  };\n\n  // resolving relative and absolute URLs\n  p.absoluteTo = function(base) {\n    var resolved = this.clone();\n    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];\n    var basedir, i, p;\n\n    if (this._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    if (!(base instanceof URI)) {\n      base = new URI(base);\n    }\n\n    if (resolved._parts.protocol) {\n      // Directly returns even if this._parts.hostname is empty.\n      return resolved;\n    } else {\n      resolved._parts.protocol = base._parts.protocol;\n    }\n\n    if (this._parts.hostname) {\n      return resolved;\n    }\n\n    for (i = 0; (p = properties[i]); i++) {\n      resolved._parts[p] = base._parts[p];\n    }\n\n    if (!resolved._parts.path) {\n      resolved._parts.path = base._parts.path;\n      if (!resolved._parts.query) {\n        resolved._parts.query = base._parts.query;\n      }\n    } else {\n      if (resolved._parts.path.substring(-2) === '..') {\n        resolved._parts.path += '/';\n      }\n\n      if (resolved.path().charAt(0) !== '/') {\n        basedir = base.directory();\n        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';\n        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;\n        resolved.normalizePath();\n      }\n    }\n\n    resolved.build();\n    return resolved;\n  };\n  p.relativeTo = function(base) {\n    var relative = this.clone().normalize();\n    var relativeParts, baseParts, common, relativePath, basePath;\n\n    if (relative._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    base = new URI(base).normalize();\n    relativeParts = relative._parts;\n    baseParts = base._parts;\n    relativePath = relative.path();\n    basePath = base.path();\n\n    if (relativePath.charAt(0) !== '/') {\n      throw new Error('URI is already relative');\n    }\n\n    if (basePath.charAt(0) !== '/') {\n      throw new Error('Cannot calculate a URI relative to another relative URI');\n    }\n\n    if (relativeParts.protocol === baseParts.protocol) {\n      relativeParts.protocol = null;\n    }\n\n    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {\n      return relative.build();\n    }\n\n    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {\n      return relative.build();\n    }\n\n    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {\n      relativeParts.hostname = null;\n      relativeParts.port = null;\n    } else {\n      return relative.build();\n    }\n\n    if (relativePath === basePath) {\n      relativeParts.path = '';\n      return relative.build();\n    }\n\n    // determine common sub path\n    common = URI.commonPath(relativePath, basePath);\n\n    // If the paths have nothing in common, return a relative URL with the absolute path.\n    if (!common) {\n      return relative.build();\n    }\n\n    var parents = baseParts.path\n      .substring(common.length)\n      .replace(/[^\\/]*$/, '')\n      .replace(/.*?\\//g, '../');\n\n    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';\n\n    return relative.build();\n  };\n\n  // comparing URIs\n  p.equals = function(uri) {\n    var one = this.clone();\n    var two = new URI(uri);\n    var one_map = {};\n    var two_map = {};\n    var checked = {};\n    var one_query, two_query, key;\n\n    one.normalize();\n    two.normalize();\n\n    // exact match\n    if (one.toString() === two.toString()) {\n      return true;\n    }\n\n    // extract query string\n    one_query = one.query();\n    two_query = two.query();\n    one.query('');\n    two.query('');\n\n    // definitely not equal if not even non-query parts match\n    if (one.toString() !== two.toString()) {\n      return false;\n    }\n\n    // query parameters have the same length, even if they're permuted\n    if (one_query.length !== two_query.length) {\n      return false;\n    }\n\n    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);\n    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);\n\n    for (key in one_map) {\n      if (hasOwn.call(one_map, key)) {\n        if (!isArray(one_map[key])) {\n          if (one_map[key] !== two_map[key]) {\n            return false;\n          }\n        } else if (!arraysEqual(one_map[key], two_map[key])) {\n          return false;\n        }\n\n        checked[key] = true;\n      }\n    }\n\n    for (key in two_map) {\n      if (hasOwn.call(two_map, key)) {\n        if (!checked[key]) {\n          // two contains a parameter not present in one\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  // state\n  p.preventInvalidHostname = function(v) {\n    this._parts.preventInvalidHostname = !!v;\n    return this;\n  };\n\n  p.duplicateQueryParameters = function(v) {\n    this._parts.duplicateQueryParameters = !!v;\n    return this;\n  };\n\n  p.escapeQuerySpace = function(v) {\n    this._parts.escapeQuerySpace = !!v;\n    return this;\n  };\n\n  return URI;\n}));\n","/*! https://mths.be/punycode v1.4.0 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport { Sandbox, SandboxRegistry } from 'runtime-core/dist/sandbox';\nimport MiniBus from 'runtime-core/dist/minibus';\n\nfunction create(iframe) {\n  window._miniBus = new MiniBus();\n  window._miniBus._onPostMessage = function(msg) {\n    iframe.contentWindow.postMessage(msg, '*');\n  };\n  window.addEventListener('message', function(event) {\n    if (event.data.to && (event.data.to.startsWith('runtime:loadedHyperty') || event.data.to.endsWith('gui-manager'))) { return; }\n\n    window._miniBus._onMessage(event.data);\n  }, false);\n\n  window._registry = new SandboxRegistry(window._miniBus);\n  window._registry._create = function(url, sourceCode, config) {\n    try {\n      eval.apply(window, [sourceCode]);\n\n      if (typeof activate === 'function') {\n        return activate(url, window._miniBus, config);\n      }\n\n      if (typeof activate.default === 'function') {\n        return activate.default(url, window._miniBus, config);\n      }\n\n    } catch (error) {\n      console.error('[Context APP Create] - Error: ', error);\n      throw JSON.stringify(error.message);\n    }\n  };\n}\n\nfunction getHyperty(hypertyDescriptor) {\n  return window._registry.components[hypertyDescriptor];\n}\n\n/**\n * SandboxContext for application\n * @typedef ContextApp\n * @property {function(iFrame: iframe)} create Creates the context for the sandbox hosted in the iframe\n * @property {function(Hyperty descriptor: string):Hyperty} getHyperty Returns the hyperty for the given descriptor\n * */\nexport default { create, getHyperty };\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport RethinkBrowser from './RuntimeUAStub'\n\nlet rethink;\n\nif( typeof window != undefined && window != null ){\n    rethink = RethinkBrowser\n}else{\n    rethink = undefined\n}\n\nexport default rethink\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n * @external {MSG_STATUS} https://github.com/reTHINK-project/core-framework/tree/master/docs/specs/service-framework\n */\n\nimport app from './ContextApp';\nimport URI from 'urijs';\nimport { create as createIframe } from './iframe';\n\nlet iframe = undefined;\n\n/**\n * @typedef {Object} Hyperty\n * @property {string} runtimeHypertyURL - Hyperty address\n * @property {MSG_STATUS} status - Hyperty status\n * @property {Object} instance - Hyperty object\n * @property {string} name - Hyperty name\n */\nlet buildMsg = (hypertyComponent, msg) => {\n  return {\n    runtimeHypertyURL: msg.body.runtimeHypertyURL,\n    status: msg.body.status,\n    instance: hypertyComponent.instance,\n    name: hypertyComponent.name\n  };\n};\n\n/**\n * @typedef {Object} RuntimeAdapter\n * @property {function(Hyperty descriptor: string, Hyperty addresses to be reused or empty in other case: string): Promise<Hyperty>} requireHyperty - Loads and returns a Hyperty\n * @property {function(Domain: string)} requireProtostub - Loads a protostub from the given domain\n * @property {function(): Promise} close - Unloads and closes the installed runtime\n */\nlet runtimeAdapter = {\n  requireHyperty: (hypertyDescriptor, reuseAddress = false)=>{\n    return new Promise((resolve, reject)=>{\n      let loaded = (e)=>{\n        if (e.data.to === 'runtime:loadedHyperty') {\n          window.removeEventListener('message', loaded);\n          resolve(buildMsg(app.getHyperty(e.data.body.runtimeHypertyURL), e.data));\n        }\n      };\n      window.addEventListener('message', loaded);\n      iframe.contentWindow.postMessage({to: 'core:loadHyperty', body: {descriptor: hypertyDescriptor, reuseAddress}}, '*');\n    });\n  },\n\n  requireProtostub: (domain)=>{\n    iframe.contentWindow.postMessage({to: 'core:loadStub', body: {domain: domain}}, '*');\n  },\n\n  close: ()=>{\n    return new Promise((resolve, reject)=>{\n      let loaded = (e)=>{\n        if (e.data.to === 'runtime:runtimeClosed') {\n          window.removeEventListener('message', loaded);\n          resolve(resolve(e.data.body));\n        }\n      };\n      window.addEventListener('message', loaded);\n      iframe.contentWindow.postMessage({to: 'core:close', body: {}}, '*');\n    });\n  }\n};\n\nlet GuiManager = function() {\n  window.addEventListener('message', (e) => {\n    if (e.data.to === 'runtime:gui-manager') {\n\n      if (e.data.body.method === 'showAdminPage') {\n        iframe.style.width = '100%';\n        iframe.style.height = '100%';\n      } else {\n        if (e.data.body.method === 'hideAdminPage') {\n          iframe.style.width = '40px';\n          iframe.style.height = '40px';\n        }\n      }\n\n    }\n  });\n};\n\n/**\n * @typedef {Object} RuntimeUA\n * @property {function(Runtime domain: string, Runtime url: string, Development mode: boolean): Promise<RuntimeAdapter>} install - Installs a runtime locally\n */\nlet RethinkBrowser = {\n  install: function({domain, runtimeURL, development, indexURL, sandboxURL} = {}) {\n    console.info('Install: ', domain, runtimeURL, development, indexURL, sandboxURL);\n    return new Promise((resolve, reject)=>{\n      let runtime = this._getRuntime(runtimeURL, domain, development, indexURL, sandboxURL);\n      iframe = createIframe(`${runtime.indexURL}?domain=${runtime.domain}&runtime=${runtime.url}&development=${development}`);\n      let installed = (e)=>{\n        if (e.data.to === 'runtime:installed') {\n          window.removeEventListener('message', installed);\n          resolve(runtimeAdapter);\n        }\n      };\n      window.addEventListener('message', installed);\n      window.addEventListener('message', (e) => {\n        if (e.data.to && e.data.to === 'runtime:createSandboxWindow') {\n          const ifr = createIframe(runtime.sandboxURL);\n          ifr.addEventListener('load', () => {\n            ifr.contentWindow.postMessage(e.data, '*', e.ports);\n          }, false);\n        }\n      });\n      app.create(iframe);\n      GuiManager();\n    });\n  },\n\n  _getRuntime(runtimeURL, domain, development, indexURL, sandboxURL) {\n    if (!!development) {\n      runtimeURL = runtimeURL || 'hyperty-catalogue://catalogue.' + domain + '/.well-known/runtime/Runtime';\n      domain = domain || new URI(runtimeURL).host();\n      indexURL = indexURL || 'https://' + domain + '/.well-known/runtime/index.html';\n      sandboxURL = sandboxURL || 'https://' + domain + '/.well-known/runtime/sandbox.html';\n    } else {\n      runtimeURL = runtimeURL || `https://catalogue.${domain}/.well-known/runtime/default`;\n      domain = domain || new URI(runtimeURL).host().replace('catalogue.', '');\n      indexURL = indexURL || 'https://' + domain + '/.well-known/runtime/index.html';\n      sandboxURL = sandboxURL || 'https://' + domain + '/.well-known/runtime/sandbox.html';\n    }\n\n    console.info('get Runtime: ', runtimeURL, domain, indexURL, sandboxURL);\n\n    return {\n      url: runtimeURL,\n      domain: domain,\n      indexURL: indexURL,\n      sandboxURL: sandboxURL\n    };\n  }\n};\n\nexport default RethinkBrowser;\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n * @external {iframe} https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n */\n\n/**\n * Creates an iframe\n * @param {string} src - Url to load into the iframe\n * @return {iframe} - iFrame element\n */\nexport function create(src) {\n\tvar iframe = document.createElement('iframe')\n\tiframe.setAttribute('id', 'rethink')\n\tiframe.style.position = 'absolute'\n\tiframe.style.top = '0'\n\tiframe.style.right = '0'\n\tiframe.style.border = '0'\n\tiframe.style.zIndex = 9999\n\tiframe.width = '40px'\n\tiframe.height = '40px'\n\tiframe.title = 'reTHINK-project'\n\tiframe.setAttribute('seamless', '')\n\tiframe.setAttribute('src', src)\n\tiframe.setAttribute('sandbox', 'allow-forms allow-scripts allow-popups-to-escape-sandbox allow-popups allow-same-origin allow-top-navigation')\n\tiframe.style.display = 'block'\n\tdocument.querySelector('body').appendChild(iframe)\n\n\treturn iframe\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}