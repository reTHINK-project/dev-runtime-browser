{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/dexie/dist/dexie.js","node_modules/process/browser.js","node_modules/runtime-core/dist/minibus.js","node_modules/runtime-core/dist/sandbox.js","node_modules/service-framework/dist/PersistenceManager.js","node_modules/service-framework/dist/RuntimeCatalogue.js","node_modules/service-framework/dist/StorageManager.js","node_modules/timers-browserify/main.js","node_modules/urijs/src/IPv6.js","node_modules/urijs/src/SecondLevelDomains.js","node_modules/urijs/src/URI.js","node_modules/urijs/src/punycode.js","src/Request.js","src/RuntimeCapabilities.js","src/RuntimeFactory.js","src/SandboxApp.js","src/Sandboxes.js","src/admin/IdentitiesGUI.js","src/admin/PoliciesGUI.js","src/admin/PoliciesManager.js","src/core.js"],"names":[],"mappingsxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzrlyrhBA;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAM,UAAU,EAAC,KAAK,KAAN,EAAa,MAAM;AACnC;;;;;;;AAOA;;;AARgB,CAAhB;IAWM,O;AAEL,oBAAc;AAAA;;AACb,MAAI,QAAQ,IAAZ;;AAEA,SAAO,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAS,MAAT,EAAiB;AAC7C,SAAM,QAAQ,MAAR,CAAN,IAAyB,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC/C,WAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC5C,WAAM,iBAAN,CAAwB,QAAQ,MAAR,EAAgB,WAAhB,EAAxB,EAAuD,GAAvD,EAA4D,OAA5D,EAAqE,IAArE,CAA0E,UAAS,MAAT,EAAiB;AAC1F,cAAQ,MAAR;AACA,MAFD,EAEG,KAFH,CAES,UAAS,MAAT,EAAiB;AACzB,aAAO,MAAP;AACA,MAJD;AAKA,KANM,CAAP;AAOA,IARD;AASA,GAVD;AAWA;;;;oCAEiB,M,EAAQ,G,EAAK,O,EAAS;AACvC,OAAI,QAAQ,IAAZ;;AAEA,UAAO,IAAI,OAAJ,CAAY,UAAS,OAAT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","file":"core.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n   typeof define === 'function' && define.amd ? define(factory) :\n   (global.Dexie = factory());\n}(this, (function () { 'use strict';\n\n/*\r\n* Dexie.js - a minimalistic wrapper for IndexedDB\r\n* ===============================================\r\n*\r\n* By David Fahlander, david.fahlander@gmail.com\r\n*\r\n* Version 1.5.1, Tue Nov 01 2016\r\n* www.dexie.com\r\n* Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n*/\nvar keys = Object.keys;\nvar isArray = Array.isArray;\nvar _global = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : global;\n\nfunction extend(obj, extension) {\n    if (typeof extension !== 'object') return obj;\n    keys(extension).forEach(function (key) {\n        obj[key] = extension[key];\n    });\n    return obj;\n}\n\nvar getProto = Object.getPrototypeOf;\nvar _hasOwn = {}.hasOwnProperty;\nfunction hasOwn(obj, prop) {\n    return _hasOwn.call(obj, prop);\n}\n\nfunction props(proto, extension) {\n    if (typeof extension === 'function') extension = extension(getProto(proto));\n    keys(extension).forEach(function (key) {\n        setProp(proto, key, extension[key]);\n    });\n}\n\nfunction setProp(obj, prop, functionOrGetSet, options) {\n    Object.defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, \"get\") && typeof functionOrGetSet.get === 'function' ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));\n}\n\nfunction derive(Child) {\n    return {\n        from: function (Parent) {\n            Child.prototype = Object.create(Parent.prototype);\n            setProp(Child.prototype, \"constructor\", Child);\n            return {\n                extend: props.bind(null, Child.prototype)\n            };\n        }\n    };\n}\n\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\nfunction getPropertyDescriptor(obj, prop) {\n    var pd = getOwnPropertyDescriptor(obj, prop),\n        proto;\n    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);\n}\n\nvar _slice = [].slice;\nfunction slice(args, start, end) {\n    return _slice.call(args, start, end);\n}\n\nfunction override(origFunc, overridedFactory) {\n    return overridedFactory(origFunc);\n}\n\nfunction doFakeAutoComplete(fn) {\n    var to = setTimeout(fn, 1000);\n    clearTimeout(to);\n}\n\nfunction assert(b) {\n    if (!b) throw new Error(\"Assertion Failed\");\n}\n\nfunction asap(fn) {\n    if (_global.setImmediate) setImmediate(fn);else setTimeout(fn, 0);\n}\n\n\n\n/** Generate an object (hash map) based on given array.\r\n * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to\r\n *        instert on the resulting object for each item in the array. If this function returns a falsy value, the\r\n *        current item wont affect the resulting object.\r\n */\nfunction arrayToObject(array, extractor) {\n    return array.reduce(function (result, item, i) {\n        var nameAndValue = extractor(item, i);\n        if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];\n        return result;\n    }, {});\n}\n\nfunction trycatcher(fn, reject) {\n    return function () {\n        try {\n            fn.apply(this, arguments);\n        } catch (e) {\n            reject(e);\n        }\n    };\n}\n\nfunction tryCatch(fn, onerror, args) {\n    try {\n        fn.apply(null, args);\n    } catch (ex) {\n        onerror && onerror(ex);\n    }\n}\n\nfunction getByKeyPath(obj, keyPath) {\n    // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path\n    if (hasOwn(obj, keyPath)) return obj[keyPath]; // This line is moved from last to first for optimization purpose.\n    if (!keyPath) return obj;\n    if (typeof keyPath !== 'string') {\n        var rv = [];\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            var val = getByKeyPath(obj, keyPath[i]);\n            rv.push(val);\n        }\n        return rv;\n    }\n    var period = keyPath.indexOf('.');\n    if (period !== -1) {\n        var innerObj = obj[keyPath.substr(0, period)];\n        return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));\n    }\n    return undefined;\n}\n\nfunction setByKeyPath(obj, keyPath, value) {\n    if (!obj || keyPath === undefined) return;\n    if ('isFrozen' in Object && Object.isFrozen(obj)) return;\n    if (typeof keyPath !== 'string' && 'length' in keyPath) {\n        assert(typeof value !== 'string' && 'length' in value);\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            setByKeyPath(obj, keyPath[i], value[i]);\n        }\n    } else {\n        var period = keyPath.indexOf('.');\n        if (period !== -1) {\n            var currentKeyPath = keyPath.substr(0, period);\n            var remainingKeyPath = keyPath.substr(period + 1);\n            if (remainingKeyPath === \"\") {\n                if (value === undefined) delete obj[currentKeyPath];else obj[currentKeyPath] = value;\n            } else {\n                var innerObj = obj[currentKeyPath];\n                if (!innerObj) innerObj = obj[currentKeyPath] = {};\n                setByKeyPath(innerObj, remainingKeyPath, value);\n            }\n        } else {\n            if (value === undefined) delete obj[keyPath];else obj[keyPath] = value;\n        }\n    }\n}\n\nfunction delByKeyPath(obj, keyPath) {\n    if (typeof keyPath === 'string') setByKeyPath(obj, keyPath, undefined);else if ('length' in keyPath) [].map.call(keyPath, function (kp) {\n        setByKeyPath(obj, kp, undefined);\n    });\n}\n\nfunction shallowClone(obj) {\n    var rv = {};\n    for (var m in obj) {\n        if (hasOwn(obj, m)) rv[m] = obj[m];\n    }\n    return rv;\n}\n\nfunction deepClone(any) {\n    if (!any || typeof any !== 'object') return any;\n    var rv;\n    if (isArray(any)) {\n        rv = [];\n        for (var i = 0, l = any.length; i < l; ++i) {\n            rv.push(deepClone(any[i]));\n        }\n    } else if (any instanceof Date) {\n        rv = new Date();\n        rv.setTime(any.getTime());\n    } else {\n        rv = any.constructor ? Object.create(any.constructor.prototype) : {};\n        for (var prop in any) {\n            if (hasOwn(any, prop)) {\n                rv[prop] = deepClone(any[prop]);\n            }\n        }\n    }\n    return rv;\n}\n\nfunction getObjectDiff(a, b, rv, prfx) {\n    // Compares objects a and b and produces a diff object.\n    rv = rv || {};\n    prfx = prfx || '';\n    keys(a).forEach(function (prop) {\n        if (!hasOwn(b, prop)) rv[prfx + prop] = undefined; // Property removed\n        else {\n                var ap = a[prop],\n                    bp = b[prop];\n                if (typeof ap === 'object' && typeof bp === 'object' && ap && bp && ap.constructor === bp.constructor)\n                    // Same type of object but its properties may have changed\n                    getObjectDiff(ap, bp, rv, prfx + prop + \".\");else if (ap !== bp) rv[prfx + prop] = b[prop]; // Primitive value changed\n            }\n    });\n    keys(b).forEach(function (prop) {\n        if (!hasOwn(a, prop)) {\n            rv[prfx + prop] = b[prop]; // Property added\n        }\n    });\n    return rv;\n}\n\n// If first argument is iterable or array-like, return it as an array\nvar iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;\nvar getIteratorOf = iteratorSymbol ? function (x) {\n    var i;\n    return x != null && (i = x[iteratorSymbol]) && i.apply(x);\n} : function () {\n    return null;\n};\n\nvar NO_CHAR_ARRAY = {};\n// Takes one or several arguments and returns an array based on the following criteras:\n// * If several arguments provided, return arguments converted to an array in a way that\n//   still allows javascript engine to optimize the code.\n// * If single argument is an array, return a clone of it.\n// * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special\n//   case to the two bullets below.\n// * If single argument is an iterable, convert it to an array and return the resulting array.\n// * If single argument is array-like (has length of type number), convert it to an array.\nfunction getArrayOf(arrayLike) {\n    var i, a, x, it;\n    if (arguments.length === 1) {\n        if (isArray(arrayLike)) return arrayLike.slice();\n        if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string') return [arrayLike];\n        if (it = getIteratorOf(arrayLike)) {\n            a = [];\n            while (x = it.next(), !x.done) {\n                a.push(x.value);\n            }return a;\n        }\n        if (arrayLike == null) return [arrayLike];\n        i = arrayLike.length;\n        if (typeof i === 'number') {\n            a = new Array(i);\n            while (i--) {\n                a[i] = arrayLike[i];\n            }return a;\n        }\n        return [arrayLike];\n    }\n    i = arguments.length;\n    a = new Array(i);\n    while (i--) {\n        a[i] = arguments[i];\n    }return a;\n}\n\nvar concat = [].concat;\nfunction flatten(a) {\n    return concat.apply([], a);\n}\n\nfunction nop() {}\nfunction mirror(val) {\n    return val;\n}\nfunction pureFunctionChain(f1, f2) {\n    // Enables chained events that takes ONE argument and returns it to the next function in chain.\n    // This pattern is used in the hook(\"reading\") event.\n    if (f1 == null || f1 === mirror) return f2;\n    return function (val) {\n        return f2(f1(val));\n    };\n}\n\nfunction callBoth(on1, on2) {\n    return function () {\n        on1.apply(this, arguments);\n        on2.apply(this, arguments);\n    };\n}\n\nfunction hookCreatingChain(f1, f2) {\n    // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.\n    // This pattern is used in the hook(\"creating\") event.\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res !== undefined) arguments[0] = res;\n        var onsuccess = this.onsuccess,\n            // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res2 !== undefined ? res2 : res;\n    };\n}\n\nfunction hookDeletingChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        f1.apply(this, arguments);\n        var onsuccess = this.onsuccess,\n            // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = this.onerror = null;\n        f2.apply(this, arguments);\n        if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n    };\n}\n\nfunction hookUpdatingChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function (modifications) {\n        var res = f1.apply(this, arguments);\n        extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.\n        var onsuccess = this.onsuccess,\n            // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res === undefined ? res2 === undefined ? undefined : res2 : extend(res, res2);\n    };\n}\n\nfunction reverseStoppableEventChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        if (f2.apply(this, arguments) === false) return false;\n        return f1.apply(this, arguments);\n    };\n}\n\n\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this,\n                i = arguments.length,\n                args = new Array(i);\n            while (i--) {\n                args[i] = arguments[i];\n            }return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n// By default, debug will be true only if platform is a web platform and its page is served from localhost.\n// When debug = true, error's stacks will contain asyncronic long stacks.\nvar debug = typeof location !== 'undefined' &&\n// By default, use debug mode if served from localhost.\n/^(http|https):\\/\\/(localhost|127\\.0\\.0\\.1)/.test(location.href);\n\nfunction setDebug(value, filter) {\n    debug = value;\n    libraryFilter = filter;\n}\n\nvar libraryFilter = function () {\n    return true;\n};\n\nvar NEEDS_THROW_FOR_STACK = !new Error(\"\").stack;\n\nfunction getErrorWithStack() {\n    \"use strict\";\n\n    if (NEEDS_THROW_FOR_STACK) try {\n        // Doing something naughty in strict mode here to trigger a specific error\n        // that can be explicitely ignored in debugger's exception settings.\n        // If we'd just throw new Error() here, IE's debugger's exception settings\n        // will just consider it as \"exception thrown by javascript code\" which is\n        // something you wouldn't want it to ignore.\n        getErrorWithStack.arguments;\n        throw new Error(); // Fallback if above line don't throw.\n    } catch (e) {\n        return e;\n    }\n    return new Error();\n}\n\nfunction prettyStack(exception, numIgnoredFrames) {\n    var stack = exception.stack;\n    if (!stack) return \"\";\n    numIgnoredFrames = numIgnoredFrames || 0;\n    if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split('\\n').length;\n    return stack.split('\\n').slice(numIgnoredFrames).filter(libraryFilter).map(function (frame) {\n        return \"\\n\" + frame;\n    }).join('');\n}\n\nfunction deprecated(what, fn) {\n    return function () {\n        console.warn(what + \" is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. \" + prettyStack(getErrorWithStack(), 1));\n        return fn.apply(this, arguments);\n    };\n}\n\nvar dexieErrorNames = ['Modify', 'Bulk', 'OpenFailed', 'VersionChange', 'Schema', 'Upgrade', 'InvalidTable', 'MissingAPI', 'NoSuchDatabase', 'InvalidArgument', 'SubTransaction', 'Unsupported', 'Internal', 'DatabaseClosed', 'IncompatiblePromise'];\n\nvar idbDomErrorNames = ['Unknown', 'Constraint', 'Data', 'TransactionInactive', 'ReadOnly', 'Version', 'NotFound', 'InvalidState', 'InvalidAccess', 'Abort', 'Timeout', 'QuotaExceeded', 'Syntax', 'DataClone'];\n\nvar errorList = dexieErrorNames.concat(idbDomErrorNames);\n\nvar defaultTexts = {\n    VersionChanged: \"Database version changed by other database connection\",\n    DatabaseClosed: \"Database has been closed\",\n    Abort: \"Transaction aborted\",\n    TransactionInactive: \"Transaction has already completed or failed\"\n};\n\n//\n// DexieError - base class of all out exceptions.\n//\nfunction DexieError(name, msg) {\n    // Reason we don't use ES6 classes is because:\n    // 1. It bloats transpiled code and increases size of minified code.\n    // 2. It doesn't give us much in this case.\n    // 3. It would require sub classes to call super(), which\n    //    is not needed when deriving from Error.\n    this._e = getErrorWithStack();\n    this.name = name;\n    this.message = msg;\n}\n\nderive(DexieError).from(Error).extend({\n    stack: {\n        get: function () {\n            return this._stack || (this._stack = this.name + \": \" + this.message + prettyStack(this._e, 2));\n        }\n    },\n    toString: function () {\n        return this.name + \": \" + this.message;\n    }\n});\n\nfunction getMultiErrorMessage(msg, failures) {\n    return msg + \". Errors: \" + failures.map(function (f) {\n        return f.toString();\n    }).filter(function (v, i, s) {\n        return s.indexOf(v) === i;\n    }) // Only unique error strings\n    .join('\\n');\n}\n\n//\n// ModifyError - thrown in WriteableCollection.modify()\n// Specific constructor because it contains members failures and failedKeys.\n//\nfunction ModifyError(msg, failures, successCount, failedKeys) {\n    this._e = getErrorWithStack();\n    this.failures = failures;\n    this.failedKeys = failedKeys;\n    this.successCount = successCount;\n}\nderive(ModifyError).from(DexieError);\n\nfunction BulkError(msg, failures) {\n    this._e = getErrorWithStack();\n    this.name = \"BulkError\";\n    this.failures = failures;\n    this.message = getMultiErrorMessage(msg, failures);\n}\nderive(BulkError).from(DexieError);\n\n//\n//\n// Dynamically generate error names and exception classes based\n// on the names in errorList.\n//\n//\n\n// Map of {ErrorName -> ErrorName + \"Error\"}\nvar errnames = errorList.reduce(function (obj, name) {\n    return obj[name] = name + \"Error\", obj;\n}, {});\n\n// Need an alias for DexieError because we're gonna create subclasses with the same name.\nvar BaseException = DexieError;\n// Map of {ErrorName -> exception constructor}\nvar exceptions = errorList.reduce(function (obj, name) {\n    // Let the name be \"DexieError\" because this name may\n    // be shown in call stack and when debugging. DexieError is\n    // the most true name because it derives from DexieError,\n    // and we cannot change Function.name programatically without\n    // dynamically create a Function object, which would be considered\n    // 'eval-evil'.\n    var fullName = name + \"Error\";\n    function DexieError(msgOrInner, inner) {\n        this._e = getErrorWithStack();\n        this.name = fullName;\n        if (!msgOrInner) {\n            this.message = defaultTexts[name] || fullName;\n            this.inner = null;\n        } else if (typeof msgOrInner === 'string') {\n            this.message = msgOrInner;\n            this.inner = inner || null;\n        } else if (typeof msgOrInner === 'object') {\n            this.message = msgOrInner.name + ' ' + msgOrInner.message;\n            this.inner = msgOrInner;\n        }\n    }\n    derive(DexieError).from(BaseException);\n    obj[name] = DexieError;\n    return obj;\n}, {});\n\n// Use ECMASCRIPT standard exceptions where applicable:\nexceptions.Syntax = SyntaxError;\nexceptions.Type = TypeError;\nexceptions.Range = RangeError;\n\nvar exceptionMap = idbDomErrorNames.reduce(function (obj, name) {\n    obj[name + \"Error\"] = exceptions[name];\n    return obj;\n}, {});\n\nfunction mapError(domError, message) {\n    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name]) return domError;\n    var rv = new exceptionMap[domError.name](message || domError.message, domError);\n    if (\"stack\" in domError) {\n        // Derive stack from inner exception if it has a stack\n        setProp(rv, \"stack\", { get: function () {\n                return this.inner.stack;\n            } });\n    }\n    return rv;\n}\n\nvar fullNameExceptions = errorList.reduce(function (obj, name) {\n    if ([\"Syntax\", \"Type\", \"Range\"].indexOf(name) === -1) obj[name + \"Error\"] = exceptions[name];\n    return obj;\n}, {});\n\nfullNameExceptions.ModifyError = ModifyError;\nfullNameExceptions.DexieError = DexieError;\nfullNameExceptions.BulkError = BulkError;\n\nfunction Events(ctx) {\n    var evs = {};\n    var rv = function (eventName, subscriber) {\n        if (subscriber) {\n            // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.\n            var i = arguments.length,\n                args = new Array(i - 1);\n            while (--i) {\n                args[i - 1] = arguments[i];\n            }evs[eventName].subscribe.apply(null, args);\n            return ctx;\n        } else if (typeof eventName === 'string') {\n            // Return interface allowing to fire or unsubscribe from event\n            return evs[eventName];\n        }\n    };\n    rv.addEventType = add;\n\n    for (var i = 1, l = arguments.length; i < l; ++i) {\n        add(arguments[i]);\n    }\n\n    return rv;\n\n    function add(eventName, chainFunction, defaultFunction) {\n        if (typeof eventName === 'object') return addConfiguredEvents(eventName);\n        if (!chainFunction) chainFunction = reverseStoppableEventChain;\n        if (!defaultFunction) defaultFunction = nop;\n\n        var context = {\n            subscribers: [],\n            fire: defaultFunction,\n            subscribe: function (cb) {\n                if (context.subscribers.indexOf(cb) === -1) {\n                    context.subscribers.push(cb);\n                    context.fire = chainFunction(context.fire, cb);\n                }\n            },\n            unsubscribe: function (cb) {\n                context.subscribers = context.subscribers.filter(function (fn) {\n                    return fn !== cb;\n                });\n                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);\n            }\n        };\n        evs[eventName] = rv[eventName] = context;\n        return context;\n    }\n\n    function addConfiguredEvents(cfg) {\n        // events(this, {reading: [functionChain, nop]});\n        keys(cfg).forEach(function (eventName) {\n            var args = cfg[eventName];\n            if (isArray(args)) {\n                add(eventName, cfg[eventName][0], cfg[eventName][1]);\n            } else if (args === 'asap') {\n                // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack\n                // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.\n                var context = add(eventName, mirror, function fire() {\n                    // Optimazation-safe cloning of arguments into args.\n                    var i = arguments.length,\n                        args = new Array(i);\n                    while (i--) {\n                        args[i] = arguments[i];\n                    } // All each subscriber:\n                    context.subscribers.forEach(function (fn) {\n                        asap(function fireEvent() {\n                            fn.apply(null, args);\n                        });\n                    });\n                });\n            } else throw new exceptions.InvalidArgument(\"Invalid event config\");\n        });\n    }\n}\n\n//\n// Promise Class for Dexie library\n//\n// I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by\n// https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.\n//\n// Modifications needed to be done to support indexedDB because it wont accept setTimeout()\n// (See discussion: https://github.com/promises-aplus/promises-spec/issues/45) .\n// This topic was also discussed in the following thread: https://github.com/promises-aplus/promises-spec/issues/45\n//\n// This implementation will not use setTimeout or setImmediate when it's not needed. The behavior is 100% Promise/A+ compliant since\n// the caller of new Promise() can be certain that the promise wont be triggered the lines after constructing the promise.\n//\n// In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another\n// tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use\n// another strategy now that simplifies everything a lot: to always execute callbacks in a new tick, but have an own microTick\n// engine that is used instead of setImmediate() or setTimeout().\n// Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.\n// Also with inspiration from bluebird, asyncronic stacks in debug mode.\n//\n// Specific non-standard features of this Promise class:\n// * Async static context support (Promise.PSD)\n// * Promise.follow() method built upon PSD, that allows user to track all promises created from current stack frame\n//   and below + all promises that those promises creates or awaits.\n// * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). \n//\n// David Fahlander, https://github.com/dfahlander\n//\n\n// Just a pointer that only this module knows about.\n// Used in Promise constructor to emulate a private constructor.\nvar INTERNAL = {};\n\n// Async stacks (long stacks) must not grow infinitely.\nvar LONG_STACKS_CLIP_LIMIT = 100;\nvar MAX_LONG_STACKS = 20;\nvar stack_being_generated = false;\n\n/* The default \"nextTick\" function used only for the very first promise in a promise chain.\r\n   As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks\r\n   emulated in this module. For indexedDB compatibility, this means that every method needs to \r\n   execute at least one promise before doing an indexedDB operation. Dexie will always call \r\n   db.ready().then() for every operation to make sure the indexedDB event is started in an\r\n   emulated micro tick.\r\n*/\nvar schedulePhysicalTick = _global.setImmediate ?\n// setImmediate supported. Those modern platforms also supports Function.bind().\nsetImmediate.bind(null, physicalTick) : _global.MutationObserver ?\n// MutationObserver supported\nfunction () {\n    var hiddenDiv = document.createElement(\"div\");\n    new MutationObserver(function () {\n        physicalTick();\n        hiddenDiv = null;\n    }).observe(hiddenDiv, { attributes: true });\n    hiddenDiv.setAttribute('i', '1');\n} :\n// No support for setImmediate or MutationObserver. No worry, setTimeout is only called\n// once time. Every tick that follows will be our emulated micro tick.\n// Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug \nfunction () {\n    setTimeout(physicalTick, 0);\n};\n\n// Confifurable through Promise.scheduler.\n// Don't export because it would be unsafe to let unknown\n// code call it unless they do try..catch within their callback.\n// This function can be retrieved through getter of Promise.scheduler though,\n// but users must not do Promise.scheduler (myFuncThatThrows exception)!\nvar asap$1 = function (callback, args) {\n    microtickQueue.push([callback, args]);\n    if (needsNewPhysicalTick) {\n        schedulePhysicalTick();\n        needsNewPhysicalTick = false;\n    }\n};\n\nvar isOutsideMicroTick = true;\nvar needsNewPhysicalTick = true;\nvar unhandledErrors = [];\nvar rejectingErrors = [];\nvar currentFulfiller = null;\nvar rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions\n\nvar globalPSD = {\n    global: true,\n    ref: 0,\n    unhandleds: [],\n    onunhandled: globalError,\n    //env: null, // Will be set whenever leaving a scope using wrappers.snapshot()\n    finalize: function () {\n        this.unhandleds.forEach(function (uh) {\n            try {\n                globalError(uh[0], uh[1]);\n            } catch (e) {}\n        });\n    }\n};\n\nvar PSD = globalPSD;\n\nvar microtickQueue = []; // Callbacks to call in this or next physical tick.\nvar numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.\nvar tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.\n\n// Wrappers are not being used yet. Their framework is functioning and can be used\n// to replace environment during a PSD scope (a.k.a. 'zone').\n/* **KEEP** export var wrappers = (() => {\r\n    var wrappers = [];\r\n\r\n    return {\r\n        snapshot: () => {\r\n            var i = wrappers.length,\r\n                result = new Array(i);\r\n            while (i--) result[i] = wrappers[i].snapshot();\r\n            return result;\r\n        },\r\n        restore: values => {\r\n            var i = wrappers.length;\r\n            while (i--) wrappers[i].restore(values[i]);\r\n        },\r\n        wrap: () => wrappers.map(w => w.wrap()),\r\n        add: wrapper => {\r\n            wrappers.push(wrapper);\r\n        }\r\n    };\r\n})();\r\n*/\n\nfunction Promise(fn) {\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n    this._listeners = [];\n    this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.\n\n    // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()\n    // execute the microtask engine implicitely within the call to resolve() or reject().\n    // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack\n    // only contains library code when calling resolve() or reject().\n    // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from\n    // global scope (event handler, timer etc)!\n    this._lib = false;\n    // Current async scope\n    var psd = this._PSD = PSD;\n\n    if (debug) {\n        this._stackHolder = getErrorWithStack();\n        this._prev = null;\n        this._numPrev = 0; // Number of previous promises (for long stacks)\n        linkToPreviousPromise(this, currentFulfiller);\n    }\n\n    if (typeof fn !== 'function') {\n        if (fn !== INTERNAL) throw new TypeError('Not a function');\n        // Private constructor (INTERNAL, state, value).\n        // Used internally by Promise.resolve() and Promise.reject().\n        this._state = arguments[1];\n        this._value = arguments[2];\n        if (this._state === false) handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().\n        return;\n    }\n\n    this._state = null; // null (=pending), false (=rejected) or true (=resolved)\n    this._value = null; // error or result\n    ++psd.ref; // Refcounting current scope\n    executePromiseTask(this, fn);\n}\n\nprops(Promise.prototype, {\n\n    then: function (onFulfilled, onRejected) {\n        var _this = this;\n\n        var rv = new Promise(function (resolve, reject) {\n            propagateToListener(_this, new Listener(onFulfilled, onRejected, resolve, reject));\n        });\n        debug && (!this._prev || this._state === null) && linkToPreviousPromise(rv, this);\n        return rv;\n    },\n\n    _then: function (onFulfilled, onRejected) {\n        // A little tinier version of then() that don't have to create a resulting promise.\n        propagateToListener(this, new Listener(null, null, onFulfilled, onRejected));\n    },\n\n    catch: function (onRejected) {\n        if (arguments.length === 1) return this.then(null, onRejected);\n        // First argument is the Error type to catch\n        var type = arguments[0],\n            handler = arguments[1];\n        return typeof type === 'function' ? this.then(null, function (err) {\n            return (\n                // Catching errors by its constructor type (similar to java / c++ / c#)\n                // Sample: promise.catch(TypeError, function (e) { ... });\n                err instanceof type ? handler(err) : PromiseReject(err)\n            );\n        }) : this.then(null, function (err) {\n            return (\n                // Catching errors by the error.name property. Makes sense for indexedDB where error type\n                // is always DOMError but where e.name tells the actual error type.\n                // Sample: promise.catch('ConstraintError', function (e) { ... });\n                err && err.name === type ? handler(err) : PromiseReject(err)\n            );\n        });\n    },\n\n    finally: function (onFinally) {\n        return this.then(function (value) {\n            onFinally();\n            return value;\n        }, function (err) {\n            onFinally();\n            return PromiseReject(err);\n        });\n    },\n\n    // Deprecate in next major. Needed only for db.on.error.\n    uncaught: function (uncaughtHandler) {\n        var _this2 = this;\n\n        // Be backward compatible and use \"onuncatched\" as the event name on this.\n        // Handle multiple subscribers through reverseStoppableEventChain(). If a handler returns `false`, bubbling stops.\n        this.onuncatched = reverseStoppableEventChain(this.onuncatched, uncaughtHandler);\n        // In case caller does this on an already rejected promise, assume caller wants to point out the error to this promise and not\n        // a previous promise. Reason: the prevous promise may lack onuncatched handler. \n        if (this._state === false && unhandledErrors.indexOf(this) === -1) {\n            // Replace unhandled error's destinaion promise with this one!\n            unhandledErrors.some(function (p, i, l) {\n                return p._value === _this2._value && (l[i] = _this2);\n            });\n            // Actually we do this shit because we need to support db.on.error() correctly during db.open(). If we deprecate db.on.error, we could\n            // take away this piece of code as well as the onuncatched and uncaught() method.\n        }\n        return this;\n    },\n\n    stack: {\n        get: function () {\n            if (this._stack) return this._stack;\n            try {\n                stack_being_generated = true;\n                var stacks = getStack(this, [], MAX_LONG_STACKS);\n                var stack = stacks.join(\"\\nFrom previous: \");\n                if (this._state !== null) this._stack = stack; // Stack may be updated on reject.\n                return stack;\n            } finally {\n                stack_being_generated = false;\n            }\n        }\n    }\n});\n\nfunction Listener(onFulfilled, onRejected, resolve, reject) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.resolve = resolve;\n    this.reject = reject;\n    this.psd = PSD;\n}\n\n// Promise Static Properties\nprops(Promise, {\n    all: function () {\n        var values = getArrayOf.apply(null, arguments); // Supports iterables, implicit arguments and array-like.\n        return new Promise(function (resolve, reject) {\n            if (values.length === 0) resolve([]);\n            var remaining = values.length;\n            values.forEach(function (a, i) {\n                return Promise.resolve(a).then(function (x) {\n                    values[i] = x;\n                    if (! --remaining) resolve(values);\n                }, reject);\n            });\n        });\n    },\n\n    resolve: function (value) {\n        if (value instanceof Promise) return value;\n        if (value && typeof value.then === 'function') return new Promise(function (resolve, reject) {\n            value.then(resolve, reject);\n        });\n        return new Promise(INTERNAL, true, value);\n    },\n\n    reject: PromiseReject,\n\n    race: function () {\n        var values = getArrayOf.apply(null, arguments);\n        return new Promise(function (resolve, reject) {\n            values.map(function (value) {\n                return Promise.resolve(value).then(resolve, reject);\n            });\n        });\n    },\n\n    PSD: {\n        get: function () {\n            return PSD;\n        },\n        set: function (value) {\n            return PSD = value;\n        }\n    },\n\n    newPSD: newScope,\n\n    usePSD: usePSD,\n\n    scheduler: {\n        get: function () {\n            return asap$1;\n        },\n        set: function (value) {\n            asap$1 = value;\n        }\n    },\n\n    rejectionMapper: {\n        get: function () {\n            return rejectionMapper;\n        },\n        set: function (value) {\n            rejectionMapper = value;\n        } // Map reject failures\n    },\n\n    follow: function (fn) {\n        return new Promise(function (resolve, reject) {\n            return newScope(function (resolve, reject) {\n                var psd = PSD;\n                psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()\n                psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.\n                psd.finalize = callBoth(function () {\n                    var _this3 = this;\n\n                    // Unhandled standard or 3rd part promises are put in PSD.unhandleds and\n                    // examined upon scope completion while unhandled rejections in this Promise\n                    // will trigger directly through psd.onunhandled\n                    run_at_end_of_this_or_next_physical_tick(function () {\n                        _this3.unhandleds.length === 0 ? resolve() : reject(_this3.unhandleds[0]);\n                    });\n                }, psd.finalize);\n                fn();\n            }, resolve, reject);\n        });\n    },\n\n    on: Events(null, { \"error\": [reverseStoppableEventChain, defaultErrorHandler] // Default to defaultErrorHandler\n    })\n\n});\n\nvar PromiseOnError = Promise.on.error;\nPromiseOnError.subscribe = deprecated(\"Promise.on('error')\", PromiseOnError.subscribe);\nPromiseOnError.unsubscribe = deprecated(\"Promise.on('error').unsubscribe\", PromiseOnError.unsubscribe);\n\n/**\r\n* Take a potentially misbehaving resolver function and make sure\r\n* onFulfilled and onRejected are only called once.\r\n*\r\n* Makes no guarantees about asynchrony.\r\n*/\nfunction executePromiseTask(promise, fn) {\n    // Promise Resolution Procedure:\n    // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    try {\n        fn(function (value) {\n            if (promise._state !== null) return;\n            if (value === promise) throw new TypeError('A promise cannot be resolved with itself.');\n            var shouldExecuteTick = promise._lib && beginMicroTickScope();\n            if (value && typeof value.then === 'function') {\n                executePromiseTask(promise, function (resolve, reject) {\n                    value instanceof Promise ? value._then(resolve, reject) : value.then(resolve, reject);\n                });\n            } else {\n                promise._state = true;\n                promise._value = value;\n                propagateAllListeners(promise);\n            }\n            if (shouldExecuteTick) endMicroTickScope();\n        }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below\n    } catch (ex) {\n        handleRejection(promise, ex);\n    }\n}\n\nfunction handleRejection(promise, reason) {\n    rejectingErrors.push(reason);\n    if (promise._state !== null) return;\n    var shouldExecuteTick = promise._lib && beginMicroTickScope();\n    reason = rejectionMapper(reason);\n    promise._state = false;\n    promise._value = reason;\n    debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {\n        var origProp = getPropertyDescriptor(reason, \"stack\");\n        reason._promise = promise;\n        setProp(reason, \"stack\", {\n            get: function () {\n                return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;\n            }\n        });\n    });\n    // Add the failure to a list of possibly uncaught errors\n    addPossiblyUnhandledError(promise);\n    propagateAllListeners(promise);\n    if (shouldExecuteTick) endMicroTickScope();\n}\n\nfunction propagateAllListeners(promise) {\n    //debug && linkToPreviousPromise(promise);\n    var listeners = promise._listeners;\n    promise._listeners = [];\n    for (var i = 0, len = listeners.length; i < len; ++i) {\n        propagateToListener(promise, listeners[i]);\n    }\n    var psd = promise._PSD;\n    --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();\n    if (numScheduledCalls === 0) {\n        // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,\n        // and that no deferreds where listening to this rejection or success.\n        // Since there is a risk that our stack can contain application code that may\n        // do stuff after this code is finished that may generate new calls, we cannot\n        // call finalizers here.\n        ++numScheduledCalls;\n        asap$1(function () {\n            if (--numScheduledCalls === 0) finalizePhysicalTick(); // Will detect unhandled errors\n        }, []);\n    }\n}\n\nfunction propagateToListener(promise, listener) {\n    if (promise._state === null) {\n        promise._listeners.push(listener);\n        return;\n    }\n\n    var cb = promise._state ? listener.onFulfilled : listener.onRejected;\n    if (cb === null) {\n        // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()\n        return (promise._state ? listener.resolve : listener.reject)(promise._value);\n    }\n    var psd = listener.psd;\n    ++psd.ref;\n    ++numScheduledCalls;\n    asap$1(callListener, [cb, promise, listener]);\n}\n\nfunction callListener(cb, promise, listener) {\n    var outerScope = PSD;\n    var psd = listener.psd;\n    try {\n        if (psd !== outerScope) {\n            // **KEEP** outerScope.env = wrappers.snapshot(); // Snapshot outerScope's environment.\n            PSD = psd;\n            // **KEEP** wrappers.restore(psd.env); // Restore PSD's environment.\n        }\n\n        // Set static variable currentFulfiller to the promise that is being fullfilled,\n        // so that we connect the chain of promises (for long stacks support)\n        currentFulfiller = promise;\n\n        // Call callback and resolve our listener with it's return value.\n        var value = promise._value,\n            ret;\n        if (promise._state) {\n            ret = cb(value);\n        } else {\n            if (rejectingErrors.length) rejectingErrors = [];\n            ret = cb(value);\n            if (rejectingErrors.indexOf(value) === -1) markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.\n        }\n        listener.resolve(ret);\n    } catch (e) {\n        // Exception thrown in callback. Reject our listener.\n        listener.reject(e);\n    } finally {\n        // Restore PSD, env and currentFulfiller.\n        if (psd !== outerScope) {\n            PSD = outerScope;\n            // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope's environment\n        }\n        currentFulfiller = null;\n        if (--numScheduledCalls === 0) finalizePhysicalTick();\n        --psd.ref || psd.finalize();\n    }\n}\n\nfunction getStack(promise, stacks, limit) {\n    if (stacks.length === limit) return stacks;\n    var stack = \"\";\n    if (promise._state === false) {\n        var failure = promise._value,\n            errorName,\n            message;\n\n        if (failure != null) {\n            errorName = failure.name || \"Error\";\n            message = failure.message || failure;\n            stack = prettyStack(failure, 0);\n        } else {\n            errorName = failure; // If error is undefined or null, show that.\n            message = \"\";\n        }\n        stacks.push(errorName + (message ? \": \" + message : \"\") + stack);\n    }\n    if (debug) {\n        stack = prettyStack(promise._stackHolder, 2);\n        if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);\n        if (promise._prev) getStack(promise._prev, stacks, limit);\n    }\n    return stacks;\n}\n\nfunction linkToPreviousPromise(promise, prev) {\n    // Support long stacks by linking to previous completed promise.\n    var numPrev = prev ? prev._numPrev + 1 : 0;\n    if (numPrev < LONG_STACKS_CLIP_LIMIT) {\n        // Prohibit infinite Promise loops to get an infinite long memory consuming \"tail\".\n        promise._prev = prev;\n        promise._numPrev = numPrev;\n    }\n}\n\n/* The callback to schedule with setImmediate() or setTimeout().\r\n   It runs a virtual microtick and executes any callback registered in microtickQueue.\r\n */\nfunction physicalTick() {\n    beginMicroTickScope() && endMicroTickScope();\n}\n\nfunction beginMicroTickScope() {\n    var wasRootExec = isOutsideMicroTick;\n    isOutsideMicroTick = false;\n    needsNewPhysicalTick = false;\n    return wasRootExec;\n}\n\n/* Executes micro-ticks without doing try..catch.\r\n   This can be possible because we only use this internally and\r\n   the registered functions are exception-safe (they do try..catch\r\n   internally before calling any external method). If registering\r\n   functions in the microtickQueue that are not exception-safe, this\r\n   would destroy the framework and make it instable. So we don't export\r\n   our asap method.\r\n*/\nfunction endMicroTickScope() {\n    var callbacks, i, l;\n    do {\n        while (microtickQueue.length > 0) {\n            callbacks = microtickQueue;\n            microtickQueue = [];\n            l = callbacks.length;\n            for (i = 0; i < l; ++i) {\n                var item = callbacks[i];\n                item[0].apply(null, item[1]);\n            }\n        }\n    } while (microtickQueue.length > 0);\n    isOutsideMicroTick = true;\n    needsNewPhysicalTick = true;\n}\n\nfunction finalizePhysicalTick() {\n    var unhandledErrs = unhandledErrors;\n    unhandledErrors = [];\n    unhandledErrs.forEach(function (p) {\n        p._PSD.onunhandled.call(null, p._value, p);\n    });\n    var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.\n    var i = finalizers.length;\n    while (i) {\n        finalizers[--i]();\n    }\n}\n\nfunction run_at_end_of_this_or_next_physical_tick(fn) {\n    function finalizer() {\n        fn();\n        tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);\n    }\n    tickFinalizers.push(finalizer);\n    ++numScheduledCalls;\n    asap$1(function () {\n        if (--numScheduledCalls === 0) finalizePhysicalTick();\n    }, []);\n}\n\nfunction addPossiblyUnhandledError(promise) {\n    // Only add to unhandledErrors if not already there. The first one to add to this list\n    // will be upon the first rejection so that the root cause (first promise in the\n    // rejection chain) is the one listed.\n    if (!unhandledErrors.some(function (p) {\n        return p._value === promise._value;\n    })) unhandledErrors.push(promise);\n}\n\nfunction markErrorAsHandled(promise) {\n    // Called when a reject handled is actually being called.\n    // Search in unhandledErrors for any promise whos _value is this promise_value (list\n    // contains only rejected promises, and only one item per error)\n    var i = unhandledErrors.length;\n    while (i) {\n        if (unhandledErrors[--i]._value === promise._value) {\n            // Found a promise that failed with this same error object pointer,\n            // Remove that since there is a listener that actually takes care of it.\n            unhandledErrors.splice(i, 1);\n            return;\n        }\n    }\n}\n\n// By default, log uncaught errors to the console\nfunction defaultErrorHandler(e) {\n    console.warn('Unhandled rejection: ' + (e.stack || e));\n}\n\nfunction PromiseReject(reason) {\n    return new Promise(INTERNAL, false, reason);\n}\n\nfunction wrap(fn, errorCatcher) {\n    var psd = PSD;\n    return function () {\n        var wasRootExec = beginMicroTickScope(),\n            outerScope = PSD;\n\n        try {\n            if (outerScope !== psd) {\n                // **KEEP** outerScope.env = wrappers.snapshot(); // Snapshot outerScope's environment\n                PSD = psd;\n                // **KEEP** wrappers.restore(psd.env); // Restore PSD's environment.\n            }\n            return fn.apply(this, arguments);\n        } catch (e) {\n            errorCatcher && errorCatcher(e);\n        } finally {\n            if (outerScope !== psd) {\n                PSD = outerScope;\n                // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope's environment\n            }\n            if (wasRootExec) endMicroTickScope();\n        }\n    };\n}\n\nfunction newScope(fn, a1, a2, a3) {\n    var parent = PSD,\n        psd = Object.create(parent);\n    psd.parent = parent;\n    psd.ref = 0;\n    psd.global = false;\n    // **KEEP** psd.env = wrappers.wrap(psd);\n\n    // unhandleds and onunhandled should not be specifically set here.\n    // Leave them on parent prototype.\n    // unhandleds.push(err) will push to parent's prototype\n    // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)\n    ++parent.ref;\n    psd.finalize = function () {\n        --this.parent.ref || this.parent.finalize();\n    };\n    var rv = usePSD(psd, fn, a1, a2, a3);\n    if (psd.ref === 0) psd.finalize();\n    return rv;\n}\n\nfunction usePSD(psd, fn, a1, a2, a3) {\n    var outerScope = PSD;\n    try {\n        if (psd !== outerScope) {\n            // **KEEP** outerScope.env = wrappers.snapshot(); // snapshot outerScope's environment.\n            PSD = psd;\n            // **KEEP** wrappers.restore(psd.env); // Restore PSD's environment.\n        }\n        return fn(a1, a2, a3);\n    } finally {\n        if (psd !== outerScope) {\n            PSD = outerScope;\n            // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope's environment.\n        }\n    }\n}\n\nvar UNHANDLEDREJECTION = \"unhandledrejection\";\n\nfunction globalError(err, promise) {\n    var rv;\n    try {\n        rv = promise.onuncatched(err);\n    } catch (e) {}\n    if (rv !== false) try {\n        var event,\n            eventData = { promise: promise, reason: err };\n        if (_global.document && document.createEvent) {\n            event = document.createEvent('Event');\n            event.initEvent(UNHANDLEDREJECTION, true, true);\n            extend(event, eventData);\n        } else if (_global.CustomEvent) {\n            event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });\n            extend(event, eventData);\n        }\n        if (event && _global.dispatchEvent) {\n            dispatchEvent(event);\n            if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)\n                // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.\n                try {\n                    _global.onunhandledrejection(event);\n                } catch (_) {}\n        }\n        if (!event.defaultPrevented) {\n            // Backward compatibility: fire to events registered at Promise.on.error\n            Promise.on.error.fire(err, promise);\n        }\n    } catch (e) {}\n}\n\n/* **KEEP** \r\n\r\nexport function wrapPromise(PromiseClass) {\r\n    var proto = PromiseClass.prototype;\r\n    var origThen = proto.then;\r\n    \r\n    wrappers.add({\r\n        snapshot: () => proto.then,\r\n        restore: value => {proto.then = value;},\r\n        wrap: () => patchedThen\r\n    });\r\n\r\n    function patchedThen (onFulfilled, onRejected) {\r\n        var promise = this;\r\n        var onFulfilledProxy = wrap(function(value){\r\n            var rv = value;\r\n            if (onFulfilled) {\r\n                rv = onFulfilled(rv);\r\n                if (rv && typeof rv.then === 'function') rv.then(); // Intercept that promise as well.\r\n            }\r\n            --PSD.ref || PSD.finalize();\r\n            return rv;\r\n        });\r\n        var onRejectedProxy = wrap(function(err){\r\n            promise._$err = err;\r\n            var unhandleds = PSD.unhandleds;\r\n            var idx = unhandleds.length,\r\n                rv;\r\n            while (idx--) if (unhandleds[idx]._$err === err) break;\r\n            if (onRejected) {\r\n                if (idx !== -1) unhandleds.splice(idx, 1); // Mark as handled.\r\n                rv = onRejected(err);\r\n                if (rv && typeof rv.then === 'function') rv.then(); // Intercept that promise as well.\r\n            } else {\r\n                if (idx === -1) unhandleds.push(promise);\r\n                rv = PromiseClass.reject(err);\r\n                rv._$nointercept = true; // Prohibit eternal loop.\r\n            }\r\n            --PSD.ref || PSD.finalize();\r\n            return rv;\r\n        });\r\n        \r\n        if (this._$nointercept) return origThen.apply(this, arguments);\r\n        ++PSD.ref;\r\n        return origThen.call(this, onFulfilledProxy, onRejectedProxy);\r\n    }\r\n}\r\n\r\n// Global Promise wrapper\r\nif (_global.Promise) wrapPromise(_global.Promise);\r\n\r\n*/\n\ndoFakeAutoComplete(function () {\n    // Simplify the job for VS Intellisense. This piece of code is one of the keys to the new marvellous intellisense support in Dexie.\n    asap$1 = function (fn, args) {\n        setTimeout(function () {\n            fn.apply(null, args);\n        }, 0);\n    };\n});\n\nfunction rejection(err, uncaughtHandler) {\n    // Get the call stack and return a rejected promise.\n    var rv = Promise.reject(err);\n    return uncaughtHandler ? rv.uncaught(uncaughtHandler) : rv;\n}\n\n/*\r\n * Dexie.js - a minimalistic wrapper for IndexedDB\r\n * ===============================================\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com\r\n *\r\n * Version 1.5.1, Tue Nov 01 2016\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n */\n\nvar DEXIE_VERSION = '1.5.1';\nvar maxString = String.fromCharCode(65535);\nvar maxKey = function () {\n    try {\n        IDBKeyRange.only([[]]);return [[]];\n    } catch (e) {\n        return maxString;\n    }\n}();\nvar INVALID_KEY_ARGUMENT = \"Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.\";\nvar STRING_EXPECTED = \"String expected.\";\nvar connections = [];\nvar isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);\nvar hasIEDeleteObjectStoreBug = isIEOrEdge;\nvar hangsOnDeleteLargeKeyRange = isIEOrEdge;\nvar dexieStackFrameFilter = function (frame) {\n    return !/(dexie\\.js|dexie\\.min\\.js)/.test(frame);\n};\n\nsetDebug(debug, dexieStackFrameFilter);\n\nfunction Dexie(dbName, options) {\n    /// <param name=\"options\" type=\"Object\" optional=\"true\">Specify only if you wich to control which addons that should run on this instance</param>\n    var deps = Dexie.dependencies;\n    var opts = extend({\n        // Default Options\n        addons: Dexie.addons, // Pick statically registered addons by default\n        autoOpen: true, // Don't require db.open() explicitely.\n        indexedDB: deps.indexedDB, // Backend IndexedDB api. Default to IDBShim or browser env.\n        IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to IDBShim or browser env.\n    }, options);\n    var addons = opts.addons,\n        autoOpen = opts.autoOpen,\n        indexedDB = opts.indexedDB,\n        IDBKeyRange = opts.IDBKeyRange;\n\n    var globalSchema = this._dbSchema = {};\n    var versions = [];\n    var dbStoreNames = [];\n    var allTables = {};\n    ///<var type=\"IDBDatabase\" />\n    var idbdb = null; // Instance of IDBDatabase\n    var dbOpenError = null;\n    var isBeingOpened = false;\n    var openComplete = false;\n    var READONLY = \"readonly\",\n        READWRITE = \"readwrite\";\n    var db = this;\n    var dbReadyResolve,\n        dbReadyPromise = new Promise(function (resolve) {\n        dbReadyResolve = resolve;\n    }),\n        cancelOpen,\n        openCanceller = new Promise(function (_, reject) {\n        cancelOpen = reject;\n    });\n    var autoSchema = true;\n    var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB),\n        hasGetAll;\n\n    function init() {\n        // Default subscribers to \"versionchange\" and \"blocked\".\n        // Can be overridden by custom handlers. If custom handlers return false, these default\n        // behaviours will be prevented.\n        db.on(\"versionchange\", function (ev) {\n            // Default behavior for versionchange event is to close database connection.\n            // Caller can override this behavior by doing db.on(\"versionchange\", function(){ return false; });\n            // Let's not block the other window from making it's delete() or open() call.\n            // NOTE! This event is never fired in IE,Edge or Safari.\n            if (ev.newVersion > 0) console.warn('Another connection wants to upgrade database \\'' + db.name + '\\'. Closing db now to resume the upgrade.');else console.warn('Another connection wants to delete database \\'' + db.name + '\\'. Closing db now to resume the delete request.');\n            db.close();\n            // In many web applications, it would be recommended to force window.reload()\n            // when this event occurs. To do that, subscribe to the versionchange event\n            // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)\n            // The reason for this is that your current web app obviously has old schema code that needs\n            // to be updated. Another window got a newer version of the app and needs to upgrade DB but\n            // your window is blocking it unless we close it here.\n        });\n        db.on(\"blocked\", function (ev) {\n            if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn('Dexie.delete(\\'' + db.name + '\\') was blocked');else console.warn('Upgrade \\'' + db.name + '\\' blocked by other connection holding version ' + ev.oldVersion / 10);\n        });\n    }\n\n    //\n    //\n    //\n    // ------------------------- Versioning Framework---------------------------\n    //\n    //\n    //\n\n    this.version = function (versionNumber) {\n        /// <param name=\"versionNumber\" type=\"Number\"></param>\n        /// <returns type=\"Version\"></returns>\n        if (idbdb || isBeingOpened) throw new exceptions.Schema(\"Cannot add version when database is open\");\n        this.verno = Math.max(this.verno, versionNumber);\n        var versionInstance = versions.filter(function (v) {\n            return v._cfg.version === versionNumber;\n        })[0];\n        if (versionInstance) return versionInstance;\n        versionInstance = new Version(versionNumber);\n        versions.push(versionInstance);\n        versions.sort(lowerVersionFirst);\n        return versionInstance;\n    };\n\n    function Version(versionNumber) {\n        this._cfg = {\n            version: versionNumber,\n            storesSource: null,\n            dbschema: {},\n            tables: {},\n            contentUpgrade: null\n        };\n        this.stores({}); // Derive earlier schemas by default.\n    }\n\n    extend(Version.prototype, {\n        stores: function (stores) {\n            /// <summary>\n            ///   Defines the schema for a particular version\n            /// </summary>\n            /// <param name=\"stores\" type=\"Object\">\n            /// Example: <br/>\n            ///   {users: \"id++,first,last,&amp;username,*email\", <br/>\n            ///   passwords: \"id++,&amp;username\"}<br/>\n            /// <br/>\n            /// Syntax: {Table: \"[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,...\"}<br/><br/>\n            /// Special characters:<br/>\n            ///  \"&amp;\"  means unique key, <br/>\n            ///  \"*\"  means value is multiEntry, <br/>\n            ///  \"++\" means auto-increment and only applicable for primary key <br/>\n            /// </param>\n            this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;\n\n            // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.\n            var storesSpec = {};\n            versions.forEach(function (version) {\n                // 'versions' is always sorted by lowest version first.\n                extend(storesSpec, version._cfg.storesSource);\n            });\n\n            var dbschema = this._cfg.dbschema = {};\n            this._parseStoresSpec(storesSpec, dbschema);\n            // Update the latest schema to this version\n            // Update API\n            globalSchema = db._dbSchema = dbschema;\n            removeTablesApi([allTables, db, Transaction.prototype]);\n            setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), READWRITE, dbschema);\n            dbStoreNames = keys(dbschema);\n            return this;\n        },\n        upgrade: function (upgradeFunction) {\n            /// <param name=\"upgradeFunction\" optional=\"true\">Function that performs upgrading actions.</param>\n            var self = this;\n            fakeAutoComplete(function () {\n                upgradeFunction(db._createTransaction(READWRITE, keys(self._cfg.dbschema), self._cfg.dbschema)); // BUGBUG: No code completion for prev version's tables wont appear.\n            });\n            this._cfg.contentUpgrade = upgradeFunction;\n            return this;\n        },\n        _parseStoresSpec: function (stores, outSchema) {\n            keys(stores).forEach(function (tableName) {\n                if (stores[tableName] !== null) {\n                    var instanceTemplate = {};\n                    var indexes = parseIndexSyntax(stores[tableName]);\n                    var primKey = indexes.shift();\n                    if (primKey.multi) throw new exceptions.Schema(\"Primary key cannot be multi-valued\");\n                    if (primKey.keyPath) setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);\n                    indexes.forEach(function (idx) {\n                        if (idx.auto) throw new exceptions.Schema(\"Only primary key can be marked as autoIncrement (++)\");\n                        if (!idx.keyPath) throw new exceptions.Schema(\"Index must have a name and cannot be an empty string\");\n                        setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () {\n                            return \"\";\n                        }) : \"\");\n                    });\n                    outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);\n                }\n            });\n        }\n    });\n\n    function runUpgraders(oldVersion, idbtrans, reject) {\n        var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);\n        trans.create(idbtrans);\n        trans._completion.catch(reject);\n        var rejectTransaction = trans._reject.bind(trans);\n        newScope(function () {\n            PSD.trans = trans;\n            if (oldVersion === 0) {\n                // Create tables:\n                keys(globalSchema).forEach(function (tableName) {\n                    createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);\n                });\n                Promise.follow(function () {\n                    return db.on.populate.fire(trans);\n                }).catch(rejectTransaction);\n            } else updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);\n        });\n    }\n\n    function updateTablesAndIndexes(oldVersion, trans, idbtrans) {\n        // Upgrade version to version, step-by-step from oldest to newest version.\n        // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)\n        var queue = [];\n        var oldVersionStruct = versions.filter(function (version) {\n            return version._cfg.version === oldVersion;\n        })[0];\n        if (!oldVersionStruct) throw new exceptions.Upgrade(\"Dexie specification of currently installed DB version is missing\");\n        globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;\n        var anyContentUpgraderHasRun = false;\n\n        var versToRun = versions.filter(function (v) {\n            return v._cfg.version > oldVersion;\n        });\n        versToRun.forEach(function (version) {\n            /// <param name=\"version\" type=\"Version\"></param>\n            queue.push(function () {\n                var oldSchema = globalSchema;\n                var newSchema = version._cfg.dbschema;\n                adjustToExistingIndexNames(oldSchema, idbtrans);\n                adjustToExistingIndexNames(newSchema, idbtrans);\n                globalSchema = db._dbSchema = newSchema;\n                var diff = getSchemaDiff(oldSchema, newSchema);\n                // Add tables           \n                diff.add.forEach(function (tuple) {\n                    createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);\n                });\n                // Change tables\n                diff.change.forEach(function (change) {\n                    if (change.recreate) {\n                        throw new exceptions.Upgrade(\"Not yet support for changing primary key\");\n                    } else {\n                        var store = idbtrans.objectStore(change.name);\n                        // Add indexes\n                        change.add.forEach(function (idx) {\n                            addIndex(store, idx);\n                        });\n                        // Update indexes\n                        change.change.forEach(function (idx) {\n                            store.deleteIndex(idx.name);\n                            addIndex(store, idx);\n                        });\n                        // Delete indexes\n                        change.del.forEach(function (idxName) {\n                            store.deleteIndex(idxName);\n                        });\n                    }\n                });\n                if (version._cfg.contentUpgrade) {\n                    anyContentUpgraderHasRun = true;\n                    return Promise.follow(function () {\n                        version._cfg.contentUpgrade(trans);\n                    });\n                }\n            });\n            queue.push(function (idbtrans) {\n                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {\n                    // Dont delete old tables if ieBug is present and a content upgrader has run. Let tables be left in DB so far. This needs to be taken care of.\n                    var newSchema = version._cfg.dbschema;\n                    // Delete old tables\n                    deleteRemovedTables(newSchema, idbtrans);\n                }\n            });\n        });\n\n        // Now, create a queue execution engine\n        function runQueue() {\n            return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : Promise.resolve();\n        }\n\n        return runQueue().then(function () {\n            createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)\n        });\n    }\n\n    function getSchemaDiff(oldSchema, newSchema) {\n        var diff = {\n            del: [], // Array of table names\n            add: [], // Array of [tableName, newDefinition]\n            change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}\n        };\n        for (var table in oldSchema) {\n            if (!newSchema[table]) diff.del.push(table);\n        }\n        for (table in newSchema) {\n            var oldDef = oldSchema[table],\n                newDef = newSchema[table];\n            if (!oldDef) {\n                diff.add.push([table, newDef]);\n            } else {\n                var change = {\n                    name: table,\n                    def: newDef,\n                    recreate: false,\n                    del: [],\n                    add: [],\n                    change: []\n                };\n                if (oldDef.primKey.src !== newDef.primKey.src) {\n                    // Primary key has changed. Remove and re-add table.\n                    change.recreate = true;\n                    diff.change.push(change);\n                } else {\n                    // Same primary key. Just find out what differs:\n                    var oldIndexes = oldDef.idxByName;\n                    var newIndexes = newDef.idxByName;\n                    for (var idxName in oldIndexes) {\n                        if (!newIndexes[idxName]) change.del.push(idxName);\n                    }\n                    for (idxName in newIndexes) {\n                        var oldIdx = oldIndexes[idxName],\n                            newIdx = newIndexes[idxName];\n                        if (!oldIdx) change.add.push(newIdx);else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);\n                    }\n                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {\n                        diff.change.push(change);\n                    }\n                }\n            }\n        }\n        return diff;\n    }\n\n    function createTable(idbtrans, tableName, primKey, indexes) {\n        /// <param name=\"idbtrans\" type=\"IDBTransaction\"></param>\n        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });\n        indexes.forEach(function (idx) {\n            addIndex(store, idx);\n        });\n        return store;\n    }\n\n    function createMissingTables(newSchema, idbtrans) {\n        keys(newSchema).forEach(function (tableName) {\n            if (!idbtrans.db.objectStoreNames.contains(tableName)) {\n                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);\n            }\n        });\n    }\n\n    function deleteRemovedTables(newSchema, idbtrans) {\n        for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {\n            var storeName = idbtrans.db.objectStoreNames[i];\n            if (newSchema[storeName] == null) {\n                idbtrans.db.deleteObjectStore(storeName);\n            }\n        }\n    }\n\n    function addIndex(store, idx) {\n        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });\n    }\n\n    function dbUncaught(err) {\n        return db.on.error.fire(err);\n    }\n\n    //\n    //\n    //      Dexie Protected API\n    //\n    //\n\n    this._allTables = allTables;\n\n    this._tableFactory = function createTable(mode, tableSchema) {\n        /// <param name=\"tableSchema\" type=\"TableSchema\"></param>\n        if (mode === READONLY) return new Table(tableSchema.name, tableSchema, Collection);else return new WriteableTable(tableSchema.name, tableSchema);\n    };\n\n    this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {\n        return new Transaction(mode, storeNames, dbschema, parentTransaction);\n    };\n\n    /* Generate a temporary transaction when db operations are done outside a transactino scope.\r\n    */\n    function tempTransaction(mode, storeNames, fn) {\n        // Last argument is \"writeLocked\". But this doesnt apply to oneshot direct db operations, so we ignore it.\n        if (!openComplete && !PSD.letThrough) {\n            if (!isBeingOpened) {\n                if (!autoOpen) return rejection(new exceptions.DatabaseClosed(), dbUncaught);\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\n            }\n            return dbReadyPromise.then(function () {\n                return tempTransaction(mode, storeNames, fn);\n            });\n        } else {\n            var trans = db._createTransaction(mode, storeNames, globalSchema);\n            return trans._promise(mode, function (resolve, reject) {\n                newScope(function () {\n                    // OPTIMIZATION POSSIBLE? newScope() not needed because it's already done in _promise.\n                    PSD.trans = trans;\n                    fn(resolve, reject, trans);\n                });\n            }).then(function (result) {\n                // Instead of resolving value directly, wait with resolving it until transaction has completed.\n                // Otherwise the data would not be in the DB if requesting it in the then() operation.\n                // Specifically, to ensure that the following expression will work:\n                //\n                //   db.friends.put({name: \"Arne\"}).then(function () {\n                //       db.friends.where(\"name\").equals(\"Arne\").count(function(count) {\n                //           assert (count === 1);\n                //       });\n                //   });\n                //\n                return trans._completion.then(function () {\n                    return result;\n                });\n            }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.\r\n                 trans._reject(err);\r\n                 return rejection(err);\r\n                });*/\n        }\n    }\n\n    this._whenReady = function (fn) {\n        return new Promise(fake || openComplete || PSD.letThrough ? fn : function (resolve, reject) {\n            if (!isBeingOpened) {\n                if (!autoOpen) {\n                    reject(new exceptions.DatabaseClosed());\n                    return;\n                }\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\n            }\n            dbReadyPromise.then(function () {\n                fn(resolve, reject);\n            });\n        }).uncaught(dbUncaught);\n    };\n\n    //\n    //\n    //\n    //\n    //      Dexie API\n    //\n    //\n    //\n\n    this.verno = 0;\n\n    this.open = function () {\n        if (isBeingOpened || idbdb) return dbReadyPromise.then(function () {\n            return dbOpenError ? rejection(dbOpenError, dbUncaught) : db;\n        });\n        debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.\n        isBeingOpened = true;\n        dbOpenError = null;\n        openComplete = false;\n\n        // Function pointers to call when the core opening process completes.\n        var resolveDbReady = dbReadyResolve,\n\n        // upgradeTransaction to abort on failure.\n        upgradeTransaction = null;\n\n        return Promise.race([openCanceller, new Promise(function (resolve, reject) {\n            doFakeAutoComplete(function () {\n                return resolve();\n            });\n\n            // Make sure caller has specified at least one version\n            if (versions.length > 0) autoSchema = false;\n\n            // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:\n            // IE fails when deleting objectStore after reading from it.\n            // A future version of Dexie.js will stopover an intermediate version to workaround this.\n            // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.\n\n            // If no API, throw!\n            if (!indexedDB) throw new exceptions.MissingAPI(\"indexedDB API not found. If using IE10+, make sure to run your code on a server URL \" + \"(not locally). If using old Safari versions, make sure to include indexedDB polyfill.\");\n\n            var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));\n            if (!req) throw new exceptions.MissingAPI(\"IndexedDB API not available\"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134\n            req.onerror = wrap(eventRejectHandler(reject));\n            req.onblocked = wrap(fireOnBlocked);\n            req.onupgradeneeded = wrap(function (e) {\n                upgradeTransaction = req.transaction;\n                if (autoSchema && !db._allowEmptyDB) {\n                    // Unless an addon has specified db._allowEmptyDB, lets make the call fail.\n                    // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.\n                    // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we\n                    // do not create a new database by accident here.\n                    req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!\n                    upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)\n                    // Close database and delete it.\n                    req.result.close();\n                    var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!\n                    delreq.onsuccess = delreq.onerror = wrap(function () {\n                        reject(new exceptions.NoSuchDatabase('Database ' + dbName + ' doesnt exist'));\n                    });\n                } else {\n                    upgradeTransaction.onerror = wrap(eventRejectHandler(reject));\n                    var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.\n                    runUpgraders(oldVer / 10, upgradeTransaction, reject, req);\n                }\n            }, reject);\n\n            req.onsuccess = wrap(function () {\n                // Core opening procedure complete. Now let's just record some stuff.\n                upgradeTransaction = null;\n                idbdb = req.result;\n                connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.\n\n                if (autoSchema) readGlobalSchema();else if (idbdb.objectStoreNames.length > 0) {\n                    try {\n                        adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));\n                    } catch (e) {\n                        // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.\n                    }\n                }\n\n                idbdb.onversionchange = wrap(function (ev) {\n                    db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)\n                    db.on(\"versionchange\").fire(ev);\n                });\n\n                if (!hasNativeGetDatabaseNames) {\n                    // Update localStorage with list of database names\n                    globalDatabaseList(function (databaseNames) {\n                        if (databaseNames.indexOf(dbName) === -1) return databaseNames.push(dbName);\n                    });\n                }\n\n                resolve();\n            }, reject);\n        })]).then(function () {\n            // Before finally resolving the dbReadyPromise and this promise,\n            // call and await all on('ready') subscribers:\n            // Dexie.vip() makes subscribers able to use the database while being opened.\n            // This is a must since these subscribers take part of the opening procedure.\n            return Dexie.vip(db.on.ready.fire);\n        }).then(function () {\n            // Resolve the db.open() with the db instance.\n            isBeingOpened = false;\n            return db;\n        }).catch(function (err) {\n            try {\n                // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.\n                upgradeTransaction && upgradeTransaction.abort();\n            } catch (e) {}\n            isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).\n            db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.\n            // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.\n            dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.\n            return rejection(dbOpenError, dbUncaught); // dbUncaught will make sure any error that happened in any operation before will now bubble to db.on.error() thanks to the special handling in Promise.uncaught().\n        }).finally(function () {\n            openComplete = true;\n            resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.\n        });\n    };\n\n    this.close = function () {\n        var idx = connections.indexOf(db);\n        if (idx >= 0) connections.splice(idx, 1);\n        if (idbdb) {\n            try {\n                idbdb.close();\n            } catch (e) {}\n            idbdb = null;\n        }\n        autoOpen = false;\n        dbOpenError = new exceptions.DatabaseClosed();\n        if (isBeingOpened) cancelOpen(dbOpenError);\n        // Reset dbReadyPromise promise:\n        dbReadyPromise = new Promise(function (resolve) {\n            dbReadyResolve = resolve;\n        });\n        openCanceller = new Promise(function (_, reject) {\n            cancelOpen = reject;\n        });\n    };\n\n    this.delete = function () {\n        var hasArguments = arguments.length > 0;\n        return new Promise(function (resolve, reject) {\n            if (hasArguments) throw new exceptions.InvalidArgument(\"Arguments not allowed in db.delete()\");\n            if (isBeingOpened) {\n                dbReadyPromise.then(doDelete);\n            } else {\n                doDelete();\n            }\n            function doDelete() {\n                db.close();\n                var req = indexedDB.deleteDatabase(dbName);\n                req.onsuccess = wrap(function () {\n                    if (!hasNativeGetDatabaseNames) {\n                        globalDatabaseList(function (databaseNames) {\n                            var pos = databaseNames.indexOf(dbName);\n                            if (pos >= 0) return databaseNames.splice(pos, 1);\n                        });\n                    }\n                    resolve();\n                });\n                req.onerror = wrap(eventRejectHandler(reject));\n                req.onblocked = fireOnBlocked;\n            }\n        }).uncaught(dbUncaught);\n    };\n\n    this.backendDB = function () {\n        return idbdb;\n    };\n\n    this.isOpen = function () {\n        return idbdb !== null;\n    };\n    this.hasFailed = function () {\n        return dbOpenError !== null;\n    };\n    this.dynamicallyOpened = function () {\n        return autoSchema;\n    };\n\n    //\n    // Properties\n    //\n    this.name = dbName;\n\n    // db.tables - an array of all Table instances.\n    setProp(this, \"tables\", {\n        get: function () {\n            /// <returns type=\"Array\" elementType=\"WriteableTable\" />\n            return keys(allTables).map(function (name) {\n                return allTables[name];\n            });\n        }\n    });\n\n    //\n    // Events\n    //\n    this.on = Events(this, \"error\", \"populate\", \"blocked\", \"versionchange\", { ready: [promisableChain, nop] });\n    this.on.error.subscribe = deprecated(\"Dexie.on.error\", this.on.error.subscribe);\n    this.on.error.unsubscribe = deprecated(\"Dexie.on.error.unsubscribe\", this.on.error.unsubscribe);\n\n    this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {\n        return function (subscriber, bSticky) {\n            Dexie.vip(function () {\n                if (openComplete) {\n                    // Database already open. Call subscriber asap.\n                    if (!dbOpenError) Promise.resolve().then(subscriber);\n                    // bSticky: Also subscribe to future open sucesses (after close / reopen) \n                    if (bSticky) subscribe(subscriber);\n                } else {\n                    // Database not yet open. Subscribe to it.\n                    subscribe(subscriber);\n                    // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.\n                    if (!bSticky) subscribe(function unsubscribe() {\n                        db.on.ready.unsubscribe(subscriber);\n                        db.on.ready.unsubscribe(unsubscribe);\n                    });\n                }\n            });\n        };\n    });\n\n    fakeAutoComplete(function () {\n        db.on(\"populate\").fire(db._createTransaction(READWRITE, dbStoreNames, globalSchema));\n        db.on(\"error\").fire(new Error());\n    });\n\n    this.transaction = function (mode, tableInstances, scopeFunc) {\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"mode\" type=\"String\">\"r\" for readonly, or \"rw\" for readwrite</param>\n        /// <param name=\"tableInstances\">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>\n        /// <param name=\"scopeFunc\" type=\"Function\">Function to execute with transaction</param>\n\n        // Let table arguments be all arguments between mode and last argument.\n        var i = arguments.length;\n        if (i < 2) throw new exceptions.InvalidArgument(\"Too few arguments\");\n        // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)\n        // and clone arguments except the first one into local var 'args'.\n        var args = new Array(i - 1);\n        while (--i) {\n            args[i - 1] = arguments[i];\n        } // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.\n        scopeFunc = args.pop();\n        var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.\n        var parentTransaction = PSD.trans;\n        // Check if parent transactions is bound to this db instance, and if caller wants to reuse it\n        if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1) parentTransaction = null;\n        var onlyIfCompatible = mode.indexOf('?') !== -1;\n        mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.\n\n        try {\n            //\n            // Get storeNames from arguments. Either through given table instances, or through given table names.\n            //\n            var storeNames = tables.map(function (table) {\n                var storeName = table instanceof Table ? table.name : table;\n                if (typeof storeName !== 'string') throw new TypeError(\"Invalid table argument to Dexie.transaction(). Only Table or String are allowed\");\n                return storeName;\n            });\n\n            //\n            // Resolve mode. Allow shortcuts \"r\" and \"rw\".\n            //\n            if (mode == \"r\" || mode == READONLY) mode = READONLY;else if (mode == \"rw\" || mode == READWRITE) mode = READWRITE;else throw new exceptions.InvalidArgument(\"Invalid transaction mode: \" + mode);\n\n            if (parentTransaction) {\n                // Basic checks\n                if (parentTransaction.mode === READONLY && mode === READWRITE) {\n                    if (onlyIfCompatible) {\n                        // Spawn new transaction instead.\n                        parentTransaction = null;\n                    } else throw new exceptions.SubTransaction(\"Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY\");\n                }\n                if (parentTransaction) {\n                    storeNames.forEach(function (storeName) {\n                        if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {\n                            if (onlyIfCompatible) {\n                                // Spawn new transaction instead.\n                                parentTransaction = null;\n                            } else throw new exceptions.SubTransaction(\"Table \" + storeName + \" not included in parent transaction.\");\n                        }\n                    });\n                }\n            }\n        } catch (e) {\n            return parentTransaction ? parentTransaction._promise(null, function (_, reject) {\n                reject(e);\n            }) : rejection(e, dbUncaught);\n        }\n        // If this is a sub-transaction, lock the parent and then launch the sub-transaction.\n        return parentTransaction ? parentTransaction._promise(mode, enterTransactionScope, \"lock\") : db._whenReady(enterTransactionScope);\n\n        function enterTransactionScope(resolve) {\n            var parentPSD = PSD;\n            resolve(Promise.resolve().then(function () {\n                return newScope(function () {\n                    // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().\n                    PSD.transless = PSD.transless || parentPSD;\n                    // Our transaction.\n                    //return new Promise((resolve, reject) => {\n                    var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);\n                    // Let the transaction instance be part of a Promise-specific data (PSD) value.\n                    PSD.trans = trans;\n\n                    if (parentTransaction) {\n                        // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)\n                        trans.idbtrans = parentTransaction.idbtrans;\n                    } else {\n                        trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.\n                    }\n\n                    // Provide arguments to the scope function (for backward compatibility)\n                    var tableArgs = storeNames.map(function (name) {\n                        return allTables[name];\n                    });\n                    tableArgs.push(trans);\n\n                    var returnValue;\n                    return Promise.follow(function () {\n                        // Finally, call the scope function with our table and transaction arguments.\n                        returnValue = scopeFunc.apply(trans, tableArgs); // NOTE: returnValue is used in trans.on.complete() not as a returnValue to this func.\n                        if (returnValue) {\n                            if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {\n                                // scopeFunc returned an iterator with throw-support. Handle yield as await.\n                                returnValue = awaitIterator(returnValue);\n                            } else if (typeof returnValue.then === 'function' && !hasOwn(returnValue, '_PSD')) {\n                                throw new exceptions.IncompatiblePromise(\"Incompatible Promise returned from transaction scope (read more at http://tinyurl.com/znyqjqc). Transaction scope: \" + scopeFunc.toString());\n                            }\n                        }\n                    }).uncaught(dbUncaught).then(function () {\n                        if (parentTransaction) trans._resolve(); // sub transactions don't react to idbtrans.oncomplete. We must trigger a acompletion.\n                        return trans._completion; // Even if WE believe everything is fine. Await IDBTransaction's oncomplete or onerror as well.\n                    }).then(function () {\n                        return returnValue;\n                    }).catch(function (e) {\n                        //reject(e);\n                        trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!\n                        return rejection(e);\n                    });\n                    //});\n                });\n            }));\n        }\n    };\n\n    this.table = function (tableName) {\n        /// <returns type=\"WriteableTable\"></returns>\n        if (fake && autoSchema) return new WriteableTable(tableName);\n        if (!hasOwn(allTables, tableName)) {\n            throw new exceptions.InvalidTable('Table ' + tableName + ' does not exist');\n        }\n        return allTables[tableName];\n    };\n\n    //\n    //\n    //\n    // Table Class\n    //\n    //\n    //\n    function Table(name, tableSchema, collClass) {\n        /// <param name=\"name\" type=\"String\"></param>\n        this.name = name;\n        this.schema = tableSchema;\n        this.hook = allTables[name] ? allTables[name].hook : Events(null, {\n            \"creating\": [hookCreatingChain, nop],\n            \"reading\": [pureFunctionChain, mirror],\n            \"updating\": [hookUpdatingChain, nop],\n            \"deleting\": [hookDeletingChain, nop]\n        });\n        this._collClass = collClass || Collection;\n    }\n\n    props(Table.prototype, {\n\n        //\n        // Table Protected Methods\n        //\n\n        _trans: function getTransaction(mode, fn, writeLocked) {\n            var trans = PSD.trans;\n            return trans && trans.db === db ? trans._promise(mode, fn, writeLocked) : tempTransaction(mode, [this.name], fn);\n        },\n        _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {\n            if (fake) return new Promise(fn); // Simplify the work for Intellisense/Code completion.\n            var trans = PSD.trans,\n                tableName = this.name;\n            function supplyIdbStore(resolve, reject, trans) {\n                fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);\n            }\n            return trans && trans.db === db ? trans._promise(mode, supplyIdbStore, writeLocked) : tempTransaction(mode, [this.name], supplyIdbStore);\n        },\n\n        //\n        // Table Public Methods\n        //\n        get: function (key, cb) {\n            var self = this;\n            return this._idbstore(READONLY, function (resolve, reject, idbstore) {\n                fake && resolve(self.schema.instanceTemplate);\n                var req = idbstore.get(key);\n                req.onerror = eventRejectHandler(reject);\n                req.onsuccess = wrap(function () {\n                    resolve(self.hook.reading.fire(req.result));\n                }, reject);\n            }).then(cb);\n        },\n        where: function (indexName) {\n            return new WhereClause(this, indexName);\n        },\n        count: function (cb) {\n            return this.toCollection().count(cb);\n        },\n        offset: function (offset) {\n            return this.toCollection().offset(offset);\n        },\n        limit: function (numRows) {\n            return this.toCollection().limit(numRows);\n        },\n        reverse: function () {\n            return this.toCollection().reverse();\n        },\n        filter: function (filterFunction) {\n            return this.toCollection().and(filterFunction);\n        },\n        each: function (fn) {\n            return this.toCollection().each(fn);\n        },\n        toArray: function (cb) {\n            return this.toCollection().toArray(cb);\n        },\n        orderBy: function (index) {\n            return new this._collClass(new WhereClause(this, index));\n        },\n\n        toCollection: function () {\n            return new this._collClass(new WhereClause(this));\n        },\n\n        mapToClass: function (constructor, structure) {\n            /// <summary>\n            ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making\n            ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.\n            /// </summary>\n            /// <param name=\"constructor\">Constructor function representing the class.</param>\n            /// <param name=\"structure\" optional=\"true\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>\n            this.schema.mappedClass = constructor;\n            var instanceTemplate = Object.create(constructor.prototype);\n            if (structure) {\n                // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.\n                applyStructure(instanceTemplate, structure);\n            }\n            this.schema.instanceTemplate = instanceTemplate;\n\n            // Now, subscribe to the when(\"reading\") event to make all objects that come out from this table inherit from given class\n            // no matter which method to use for reading (Table.get() or Table.where(...)... )\n            var readHook = function (obj) {\n                if (!obj) return obj; // No valid object. (Value is null). Return as is.\n                // Create a new object that derives from constructor:\n                var res = Object.create(constructor.prototype);\n                // Clone members:\n                for (var m in obj) {\n                    if (hasOwn(obj, m)) try {\n                        res[m] = obj[m];\n                    } catch (_) {}\n                }return res;\n            };\n\n            if (this.schema.readHook) {\n                this.hook.reading.unsubscribe(this.schema.readHook);\n            }\n            this.schema.readHook = readHook;\n            this.hook(\"reading\", readHook);\n            return constructor;\n        },\n        defineClass: function (structure) {\n            /// <summary>\n            ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database\n            ///     as well as making it possible to extend the prototype of the returned constructor function.\n            /// </summary>\n            /// <param name=\"structure\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\n            return this.mapToClass(Dexie.defineClass(structure), structure);\n        }\n    });\n\n    //\n    //\n    //\n    // WriteableTable Class (extends Table)\n    //\n    //\n    //\n    function WriteableTable(name, tableSchema, collClass) {\n        Table.call(this, name, tableSchema, collClass || WriteableCollection);\n    }\n\n    function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {\n        return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {\n            errorList.push(e);\n            done && done();\n        });\n    }\n\n    function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {\n        // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],\n        // else keysOrTuples must be just an array of keys: [key1, key2, ...].\n        return new Promise(function (resolve, reject) {\n            var len = keysOrTuples.length,\n                lastItem = len - 1;\n            if (len === 0) return resolve();\n            if (!hasDeleteHook) {\n                for (var i = 0; i < len; ++i) {\n                    var req = idbstore.delete(keysOrTuples[i]);\n                    req.onerror = wrap(eventRejectHandler(reject));\n                    if (i === lastItem) req.onsuccess = wrap(function () {\n                        return resolve();\n                    });\n                }\n            } else {\n                var hookCtx,\n                    errorHandler = hookedEventRejectHandler(reject),\n                    successHandler = hookedEventSuccessHandler(null);\n                tryCatch(function () {\n                    for (var i = 0; i < len; ++i) {\n                        hookCtx = { onsuccess: null, onerror: null };\n                        var tuple = keysOrTuples[i];\n                        deletingHook.call(hookCtx, tuple[0], tuple[1], trans);\n                        var req = idbstore.delete(tuple[0]);\n                        req._hookCtx = hookCtx;\n                        req.onerror = errorHandler;\n                        if (i === lastItem) req.onsuccess = hookedEventSuccessHandler(resolve);else req.onsuccess = successHandler;\n                    }\n                }, function (err) {\n                    hookCtx.onerror && hookCtx.onerror(err);\n                    throw err;\n                });\n            }\n        }).uncaught(dbUncaught);\n    }\n\n    derive(WriteableTable).from(Table).extend({\n        bulkDelete: function (keys$$1) {\n            if (this.hook.deleting.fire === nop) {\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                    resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));\n                });\n            } else {\n                return this.where(':id').anyOf(keys$$1).delete().then(function () {}); // Resolve with undefined.\n            }\n        },\n        bulkPut: function (objects, keys$$1) {\n            var _this = this;\n\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument(\"bulkPut() with non-inbound keys requires keys array in second argument\");\n                if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument(\"bulkPut(): keys argument invalid on tables with inbound keys\");\n                if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\n                if (objects.length === 0) return resolve(); // Caller provided empty list.\n                var done = function (result) {\n                    if (errorList.length === 0) resolve(result);else reject(new BulkError(_this.name + '.bulkPut(): ' + errorList.length + ' of ' + numObjs + ' operations failed', errorList));\n                };\n                var req,\n                    errorList = [],\n                    errorHandler,\n                    numObjs = objects.length,\n                    table = _this;\n                if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {\n                    //\n                    // Standard Bulk (no 'creating' or 'updating' hooks to care about)\n                    //\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\n                    for (var i = 0, l = objects.length; i < l; ++i) {\n                        req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);\n                        req.onerror = errorHandler;\n                    }\n                    // Only need to catch success or error on the last operation\n                    // according to the IDB spec.\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\n                    req.onsuccess = eventSuccessHandler(done);\n                } else {\n                    var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) {\n                        return getByKeyPath(o, idbstore.keyPath);\n                    });\n                    // Generate map of {[key]: object}\n                    var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) {\n                        return key != null && [key, objects[i]];\n                    });\n                    var promise = !effectiveKeys ?\n\n                    // Auto-incremented key-less objects only without any keys argument.\n                    table.bulkAdd(objects) :\n\n                    // Keys provided. Either as inbound in provided objects, or as a keys argument.\n                    // Begin with updating those that exists in DB:\n                    table.where(':id').anyOf(effectiveKeys.filter(function (key) {\n                        return key != null;\n                    })).modify(function () {\n                        this.value = objectLookup[this.primKey];\n                        objectLookup[this.primKey] = null; // Mark as \"don't add this\"\n                    }).catch(ModifyError, function (e) {\n                        errorList = e.failures; // No need to concat here. These are the first errors added.\n                    }).then(function () {\n                        // Now, let's examine which items didnt exist so we can add them:\n                        var objsToAdd = [],\n                            keysToAdd = keys$$1 && [];\n                        // Iterate backwards. Why? Because if same key was used twice, just add the last one.\n                        for (var i = effectiveKeys.length - 1; i >= 0; --i) {\n                            var key = effectiveKeys[i];\n                            if (key == null || objectLookup[key]) {\n                                objsToAdd.push(objects[i]);\n                                keys$$1 && keysToAdd.push(key);\n                                if (key != null) objectLookup[key] = null; // Mark as \"dont add again\"\n                            }\n                        }\n                        // The items are in reverse order so reverse them before adding.\n                        // Could be important in order to get auto-incremented keys the way the caller\n                        // would expect. Could have used unshift instead of push()/reverse(),\n                        // but: http://jsperf.com/unshift-vs-reverse\n                        objsToAdd.reverse();\n                        keys$$1 && keysToAdd.reverse();\n                        return table.bulkAdd(objsToAdd, keysToAdd);\n                    }).then(function (lastAddedKey) {\n                        // Resolve with key of the last object in given arguments to bulkPut():\n                        var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.\n                        return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;\n                    });\n\n                    promise.then(done).catch(BulkError, function (e) {\n                        // Concat failure from ModifyError and reject using our 'done' method.\n                        errorList = errorList.concat(e.failures);\n                        done();\n                    }).catch(reject);\n                }\n            }, \"locked\"); // If called from transaction scope, lock transaction til all steps are done.\n        },\n        bulkAdd: function (objects, keys$$1) {\n            var self = this,\n                creatingHook = this.hook.creating.fire;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument(\"bulkAdd() with non-inbound keys requires keys array in second argument\");\n                if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument(\"bulkAdd(): keys argument invalid on tables with inbound keys\");\n                if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\n                if (objects.length === 0) return resolve(); // Caller provided empty list.\n                function done(result) {\n                    if (errorList.length === 0) resolve(result);else reject(new BulkError(self.name + '.bulkAdd(): ' + errorList.length + ' of ' + numObjs + ' operations failed', errorList));\n                }\n                var req,\n                    errorList = [],\n                    errorHandler,\n                    successHandler,\n                    numObjs = objects.length;\n                if (creatingHook !== nop) {\n                    //\n                    // There are subscribers to hook('creating')\n                    // Must behave as documented.\n                    //\n                    var keyPath = idbstore.keyPath,\n                        hookCtx;\n                    errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);\n                    successHandler = hookedEventSuccessHandler(null);\n\n                    tryCatch(function () {\n                        for (var i = 0, l = objects.length; i < l; ++i) {\n                            hookCtx = { onerror: null, onsuccess: null };\n                            var key = keys$$1 && keys$$1[i];\n                            var obj = objects[i],\n                                effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined,\n                                keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);\n                            if (effectiveKey == null && keyToUse != null) {\n                                if (keyPath) {\n                                    obj = deepClone(obj);\n                                    setByKeyPath(obj, keyPath, keyToUse);\n                                } else {\n                                    key = keyToUse;\n                                }\n                            }\n                            req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\n                            req._hookCtx = hookCtx;\n                            if (i < l - 1) {\n                                req.onerror = errorHandler;\n                                if (hookCtx.onsuccess) req.onsuccess = successHandler;\n                            }\n                        }\n                    }, function (err) {\n                        hookCtx.onerror && hookCtx.onerror(err);\n                        throw err;\n                    });\n\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);\n                    req.onsuccess = hookedEventSuccessHandler(done);\n                } else {\n                    //\n                    // Standard Bulk (no 'creating' hook to care about)\n                    //\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\n                    for (var i = 0, l = objects.length; i < l; ++i) {\n                        req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);\n                        req.onerror = errorHandler;\n                    }\n                    // Only need to catch success or error on the last operation\n                    // according to the IDB spec.\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\n                    req.onsuccess = eventSuccessHandler(done);\n                }\n            });\n        },\n        add: function (obj, key) {\n            /// <summary>\n            ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.\n            /// </summary>\n            /// <param name=\"obj\" type=\"Object\">A javascript object to insert</param>\n            /// <param name=\"key\" optional=\"true\">Primary key</param>\n            var creatingHook = this.hook.creating.fire;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                var hookCtx = { onsuccess: null, onerror: null };\n                if (creatingHook !== nop) {\n                    var effectiveKey = key != null ? key : idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined;\n                    var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when(\"creating\") to generate the key.\n                    if (effectiveKey == null && keyToUse != null) {\n                        // Using \"==\" and \"!=\" to check for either null or undefined!\n                        if (idbstore.keyPath) setByKeyPath(obj, idbstore.keyPath, keyToUse);else key = keyToUse;\n                    }\n                }\n                try {\n                    var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\n                    req._hookCtx = hookCtx;\n                    req.onerror = hookedEventRejectHandler(reject);\n                    req.onsuccess = hookedEventSuccessHandler(function (result) {\n                        // TODO: Remove these two lines in next major release (2.0?)\n                        // It's no good practice to have side effects on provided parameters\n                        var keyPath = idbstore.keyPath;\n                        if (keyPath) setByKeyPath(obj, keyPath, result);\n                        resolve(result);\n                    });\n                } catch (e) {\n                    if (hookCtx.onerror) hookCtx.onerror(e);\n                    throw e;\n                }\n            });\n        },\n\n        put: function (obj, key) {\n            /// <summary>\n            ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.\n            /// </summary>\n            /// <param name=\"obj\" type=\"Object\">A javascript object to insert or update</param>\n            /// <param name=\"key\" optional=\"true\">Primary key</param>\n            var self = this,\n                creatingHook = this.hook.creating.fire,\n                updatingHook = this.hook.updating.fire;\n            if (creatingHook !== nop || updatingHook !== nop) {\n                //\n                // People listens to when(\"creating\") or when(\"updating\") events!\n                // We must know whether the put operation results in an CREATE or UPDATE.\n                //\n                return this._trans(READWRITE, function (resolve, reject, trans) {\n                    // Since key is optional, make sure we get it from obj if not provided\n                    var effectiveKey = key !== undefined ? key : self.schema.primKey.keyPath && getByKeyPath(obj, self.schema.primKey.keyPath);\n                    if (effectiveKey == null) {\n                        // \"== null\" means checking for either null or undefined.\n                        // No primary key. Must use add().\n                        self.add(obj).then(resolve, reject);\n                    } else {\n                        // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().\n                        trans._lock(); // Needed because operation is splitted into modify() and add().\n                        // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.\n                        obj = deepClone(obj);\n                        self.where(\":id\").equals(effectiveKey).modify(function () {\n                            // Replace extisting value with our object\n                            // CRUD event firing handled in WriteableCollection.modify()\n                            this.value = obj;\n                        }).then(function (count) {\n                            if (count === 0) {\n                                // Object's key was not found. Add the object instead.\n                                // CRUD event firing will be done in add()\n                                return self.add(obj, key); // Resolving with another Promise. Returned Promise will then resolve with the new key.\n                            } else {\n                                return effectiveKey; // Resolve with the provided key.\n                            }\n                        }).finally(function () {\n                            trans._unlock();\n                        }).then(resolve, reject);\n                    }\n                });\n            } else {\n                // Use the standard IDB put() method.\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = function (ev) {\n                        var keyPath = idbstore.keyPath;\n                        if (keyPath) setByKeyPath(obj, keyPath, ev.target.result);\n                        resolve(req.result);\n                    };\n                });\n            }\n        },\n\n        'delete': function (key) {\n            /// <param name=\"key\">Primary key of the object to delete</param>\n            if (this.hook.deleting.subscribers.length) {\n                // People listens to when(\"deleting\") event. Must implement delete using WriteableCollection.delete() that will\n                // call the CRUD event. Only WriteableCollection.delete() will know whether an object was actually deleted.\n                return this.where(\":id\").equals(key).delete();\n            } else {\n                // No one listens. Use standard IDB delete() method.\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = idbstore.delete(key);\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n                });\n            }\n        },\n\n        clear: function () {\n            if (this.hook.deleting.subscribers.length) {\n                // People listens to when(\"deleting\") event. Must implement delete using WriteableCollection.delete() that will\n                // call the CRUD event. Only WriteableCollection.delete() will knows which objects that are actually deleted.\n                return this.toCollection().delete();\n            } else {\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = idbstore.clear();\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n                });\n            }\n        },\n\n        update: function (keyOrObject, modifications) {\n            if (typeof modifications !== 'object' || isArray(modifications)) throw new exceptions.InvalidArgument(\"Modifications must be an object.\");\n            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {\n                // object to modify. Also modify given object with the modifications:\n                keys(modifications).forEach(function (keyPath) {\n                    setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);\n                });\n                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);\n                if (key === undefined) return rejection(new exceptions.InvalidArgument(\"Given object does not contain its primary key\"), dbUncaught);\n                return this.where(\":id\").equals(key).modify(modifications);\n            } else {\n                // key to modify\n                return this.where(\":id\").equals(keyOrObject).modify(modifications);\n            }\n        }\n    });\n\n    //\n    //\n    //\n    // Transaction Class\n    //\n    //\n    //\n    function Transaction(mode, storeNames, dbschema, parent) {\n        var _this2 = this;\n\n        /// <summary>\n        ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.\n        /// </summary>\n        /// <param name=\"mode\" type=\"String\">Any of \"readwrite\" or \"readonly\"</param>\n        /// <param name=\"storeNames\" type=\"Array\">Array of table names to operate on</param>\n        this.db = db;\n        this.mode = mode;\n        this.storeNames = storeNames;\n        this.idbtrans = null;\n        this.on = Events(this, \"complete\", \"error\", \"abort\");\n        this.parent = parent || null;\n        this.active = true;\n        this._tables = null;\n        this._reculock = 0;\n        this._blockedFuncs = [];\n        this._psd = null;\n        this._dbschema = dbschema;\n        this._resolve = null;\n        this._reject = null;\n        this._completion = new Promise(function (resolve, reject) {\n            _this2._resolve = resolve;\n            _this2._reject = reject;\n        }).uncaught(dbUncaught);\n\n        this._completion.then(function () {\n            _this2.on.complete.fire();\n        }, function (e) {\n            _this2.on.error.fire(e);\n            _this2.parent ? _this2.parent._reject(e) : _this2.active && _this2.idbtrans && _this2.idbtrans.abort();\n            _this2.active = false;\n            return rejection(e); // Indicate we actually DO NOT catch this error.\n        });\n    }\n\n    props(Transaction.prototype, {\n        //\n        // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)\n        //\n        _lock: function () {\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\n            // Temporary set all requests into a pending queue if they are called before database is ready.\n            ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)\n            if (this._reculock === 1 && !PSD.global) PSD.lockOwnerFor = this;\n            return this;\n        },\n        _unlock: function () {\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\n            if (--this._reculock === 0) {\n                if (!PSD.global) PSD.lockOwnerFor = null;\n                while (this._blockedFuncs.length > 0 && !this._locked()) {\n                    var fnAndPSD = this._blockedFuncs.shift();\n                    try {\n                        usePSD(fnAndPSD[1], fnAndPSD[0]);\n                    } catch (e) {}\n                }\n            }\n            return this;\n        },\n        _locked: function () {\n            // Checks if any write-lock is applied on this transaction.\n            // To simplify the Dexie API for extension implementations, we support recursive locks.\n            // This is accomplished by using \"Promise Specific Data\" (PSD).\n            // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).\n            // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():\n            //         * callback given to the Promise() constructor  (function (resolve, reject){...})\n            //         * callbacks given to then()/catch()/finally() methods (function (value){...})\n            // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.\n            // Derivation is done so that the inner PSD __proto__ points to the outer PSD.\n            // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.\n            return this._reculock && PSD.lockOwnerFor !== this;\n        },\n        create: function (idbtrans) {\n            var _this3 = this;\n\n            assert(!this.idbtrans);\n            if (!idbtrans && !idbdb) {\n                switch (dbOpenError && dbOpenError.name) {\n                    case \"DatabaseClosedError\":\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\n                        throw new exceptions.DatabaseClosed(dbOpenError);\n                    case \"MissingAPIError\":\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\n                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);\n                    default:\n                        // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!\n                        throw new exceptions.OpenFailed(dbOpenError);\n                }\n            }\n            if (!this.active) throw new exceptions.TransactionInactive();\n            assert(this._completion._state === null);\n\n            idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);\n            idbtrans.onerror = wrap(function (ev) {\n                preventDefault(ev); // Prohibit default bubbling to window.error\n                _this3._reject(idbtrans.error);\n            });\n            idbtrans.onabort = wrap(function (ev) {\n                preventDefault(ev);\n                _this3.active && _this3._reject(new exceptions.Abort());\n                _this3.active = false;\n                _this3.on(\"abort\").fire(ev);\n            });\n            idbtrans.oncomplete = wrap(function () {\n                _this3.active = false;\n                _this3._resolve();\n            });\n            return this;\n        },\n        _promise: function (mode, fn, bWriteLock) {\n            var self = this;\n            var p = self._locked() ?\n            // Read lock always. Transaction is write-locked. Wait for mutex.\n            new Promise(function (resolve, reject) {\n                self._blockedFuncs.push([function () {\n                    self._promise(mode, fn, bWriteLock).then(resolve, reject);\n                }, PSD]);\n            }) : newScope(function () {\n                var p_ = self.active ? new Promise(function (resolve, reject) {\n                    if (mode === READWRITE && self.mode !== READWRITE) throw new exceptions.ReadOnly(\"Transaction is readonly\");\n                    if (!self.idbtrans && mode) self.create();\n                    if (bWriteLock) self._lock(); // Write lock if write operation is requested\n                    fn(resolve, reject, self);\n                }) : rejection(new exceptions.TransactionInactive());\n                if (self.active && bWriteLock) p_.finally(function () {\n                    self._unlock();\n                });\n                return p_;\n            });\n\n            p._lib = true;\n            return p.uncaught(dbUncaught);\n        },\n\n        //\n        // Transaction Public Properties and Methods\n        //\n        abort: function () {\n            this.active && this._reject(new exceptions.Abort());\n            this.active = false;\n        },\n\n        tables: {\n            get: deprecated(\"Transaction.tables\", function () {\n                return arrayToObject(this.storeNames, function (name) {\n                    return [name, allTables[name]];\n                });\n            }, \"Use db.tables()\")\n        },\n\n        complete: deprecated(\"Transaction.complete()\", function (cb) {\n            return this.on(\"complete\", cb);\n        }),\n\n        error: deprecated(\"Transaction.error()\", function (cb) {\n            return this.on(\"error\", cb);\n        }),\n\n        table: deprecated(\"Transaction.table()\", function (name) {\n            if (this.storeNames.indexOf(name) === -1) throw new exceptions.InvalidTable(\"Table \" + name + \" not in transaction\");\n            return allTables[name];\n        })\n\n    });\n\n    //\n    //\n    //\n    // WhereClause\n    //\n    //\n    //\n    function WhereClause(table, index, orCollection) {\n        /// <param name=\"table\" type=\"Table\"></param>\n        /// <param name=\"index\" type=\"String\" optional=\"true\"></param>\n        /// <param name=\"orCollection\" type=\"Collection\" optional=\"true\"></param>\n        this._ctx = {\n            table: table,\n            index: index === \":id\" ? null : index,\n            collClass: table._collClass,\n            or: orCollection\n        };\n    }\n\n    props(WhereClause.prototype, function () {\n\n        // WhereClause private methods\n\n        function fail(collectionOrWhereClause, err, T) {\n            var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause._ctx.collClass(collectionOrWhereClause) : collectionOrWhereClause;\n\n            collection._ctx.error = T ? new T(err) : new TypeError(err);\n            return collection;\n        }\n\n        function emptyCollection(whereClause) {\n            return new whereClause._ctx.collClass(whereClause, function () {\n                return IDBKeyRange.only(\"\");\n            }).limit(0);\n        }\n\n        function upperFactory(dir) {\n            return dir === \"next\" ? function (s) {\n                return s.toUpperCase();\n            } : function (s) {\n                return s.toLowerCase();\n            };\n        }\n        function lowerFactory(dir) {\n            return dir === \"next\" ? function (s) {\n                return s.toLowerCase();\n            } : function (s) {\n                return s.toUpperCase();\n            };\n        }\n        function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {\n            var length = Math.min(key.length, lowerNeedle.length);\n            var llp = -1;\n            for (var i = 0; i < length; ++i) {\n                var lwrKeyChar = lowerKey[i];\n                if (lwrKeyChar !== lowerNeedle[i]) {\n                    if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);\n                    if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);\n                    if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);\n                    return null;\n                }\n                if (cmp(key[i], lwrKeyChar) < 0) llp = i;\n            }\n            if (length < lowerNeedle.length && dir === \"next\") return key + upperNeedle.substr(key.length);\n            if (length < key.length && dir === \"prev\") return key.substr(0, upperNeedle.length);\n            return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);\n        }\n\n        function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {\n            /// <param name=\"needles\" type=\"Array\" elementType=\"String\"></param>\n            var upper,\n                lower,\n                compare,\n                upperNeedles,\n                lowerNeedles,\n                direction,\n                nextKeySuffix,\n                needlesLen = needles.length;\n            if (!needles.every(function (s) {\n                return typeof s === 'string';\n            })) {\n                return fail(whereClause, STRING_EXPECTED);\n            }\n            function initDirection(dir) {\n                upper = upperFactory(dir);\n                lower = lowerFactory(dir);\n                compare = dir === \"next\" ? simpleCompare : simpleCompareReverse;\n                var needleBounds = needles.map(function (needle) {\n                    return { lower: lower(needle), upper: upper(needle) };\n                }).sort(function (a, b) {\n                    return compare(a.lower, b.lower);\n                });\n                upperNeedles = needleBounds.map(function (nb) {\n                    return nb.upper;\n                });\n                lowerNeedles = needleBounds.map(function (nb) {\n                    return nb.lower;\n                });\n                direction = dir;\n                nextKeySuffix = dir === \"next\" ? \"\" : suffix;\n            }\n            initDirection(\"next\");\n\n            var c = new whereClause._ctx.collClass(whereClause, function () {\n                return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);\n            });\n\n            c._ondirectionchange = function (direction) {\n                // This event onlys occur before filter is called the first time.\n                initDirection(direction);\n            };\n\n            var firstPossibleNeedle = 0;\n\n            c._addAlgorithm(function (cursor, advance, resolve) {\n                /// <param name=\"cursor\" type=\"IDBCursor\"></param>\n                /// <param name=\"advance\" type=\"Function\"></param>\n                /// <param name=\"resolve\" type=\"Function\"></param>\n                var key = cursor.key;\n                if (typeof key !== 'string') return false;\n                var lowerKey = lower(key);\n                if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {\n                    return true;\n                } else {\n                    var lowestPossibleCasing = null;\n                    for (var i = firstPossibleNeedle; i < needlesLen; ++i) {\n                        var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);\n                        if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1;else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {\n                            lowestPossibleCasing = casing;\n                        }\n                    }\n                    if (lowestPossibleCasing !== null) {\n                        advance(function () {\n                            cursor.continue(lowestPossibleCasing + nextKeySuffix);\n                        });\n                    } else {\n                        advance(resolve);\n                    }\n                    return false;\n                }\n            });\n            return c;\n        }\n\n        //\n        // WhereClause public methods\n        //\n        return {\n            between: function (lower, upper, includeLower, includeUpper) {\n                /// <summary>\n                ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.\n                /// </summary>\n                /// <param name=\"lower\"></param>\n                /// <param name=\"upper\"></param>\n                /// <param name=\"includeLower\" optional=\"true\">Whether items that equals lower should be included. Default true.</param>\n                /// <param name=\"includeUpper\" optional=\"true\">Whether items that equals upper should be included. Default false.</param>\n                /// <returns type=\"Collection\"></returns>\n                includeLower = includeLower !== false; // Default to true\n                includeUpper = includeUpper === true; // Default to false\n                try {\n                    if (cmp(lower, upper) > 0 || cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.\n                    return new this._ctx.collClass(this, function () {\n                        return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper);\n                    });\n                } catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n            },\n            equals: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.only(value);\n                });\n            },\n            above: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.lowerBound(value, true);\n                });\n            },\n            aboveOrEqual: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.lowerBound(value);\n                });\n            },\n            below: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.upperBound(value, true);\n                });\n            },\n            belowOrEqual: function (value) {\n                return new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.upperBound(value);\n                });\n            },\n            startsWith: function (str) {\n                /// <param name=\"str\" type=\"String\"></param>\n                if (typeof str !== 'string') return fail(this, STRING_EXPECTED);\n                return this.between(str, str + maxString, true, true);\n            },\n            startsWithIgnoreCase: function (str) {\n                /// <param name=\"str\" type=\"String\"></param>\n                if (str === \"\") return this.startsWith(str);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return x.indexOf(a[0]) === 0;\n                }, [str], maxString);\n            },\n            equalsIgnoreCase: function (str) {\n                /// <param name=\"str\" type=\"String\"></param>\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return x === a[0];\n                }, [str], \"\");\n            },\n            anyOfIgnoreCase: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0) return emptyCollection(this);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return a.indexOf(x) !== -1;\n                }, set, \"\");\n            },\n            startsWithAnyOfIgnoreCase: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0) return emptyCollection(this);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return a.some(function (n) {\n                        return x.indexOf(n) === 0;\n                    });\n                }, set, maxString);\n            },\n            anyOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                var compare = ascending;\n                try {\n                    set.sort(compare);\n                } catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                if (set.length === 0) return emptyCollection(this);\n                var c = new this._ctx.collClass(this, function () {\n                    return IDBKeyRange.bound(set[0], set[set.length - 1]);\n                });\n\n                c._ondirectionchange = function (direction) {\n                    compare = direction === \"next\" ? ascending : descending;\n                    set.sort(compare);\n                };\n                var i = 0;\n                c._addAlgorithm(function (cursor, advance, resolve) {\n                    var key = cursor.key;\n                    while (compare(key, set[i]) > 0) {\n                        // The cursor has passed beyond this key. Check next.\n                        ++i;\n                        if (i === set.length) {\n                            // There is no next. Stop searching.\n                            advance(resolve);\n                            return false;\n                        }\n                    }\n                    if (compare(key, set[i]) === 0) {\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\n                        return true;\n                    } else {\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\n                        advance(function () {\n                            cursor.continue(set[i]);\n                        });\n                        return false;\n                    }\n                });\n                return c;\n            },\n\n            notEqual: function (value) {\n                return this.inAnyRange([[-Infinity, value], [value, maxKey]], { includeLowers: false, includeUppers: false });\n            },\n\n            noneOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0) return new this._ctx.collClass(this); // Return entire collection.\n                try {\n                    set.sort(ascending);\n                } catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                // Transform [\"a\",\"b\",\"c\"] to a set of ranges for between/above/below: [[-Infinity,\"a\"], [\"a\",\"b\"], [\"b\",\"c\"], [\"c\",maxKey]]\n                var ranges = set.reduce(function (res, val) {\n                    return res ? res.concat([[res[res.length - 1][1], val]]) : [[-Infinity, val]];\n                }, null);\n                ranges.push([set[set.length - 1], maxKey]);\n                return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });\n            },\n\n            /** Filter out values withing given set of ranges.\r\n            * Example, give children and elders a rebate of 50%:\r\n            *\r\n            *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});\r\n            *\r\n            * @param {(string|number|Date|Array)[][]} ranges\r\n            * @param {{includeLowers: boolean, includeUppers: boolean}} options\r\n            */\n            inAnyRange: function (ranges, options) {\n                var ctx = this._ctx;\n                if (ranges.length === 0) return emptyCollection(this);\n                if (!ranges.every(function (range) {\n                    return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;\n                })) {\n                    return fail(this, \"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower\", exceptions.InvalidArgument);\n                }\n                var includeLowers = !options || options.includeLowers !== false; // Default to true\n                var includeUppers = options && options.includeUppers === true; // Default to false\n\n                function addRange(ranges, newRange) {\n                    for (var i = 0, l = ranges.length; i < l; ++i) {\n                        var range = ranges[i];\n                        if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {\n                            range[0] = min(range[0], newRange[0]);\n                            range[1] = max(range[1], newRange[1]);\n                            break;\n                        }\n                    }\n                    if (i === l) ranges.push(newRange);\n                    return ranges;\n                }\n\n                var sortDirection = ascending;\n                function rangeSorter(a, b) {\n                    return sortDirection(a[0], b[0]);\n                }\n\n                // Join overlapping ranges\n                var set;\n                try {\n                    set = ranges.reduce(addRange, []);\n                    set.sort(rangeSorter);\n                } catch (ex) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n\n                var i = 0;\n                var keyIsBeyondCurrentEntry = includeUppers ? function (key) {\n                    return ascending(key, set[i][1]) > 0;\n                } : function (key) {\n                    return ascending(key, set[i][1]) >= 0;\n                };\n\n                var keyIsBeforeCurrentEntry = includeLowers ? function (key) {\n                    return descending(key, set[i][0]) > 0;\n                } : function (key) {\n                    return descending(key, set[i][0]) >= 0;\n                };\n\n                function keyWithinCurrentRange(key) {\n                    return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);\n                }\n\n                var checkKey = keyIsBeyondCurrentEntry;\n\n                var c = new ctx.collClass(this, function () {\n                    return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);\n                });\n\n                c._ondirectionchange = function (direction) {\n                    if (direction === \"next\") {\n                        checkKey = keyIsBeyondCurrentEntry;\n                        sortDirection = ascending;\n                    } else {\n                        checkKey = keyIsBeforeCurrentEntry;\n                        sortDirection = descending;\n                    }\n                    set.sort(rangeSorter);\n                };\n\n                c._addAlgorithm(function (cursor, advance, resolve) {\n                    var key = cursor.key;\n                    while (checkKey(key)) {\n                        // The cursor has passed beyond this key. Check next.\n                        ++i;\n                        if (i === set.length) {\n                            // There is no next. Stop searching.\n                            advance(resolve);\n                            return false;\n                        }\n                    }\n                    if (keyWithinCurrentRange(key)) {\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\n                        return true;\n                    } else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {\n                        // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.\n                        // Continue to next key but don't include this one.\n                        return false;\n                    } else {\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\n                        advance(function () {\n                            if (sortDirection === ascending) cursor.continue(set[i][0]);else cursor.continue(set[i][1]);\n                        });\n                        return false;\n                    }\n                });\n                return c;\n            },\n            startsWithAnyOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n\n                if (!set.every(function (s) {\n                    return typeof s === 'string';\n                })) {\n                    return fail(this, \"startsWithAnyOf() only works with strings\");\n                }\n                if (set.length === 0) return emptyCollection(this);\n\n                return this.inAnyRange(set.map(function (str) {\n                    return [str, str + maxString];\n                }));\n            }\n        };\n    });\n\n    //\n    //\n    //\n    // Collection Class\n    //\n    //\n    //\n    function Collection(whereClause, keyRangeGenerator) {\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"whereClause\" type=\"WhereClause\">Where clause instance</param>\n        /// <param name=\"keyRangeGenerator\" value=\"function(){ return IDBKeyRange.bound(0,1);}\" optional=\"true\"></param>\n        var keyRange = null,\n            error = null;\n        if (keyRangeGenerator) try {\n            keyRange = keyRangeGenerator();\n        } catch (ex) {\n            error = ex;\n        }\n\n        var whereCtx = whereClause._ctx,\n            table = whereCtx.table;\n        this._ctx = {\n            table: table,\n            index: whereCtx.index,\n            isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,\n            range: keyRange,\n            keysOnly: false,\n            dir: \"next\",\n            unique: \"\",\n            algorithm: null,\n            filter: null,\n            replayFilter: null,\n            justLimit: true, // True if a replayFilter is just a filter that performs a \"limit\" operation (or none at all)\n            isMatch: null,\n            offset: 0,\n            limit: Infinity,\n            error: error, // If set, any promise must be rejected with this error\n            or: whereCtx.or,\n            valueMapper: table.hook.reading.fire\n        };\n    }\n\n    function isPlainKeyRange(ctx, ignoreLimitFilter) {\n        return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);\n    }\n\n    props(Collection.prototype, function () {\n\n        //\n        // Collection Private Functions\n        //\n\n        function addFilter(ctx, fn) {\n            ctx.filter = combine(ctx.filter, fn);\n        }\n\n        function addReplayFilter(ctx, factory, isLimitFilter) {\n            var curr = ctx.replayFilter;\n            ctx.replayFilter = curr ? function () {\n                return combine(curr(), factory());\n            } : factory;\n            ctx.justLimit = isLimitFilter && !curr;\n        }\n\n        function addMatchFilter(ctx, fn) {\n            ctx.isMatch = combine(ctx.isMatch, fn);\n        }\n\n        /** @param ctx {\r\n         *      isPrimKey: boolean,\r\n         *      table: Table,\r\n         *      index: string\r\n         * }\r\n         * @param store IDBObjectStore\r\n         **/\n        function getIndexOrStore(ctx, store) {\n            if (ctx.isPrimKey) return store;\n            var indexSpec = ctx.table.schema.idxByName[ctx.index];\n            if (!indexSpec) throw new exceptions.Schema(\"KeyPath \" + ctx.index + \" on object store \" + store.name + \" is not indexed\");\n            return store.index(indexSpec.name);\n        }\n\n        /** @param ctx {\r\n         *      isPrimKey: boolean,\r\n         *      table: Table,\r\n         *      index: string,\r\n         *      keysOnly: boolean,\r\n         *      range?: IDBKeyRange,\r\n         *      dir: \"next\" | \"prev\"\r\n         * }\r\n         */\n        function openCursor(ctx, store) {\n            var idxOrStore = getIndexOrStore(ctx, store);\n            return ctx.keysOnly && 'openKeyCursor' in idxOrStore ? idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) : idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);\n        }\n\n        function iter(ctx, fn, resolve, reject, idbstore) {\n            var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;\n            if (!ctx.or) {\n                iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);\n            } else (function () {\n                var set = {};\n                var resolved = 0;\n\n                function resolveboth() {\n                    if (++resolved === 2) resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.\n                }\n\n                function union(item, cursor, advance) {\n                    if (!filter || filter(cursor, advance, resolveboth, reject)) {\n                        var key = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\n                        if (!hasOwn(set, key)) {\n                            set[key] = true;\n                            fn(item, cursor, advance);\n                        }\n                    }\n                }\n\n                ctx.or._iterate(union, resolveboth, reject, idbstore);\n                iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);\n            })();\n        }\n        function getInstanceTemplate(ctx) {\n            return ctx.table.schema.instanceTemplate;\n        }\n\n        return {\n\n            //\n            // Collection Protected Functions\n            //\n\n            _read: function (fn, cb) {\n                var ctx = this._ctx;\n                if (ctx.error) return ctx.table._trans(null, function rejector(resolve, reject) {\n                    reject(ctx.error);\n                });else return ctx.table._idbstore(READONLY, fn).then(cb);\n            },\n            _write: function (fn) {\n                var ctx = this._ctx;\n                if (ctx.error) return ctx.table._trans(null, function rejector(resolve, reject) {\n                    reject(ctx.error);\n                });else return ctx.table._idbstore(READWRITE, fn, \"locked\"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.\n            },\n            _addAlgorithm: function (fn) {\n                var ctx = this._ctx;\n                ctx.algorithm = combine(ctx.algorithm, fn);\n            },\n\n            _iterate: function (fn, resolve, reject, idbstore) {\n                return iter(this._ctx, fn, resolve, reject, idbstore);\n            },\n\n            clone: function (props$$1) {\n                var rv = Object.create(this.constructor.prototype),\n                    ctx = Object.create(this._ctx);\n                if (props$$1) extend(ctx, props$$1);\n                rv._ctx = ctx;\n                return rv;\n            },\n\n            raw: function () {\n                this._ctx.valueMapper = null;\n                return this;\n            },\n\n            //\n            // Collection Public methods\n            //\n\n            each: function (fn) {\n                var ctx = this._ctx;\n\n                if (fake) {\n                    var item = getInstanceTemplate(ctx),\n                        primKeyPath = ctx.table.schema.primKey.keyPath,\n                        key = getByKeyPath(item, ctx.index ? ctx.table.schema.idxByName[ctx.index].keyPath : primKeyPath),\n                        primaryKey = getByKeyPath(item, primKeyPath);\n                    fn(item, { key: key, primaryKey: primaryKey });\n                }\n\n                return this._read(function (resolve, reject, idbstore) {\n                    iter(ctx, fn, resolve, reject, idbstore);\n                });\n            },\n\n            count: function (cb) {\n                if (fake) return Promise.resolve(0).then(cb);\n                var ctx = this._ctx;\n\n                if (isPlainKeyRange(ctx, true)) {\n                    // This is a plain key range. We can use the count() method if the index.\n                    return this._read(function (resolve, reject, idbstore) {\n                        var idx = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.range ? idx.count(ctx.range) : idx.count();\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = function (e) {\n                            resolve(Math.min(e.target.result, ctx.limit));\n                        };\n                    }, cb);\n                } else {\n                    // Algorithms, filters or expressions are applied. Need to count manually.\n                    var count = 0;\n                    return this._read(function (resolve, reject, idbstore) {\n                        iter(ctx, function () {\n                            ++count;return false;\n                        }, function () {\n                            resolve(count);\n                        }, reject, idbstore);\n                    }, cb);\n                }\n            },\n\n            sortBy: function (keyPath, cb) {\n                /// <param name=\"keyPath\" type=\"String\"></param>\n                var parts = keyPath.split('.').reverse(),\n                    lastPart = parts[0],\n                    lastIndex = parts.length - 1;\n                function getval(obj, i) {\n                    if (i) return getval(obj[parts[i]], i - 1);\n                    return obj[lastPart];\n                }\n                var order = this._ctx.dir === \"next\" ? 1 : -1;\n\n                function sorter(a, b) {\n                    var aVal = getval(a, lastIndex),\n                        bVal = getval(b, lastIndex);\n                    return aVal < bVal ? -order : aVal > bVal ? order : 0;\n                }\n                return this.toArray(function (a) {\n                    return a.sort(sorter);\n                }).then(cb);\n            },\n\n            toArray: function (cb) {\n                var ctx = this._ctx;\n                return this._read(function (resolve, reject, idbstore) {\n                    fake && resolve([getInstanceTemplate(ctx)]);\n                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                        // Special optimation if we could use IDBObjectStore.getAll() or\n                        // IDBKeyRange.getAll():\n                        var readingHook = ctx.table.hook.reading.fire;\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.limit < Infinity ? idxOrStore.getAll(ctx.range, ctx.limit) : idxOrStore.getAll(ctx.range);\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = readingHook === mirror ? eventSuccessHandler(resolve) : wrap(eventSuccessHandler(function (res) {\n                            try {\n                                resolve(res.map(readingHook));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        }));\n                    } else {\n                        // Getting array through a cursor.\n                        var a = [];\n                        iter(ctx, function (item) {\n                            a.push(item);\n                        }, function arrayComplete() {\n                            resolve(a);\n                        }, reject, idbstore);\n                    }\n                }, cb);\n            },\n\n            offset: function (offset) {\n                var ctx = this._ctx;\n                if (offset <= 0) return this;\n                ctx.offset += offset; // For count()\n                if (isPlainKeyRange(ctx)) {\n                    addReplayFilter(ctx, function () {\n                        var offsetLeft = offset;\n                        return function (cursor, advance) {\n                            if (offsetLeft === 0) return true;\n                            if (offsetLeft === 1) {\n                                --offsetLeft;return false;\n                            }\n                            advance(function () {\n                                cursor.advance(offsetLeft);\n                                offsetLeft = 0;\n                            });\n                            return false;\n                        };\n                    });\n                } else {\n                    addReplayFilter(ctx, function () {\n                        var offsetLeft = offset;\n                        return function () {\n                            return --offsetLeft < 0;\n                        };\n                    });\n                }\n                return this;\n            },\n\n            limit: function (numRows) {\n                this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()\n                addReplayFilter(this._ctx, function () {\n                    var rowsLeft = numRows;\n                    return function (cursor, advance, resolve) {\n                        if (--rowsLeft <= 0) advance(resolve); // Stop after this item has been included\n                        return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.\n                    };\n                }, true);\n                return this;\n            },\n\n            until: function (filterFunction, bIncludeStopEntry) {\n                var ctx = this._ctx;\n                fake && filterFunction(getInstanceTemplate(ctx));\n                addFilter(this._ctx, function (cursor, advance, resolve) {\n                    if (filterFunction(cursor.value)) {\n                        advance(resolve);\n                        return bIncludeStopEntry;\n                    } else {\n                        return true;\n                    }\n                });\n                return this;\n            },\n\n            first: function (cb) {\n                return this.limit(1).toArray(function (a) {\n                    return a[0];\n                }).then(cb);\n            },\n\n            last: function (cb) {\n                return this.reverse().first(cb);\n            },\n\n            filter: function (filterFunction) {\n                /// <param name=\"jsFunctionFilter\" type=\"Function\">function(val){return true/false}</param>\n                fake && filterFunction(getInstanceTemplate(this._ctx));\n                addFilter(this._ctx, function (cursor) {\n                    return filterFunction(cursor.value);\n                });\n                // match filters not used in Dexie.js but can be used by 3rd part libraries to test a\n                // collection for a match without querying DB. Used by Dexie.Observable.\n                addMatchFilter(this._ctx, filterFunction);\n                return this;\n            },\n\n            and: function (filterFunction) {\n                return this.filter(filterFunction);\n            },\n\n            or: function (indexName) {\n                return new WhereClause(this._ctx.table, indexName, this);\n            },\n\n            reverse: function () {\n                this._ctx.dir = this._ctx.dir === \"prev\" ? \"next\" : \"prev\";\n                if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);\n                return this;\n            },\n\n            desc: function () {\n                return this.reverse();\n            },\n\n            eachKey: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                return this.each(function (val, cursor) {\n                    cb(cursor.key, cursor);\n                });\n            },\n\n            eachUniqueKey: function (cb) {\n                this._ctx.unique = \"unique\";\n                return this.eachKey(cb);\n            },\n\n            eachPrimaryKey: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                return this.each(function (val, cursor) {\n                    cb(cursor.primaryKey, cursor);\n                });\n            },\n\n            keys: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                var a = [];\n                return this.each(function (item, cursor) {\n                    a.push(cursor.key);\n                }).then(function () {\n                    return a;\n                }).then(cb);\n            },\n\n            primaryKeys: function (cb) {\n                var ctx = this._ctx;\n                if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                    // Special optimation if we could use IDBObjectStore.getAllKeys() or\n                    // IDBKeyRange.getAllKeys():\n                    return this._read(function (resolve, reject, idbstore) {\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.limit < Infinity ? idxOrStore.getAllKeys(ctx.range, ctx.limit) : idxOrStore.getAllKeys(ctx.range);\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = eventSuccessHandler(resolve);\n                    }).then(cb);\n                }\n                ctx.keysOnly = !ctx.isMatch;\n                var a = [];\n                return this.each(function (item, cursor) {\n                    a.push(cursor.primaryKey);\n                }).then(function () {\n                    return a;\n                }).then(cb);\n            },\n\n            uniqueKeys: function (cb) {\n                this._ctx.unique = \"unique\";\n                return this.keys(cb);\n            },\n\n            firstKey: function (cb) {\n                return this.limit(1).keys(function (a) {\n                    return a[0];\n                }).then(cb);\n            },\n\n            lastKey: function (cb) {\n                return this.reverse().firstKey(cb);\n            },\n\n            distinct: function () {\n                var ctx = this._ctx,\n                    idx = ctx.index && ctx.table.schema.idxByName[ctx.index];\n                if (!idx || !idx.multi) return this; // distinct() only makes differencies on multiEntry indexes.\n                var set = {};\n                addFilter(this._ctx, function (cursor) {\n                    var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\n                    var found = hasOwn(set, strKey);\n                    set[strKey] = true;\n                    return !found;\n                });\n                return this;\n            }\n        };\n    });\n\n    //\n    //\n    // WriteableCollection Class\n    //\n    //\n    function WriteableCollection() {\n        Collection.apply(this, arguments);\n    }\n\n    derive(WriteableCollection).from(Collection).extend({\n\n        //\n        // WriteableCollection Public Methods\n        //\n\n        modify: function (changes) {\n            var self = this,\n                ctx = this._ctx,\n                hook = ctx.table.hook,\n                updatingHook = hook.updating.fire,\n                deletingHook = hook.deleting.fire;\n\n            fake && typeof changes === 'function' && changes.call({ value: ctx.table.schema.instanceTemplate }, ctx.table.schema.instanceTemplate);\n\n            return this._write(function (resolve, reject, idbstore, trans) {\n                var modifyer;\n                if (typeof changes === 'function') {\n                    // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)\n                    if (updatingHook === nop && deletingHook === nop) {\n                        // Noone cares about what is being changed. Just let the modifier function be the given argument as is.\n                        modifyer = changes;\n                    } else {\n                        // People want to know exactly what is being modified or deleted.\n                        // Let modifyer be a proxy function that finds out what changes the caller is actually doing\n                        // and call the hooks accordingly!\n                        modifyer = function (item) {\n                            var origItem = deepClone(item); // Clone the item first so we can compare laters.\n                            if (changes.call(this, item, this) === false) return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)\n                            if (!hasOwn(this, \"value\")) {\n                                // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.\n                                deletingHook.call(this, this.primKey, item, trans);\n                            } else {\n                                // No deletion. Check what was changed\n                                var objectDiff = getObjectDiff(origItem, this.value);\n                                var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);\n                                if (additionalChanges) {\n                                    // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.\n                                    item = this.value;\n                                    keys(additionalChanges).forEach(function (keyPath) {\n                                        setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\n                                    });\n                                }\n                            }\n                        };\n                    }\n                } else if (updatingHook === nop) {\n                    // changes is a set of {keyPath: value} and no one is listening to the updating hook.\n                    var keyPaths = keys(changes);\n                    var numKeys = keyPaths.length;\n                    modifyer = function (item) {\n                        var anythingModified = false;\n                        for (var i = 0; i < numKeys; ++i) {\n                            var keyPath = keyPaths[i],\n                                val = changes[keyPath];\n                            if (getByKeyPath(item, keyPath) !== val) {\n                                setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\n                                anythingModified = true;\n                            }\n                        }\n                        return anythingModified;\n                    };\n                } else {\n                    // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and\n                    // allow it to add additional modifications to make.\n                    var origChanges = changes;\n                    changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.\n                    modifyer = function (item) {\n                        var anythingModified = false;\n                        var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);\n                        if (additionalChanges) extend(changes, additionalChanges);\n                        keys(changes).forEach(function (keyPath) {\n                            var val = changes[keyPath];\n                            if (getByKeyPath(item, keyPath) !== val) {\n                                setByKeyPath(item, keyPath, val);\n                                anythingModified = true;\n                            }\n                        });\n                        if (additionalChanges) changes = shallowClone(origChanges); // Restore original changes for next iteration\n                        return anythingModified;\n                    };\n                }\n\n                var count = 0;\n                var successCount = 0;\n                var iterationComplete = false;\n                var failures = [];\n                var failKeys = [];\n                var currentKey = null;\n\n                function modifyItem(item, cursor) {\n                    currentKey = cursor.primaryKey;\n                    var thisContext = {\n                        primKey: cursor.primaryKey,\n                        value: item,\n                        onsuccess: null,\n                        onerror: null\n                    };\n\n                    function onerror(e) {\n                        failures.push(e);\n                        failKeys.push(thisContext.primKey);\n                        checkFinished();\n                        return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction\n                    }\n\n                    if (modifyer.call(thisContext, item, thisContext) !== false) {\n                        // If a callback explicitely returns false, do not perform the update!\n                        var bDelete = !hasOwn(thisContext, \"value\");\n                        ++count;\n                        tryCatch(function () {\n                            var req = bDelete ? cursor.delete() : cursor.update(thisContext.value);\n                            req._hookCtx = thisContext;\n                            req.onerror = hookedEventRejectHandler(onerror);\n                            req.onsuccess = hookedEventSuccessHandler(function () {\n                                ++successCount;\n                                checkFinished();\n                            });\n                        }, onerror);\n                    } else if (thisContext.onsuccess) {\n                        // Hook will expect either onerror or onsuccess to always be called!\n                        thisContext.onsuccess(thisContext.value);\n                    }\n                }\n\n                function doReject(e) {\n                    if (e) {\n                        failures.push(e);\n                        failKeys.push(currentKey);\n                    }\n                    return reject(new ModifyError(\"Error modifying one or more objects\", failures, successCount, failKeys));\n                }\n\n                function checkFinished() {\n                    if (iterationComplete && successCount + failures.length === count) {\n                        if (failures.length > 0) doReject();else resolve(successCount);\n                    }\n                }\n                self.clone().raw()._iterate(modifyItem, function () {\n                    iterationComplete = true;\n                    checkFinished();\n                }, doReject, idbstore);\n            });\n        },\n\n        'delete': function () {\n            var _this4 = this;\n\n            var ctx = this._ctx,\n                range = ctx.range,\n                deletingHook = ctx.table.hook.deleting.fire,\n                hasDeleteHook = deletingHook !== nop;\n            if (!hasDeleteHook && isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || !range)) // if no range, we'll use clear().\n                {\n                    // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)\n                    // For chromium, this is the way most optimized version.\n                    // For IE/Edge, this could hang the indexedDB engine and make operating system instable\n                    // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)\n                    return this._write(function (resolve, reject, idbstore) {\n                        // Our API contract is to return a count of deleted items, so we have to count() before delete().\n                        var onerror = eventRejectHandler(reject),\n                            countReq = range ? idbstore.count(range) : idbstore.count();\n                        countReq.onerror = onerror;\n                        countReq.onsuccess = function () {\n                            var count = countReq.result;\n                            tryCatch(function () {\n                                var delReq = range ? idbstore.delete(range) : idbstore.clear();\n                                delReq.onerror = onerror;\n                                delReq.onsuccess = function () {\n                                    return resolve(count);\n                                };\n                            }, function (err) {\n                                return reject(err);\n                            });\n                        };\n                    });\n                }\n\n            // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.\n            // Divide into chunks to not starve RAM.\n            // If has delete hook, we will have to collect not just keys but also objects, so it will use\n            // more memory and need lower chunk size.\n            var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;\n\n            return this._write(function (resolve, reject, idbstore, trans) {\n                var totalCount = 0;\n                // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.\n                var collection = _this4.clone({\n                    keysOnly: !ctx.isMatch && !hasDeleteHook }) // load just keys (unless filter() or and() or deleteHook has subscribers)\n                .distinct() // In case multiEntry is used, never delete same key twice because resulting count\n                // would become larger than actual delete count.\n                .limit(CHUNKSIZE).raw(); // Don't filter through reading-hooks (like mapped classes etc)\n\n                var keysOrTuples = [];\n\n                // We're gonna do things on as many chunks that are needed.\n                // Use recursion of nextChunk function:\n                var nextChunk = function () {\n                    return collection.each(hasDeleteHook ? function (val, cursor) {\n                        // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,\n                        // so that the hook can be called with its values in bulkDelete().\n                        keysOrTuples.push([cursor.primaryKey, cursor.value]);\n                    } : function (val, cursor) {\n                        // No one subscribes to hook('deleting'). Collect only primary keys:\n                        keysOrTuples.push(cursor.primaryKey);\n                    }).then(function () {\n                        // Chromium deletes faster when doing it in sort order.\n                        hasDeleteHook ? keysOrTuples.sort(function (a, b) {\n                            return ascending(a[0], b[0]);\n                        }) : keysOrTuples.sort(ascending);\n                        return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);\n                    }).then(function () {\n                        var count = keysOrTuples.length;\n                        totalCount += count;\n                        keysOrTuples = [];\n                        return count < CHUNKSIZE ? totalCount : nextChunk();\n                    });\n                };\n\n                resolve(nextChunk());\n            });\n        }\n    });\n\n    //\n    //\n    //\n    // ------------------------- Help functions ---------------------------\n    //\n    //\n    //\n\n    function lowerVersionFirst(a, b) {\n        return a._cfg.version - b._cfg.version;\n    }\n\n    function setApiOnPlace(objs, tableNames, mode, dbschema) {\n        tableNames.forEach(function (tableName) {\n            var tableInstance = db._tableFactory(mode, dbschema[tableName]);\n            objs.forEach(function (obj) {\n                tableName in obj || (obj[tableName] = tableInstance);\n            });\n        });\n    }\n\n    function removeTablesApi(objs) {\n        objs.forEach(function (obj) {\n            for (var key in obj) {\n                if (obj[key] instanceof Table) delete obj[key];\n            }\n        });\n    }\n\n    function iterate(req, filter, fn, resolve, reject, valueMapper) {\n\n        // Apply valueMapper (hook('reading') or mappped class)\n        var mappedFn = valueMapper ? function (x, c, a) {\n            return fn(valueMapper(x), c, a);\n        } : fn;\n        // Wrap fn with PSD and microtick stuff from Promise.\n        var wrappedFn = wrap(mappedFn, reject);\n\n        if (!req.onerror) req.onerror = eventRejectHandler(reject);\n        if (filter) {\n            req.onsuccess = trycatcher(function filter_record() {\n                var cursor = req.result;\n                if (cursor) {\n                    var c = function () {\n                        cursor.continue();\n                    };\n                    if (filter(cursor, function (advancer) {\n                        c = advancer;\n                    }, resolve, reject)) wrappedFn(cursor.value, cursor, function (advancer) {\n                        c = advancer;\n                    });\n                    c();\n                } else {\n                    resolve();\n                }\n            }, reject);\n        } else {\n            req.onsuccess = trycatcher(function filter_record() {\n                var cursor = req.result;\n                if (cursor) {\n                    var c = function () {\n                        cursor.continue();\n                    };\n                    wrappedFn(cursor.value, cursor, function (advancer) {\n                        c = advancer;\n                    });\n                    c();\n                } else {\n                    resolve();\n                }\n            }, reject);\n        }\n    }\n\n    function parseIndexSyntax(indexes) {\n        /// <param name=\"indexes\" type=\"String\"></param>\n        /// <returns type=\"Array\" elementType=\"IndexSpec\"></returns>\n        var rv = [];\n        indexes.split(',').forEach(function (index) {\n            index = index.trim();\n            var name = index.replace(/([&*]|\\+\\+)/g, \"\"); // Remove \"&\", \"++\" and \"*\"\n            // Let keyPath of \"[a+b]\" be [\"a\",\"b\"]:\n            var keyPath = /^\\[/.test(name) ? name.match(/^\\[(.*)\\]$/)[1].split('+') : name;\n\n            rv.push(new IndexSpec(name, keyPath || null, /\\&/.test(index), /\\*/.test(index), /\\+\\+/.test(index), isArray(keyPath), /\\./.test(index)));\n        });\n        return rv;\n    }\n\n    function cmp(key1, key2) {\n        return indexedDB.cmp(key1, key2);\n    }\n\n    function min(a, b) {\n        return cmp(a, b) < 0 ? a : b;\n    }\n\n    function max(a, b) {\n        return cmp(a, b) > 0 ? a : b;\n    }\n\n    function ascending(a, b) {\n        return indexedDB.cmp(a, b);\n    }\n\n    function descending(a, b) {\n        return indexedDB.cmp(b, a);\n    }\n\n    function simpleCompare(a, b) {\n        return a < b ? -1 : a === b ? 0 : 1;\n    }\n\n    function simpleCompareReverse(a, b) {\n        return a > b ? -1 : a === b ? 0 : 1;\n    }\n\n    function combine(filter1, filter2) {\n        return filter1 ? filter2 ? function () {\n            return filter1.apply(this, arguments) && filter2.apply(this, arguments);\n        } : filter1 : filter2;\n    }\n\n    function readGlobalSchema() {\n        db.verno = idbdb.version / 10;\n        db._dbSchema = globalSchema = {};\n        dbStoreNames = slice(idbdb.objectStoreNames, 0);\n        if (dbStoreNames.length === 0) return; // Database contains no stores.\n        var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');\n        dbStoreNames.forEach(function (storeName) {\n            var store = trans.objectStore(storeName),\n                keyPath = store.keyPath,\n                dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;\n            var primKey = new IndexSpec(keyPath, keyPath || \"\", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);\n            var indexes = [];\n            for (var j = 0; j < store.indexNames.length; ++j) {\n                var idbindex = store.index(store.indexNames[j]);\n                keyPath = idbindex.keyPath;\n                dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;\n                var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);\n                indexes.push(index);\n            }\n            globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});\n        });\n        setApiOnPlace([allTables, Transaction.prototype], keys(globalSchema), READWRITE, globalSchema);\n    }\n\n    function adjustToExistingIndexNames(schema, idbtrans) {\n        /// <summary>\n        /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db\n        /// </summary>\n        /// <param name=\"schema\" type=\"Object\">Map between name and TableSchema</param>\n        /// <param name=\"idbtrans\" type=\"IDBTransaction\"></param>\n        var storeNames = idbtrans.db.objectStoreNames;\n        for (var i = 0; i < storeNames.length; ++i) {\n            var storeName = storeNames[i];\n            var store = idbtrans.objectStore(storeName);\n            hasGetAll = 'getAll' in store;\n            for (var j = 0; j < store.indexNames.length; ++j) {\n                var indexName = store.indexNames[j];\n                var keyPath = store.index(indexName).keyPath;\n                var dexieName = typeof keyPath === 'string' ? keyPath : \"[\" + slice(keyPath).join('+') + \"]\";\n                if (schema[storeName]) {\n                    var indexSpec = schema[storeName].idxByName[dexieName];\n                    if (indexSpec) indexSpec.name = indexName;\n                }\n            }\n        }\n    }\n\n    function fireOnBlocked(ev) {\n        db.on(\"blocked\").fire(ev);\n        // Workaround (not fully*) for missing \"versionchange\" event in IE,Edge and Safari:\n        connections.filter(function (c) {\n            return c.name === db.name && c !== db && !c._vcFired;\n        }).map(function (c) {\n            return c.on(\"versionchange\").fire(ev);\n        });\n    }\n\n    extend(this, {\n        Collection: Collection,\n        Table: Table,\n        Transaction: Transaction,\n        Version: Version,\n        WhereClause: WhereClause,\n        WriteableCollection: WriteableCollection,\n        WriteableTable: WriteableTable\n    });\n\n    init();\n\n    addons.forEach(function (fn) {\n        fn(db);\n    });\n}\n\nvar fakeAutoComplete = function () {}; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())\nvar fake = false; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())\n\nfunction parseType(type) {\n    if (typeof type === 'function') {\n        return new type();\n    } else if (isArray(type)) {\n        return [parseType(type[0])];\n    } else if (type && typeof type === 'object') {\n        var rv = {};\n        applyStructure(rv, type);\n        return rv;\n    } else {\n        return type;\n    }\n}\n\nfunction applyStructure(obj, structure) {\n    keys(structure).forEach(function (member) {\n        var value = parseType(structure[member]);\n        obj[member] = value;\n    });\n    return obj;\n}\n\nfunction eventSuccessHandler(done) {\n    return function (ev) {\n        done(ev.target.result);\n    };\n}\n\nfunction hookedEventSuccessHandler(resolve) {\n    // wrap() is needed when calling hooks because the rare scenario of:\n    //  * hook does a db operation that fails immediately (IDB throws exception)\n    //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.\n    //    wrap() will also execute in a virtual tick.\n    //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.\n    //  * If this was the last event in the bulk, the promise will resolve after a physical tick\n    //    and the transaction will have committed already.\n    // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,\n    // because it is always marked with _lib = true when created using Transaction._promise().\n    return wrap(function (event) {\n        var req = event.target,\n            result = req.result,\n            ctx = req._hookCtx,\n            // Contains the hook error handler. Put here instead of closure to boost performance.\n        hookSuccessHandler = ctx && ctx.onsuccess;\n        hookSuccessHandler && hookSuccessHandler(result);\n        resolve && resolve(result);\n    }, resolve);\n}\n\nfunction eventRejectHandler(reject) {\n    return function (event) {\n        preventDefault(event);\n        reject(event.target.error);\n        return false;\n    };\n}\n\nfunction hookedEventRejectHandler(reject) {\n    return wrap(function (event) {\n        // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.\n\n        var req = event.target,\n            err = req.error,\n            ctx = req._hookCtx,\n            // Contains the hook error handler. Put here instead of closure to boost performance.\n        hookErrorHandler = ctx && ctx.onerror;\n        hookErrorHandler && hookErrorHandler(err);\n        preventDefault(event);\n        reject(err);\n        return false;\n    });\n}\n\nfunction preventDefault(event) {\n    if (event.stopPropagation) // IndexedDBShim doesnt support this on Safari 8 and below.\n        event.stopPropagation();\n    if (event.preventDefault) // IndexedDBShim doesnt support this on Safari 8 and below.\n        event.preventDefault();\n}\n\nfunction globalDatabaseList(cb) {\n    var val,\n        localStorage = Dexie.dependencies.localStorage;\n    if (!localStorage) return cb([]); // Envs without localStorage support\n    try {\n        val = JSON.parse(localStorage.getItem('Dexie.DatabaseNames') || \"[]\");\n    } catch (e) {\n        val = [];\n    }\n    if (cb(val)) {\n        localStorage.setItem('Dexie.DatabaseNames', JSON.stringify(val));\n    }\n}\n\nfunction awaitIterator(iterator) {\n    var callNext = function (result) {\n        return iterator.next(result);\n    },\n        doThrow = function (error) {\n        return iterator.throw(error);\n    },\n        onSuccess = step(callNext),\n        onError = step(doThrow);\n\n    function step(getNext) {\n        return function (val) {\n            var next = getNext(val),\n                value = next.value;\n\n            return next.done ? value : !value || typeof value.then !== 'function' ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);\n        };\n    }\n\n    return step(callNext)();\n}\n\n//\n// IndexSpec struct\n//\nfunction IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {\n    /// <param name=\"name\" type=\"String\"></param>\n    /// <param name=\"keyPath\" type=\"String\"></param>\n    /// <param name=\"unique\" type=\"Boolean\"></param>\n    /// <param name=\"multi\" type=\"Boolean\"></param>\n    /// <param name=\"auto\" type=\"Boolean\"></param>\n    /// <param name=\"compound\" type=\"Boolean\"></param>\n    /// <param name=\"dotted\" type=\"Boolean\"></param>\n    this.name = name;\n    this.keyPath = keyPath;\n    this.unique = unique;\n    this.multi = multi;\n    this.auto = auto;\n    this.compound = compound;\n    this.dotted = dotted;\n    var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && '[' + [].join.call(keyPath, '+') + ']';\n    this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? \"++\" : \"\") + keyPathSrc;\n}\n\n//\n// TableSchema struct\n//\nfunction TableSchema(name, primKey, indexes, instanceTemplate) {\n    /// <param name=\"name\" type=\"String\"></param>\n    /// <param name=\"primKey\" type=\"IndexSpec\"></param>\n    /// <param name=\"indexes\" type=\"Array\" elementType=\"IndexSpec\"></param>\n    /// <param name=\"instanceTemplate\" type=\"Object\"></param>\n    this.name = name;\n    this.primKey = primKey || new IndexSpec();\n    this.indexes = indexes || [new IndexSpec()];\n    this.instanceTemplate = instanceTemplate;\n    this.mappedClass = null;\n    this.idxByName = arrayToObject(indexes, function (index) {\n        return [index.name, index];\n    });\n}\n\n// Used in when defining dependencies later...\n// (If IndexedDBShim is loaded, prefer it before standard indexedDB)\nvar idbshim = _global.idbModules && _global.idbModules.shimIndexedDB ? _global.idbModules : {};\n\nfunction safariMultiStoreFix(storeNames) {\n    return storeNames.length === 1 ? storeNames[0] : storeNames;\n}\n\nfunction getNativeGetDatabaseNamesFn(indexedDB) {\n    var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);\n    return fn && fn.bind(indexedDB);\n}\n\n// Export Error classes\nprops(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};\n\n//\n// Static methods and properties\n// \nprops(Dexie, {\n\n    //\n    // Static delete() method.\n    //\n    delete: function (databaseName) {\n        var db = new Dexie(databaseName),\n            promise = db.delete();\n        promise.onblocked = function (fn) {\n            db.on(\"blocked\", fn);\n            return this;\n        };\n        return promise;\n    },\n\n    //\n    // Static exists() method.\n    //\n    exists: function (name) {\n        return new Dexie(name).open().then(function (db) {\n            db.close();\n            return true;\n        }).catch(Dexie.NoSuchDatabaseError, function () {\n            return false;\n        });\n    },\n\n    //\n    // Static method for retrieving a list of all existing databases at current host.\n    //\n    getDatabaseNames: function (cb) {\n        return new Promise(function (resolve, reject) {\n            var getDatabaseNames = getNativeGetDatabaseNamesFn(indexedDB);\n            if (getDatabaseNames) {\n                // In case getDatabaseNames() becomes standard, let's prepare to support it:\n                var req = getDatabaseNames();\n                req.onsuccess = function (event) {\n                    resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>\n                };\n                req.onerror = eventRejectHandler(reject);\n            } else {\n                globalDatabaseList(function (val) {\n                    resolve(val);\n                    return false;\n                });\n            }\n        }).then(cb);\n    },\n\n    defineClass: function (structure) {\n        /// <summary>\n        ///     Create a javascript constructor based on given template for which properties to expect in the class.\n        ///     Any property that is a constructor function will act as a type. So {name: String} will be equal to {name: new String()}.\n        /// </summary>\n        /// <param name=\"structure\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n        /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\n\n        // Default constructor able to copy given properties into this object.\n        function Class(properties) {\n            /// <param name=\"properties\" type=\"Object\" optional=\"true\">Properties to initialize object with.\n            /// </param>\n            properties ? extend(this, properties) : fake && applyStructure(this, structure);\n        }\n        return Class;\n    },\n\n    applyStructure: applyStructure,\n\n    ignoreTransaction: function (scopeFunc) {\n        // In case caller is within a transaction but needs to create a separate transaction.\n        // Example of usage:\n        //\n        // Let's say we have a logger function in our app. Other application-logic should be unaware of the\n        // logger function and not need to include the 'logentries' table in all transaction it performs.\n        // The logging should always be done in a separate transaction and not be dependant on the current\n        // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.\n        //\n        //     Dexie.ignoreTransaction(function() {\n        //         db.logentries.add(newLogEntry);\n        //     });\n        //\n        // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction\n        // in current Promise-scope.\n        //\n        // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an\n        // API for this because\n        //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().\n        //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().\n        //  3) setImmediate() is not supported in the ES standard.\n        //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.\n        return PSD.trans ? usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.\n        scopeFunc(); // No need to change scope because there is no ongoing transaction.\n    },\n\n    vip: function (fn) {\n        // To be used by subscribers to the on('ready') event.\n        // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.\n        // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD\n        // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since\n        // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.\n        // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()\n        // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by\n        // the caller will not resolve until database is opened.\n        return newScope(function () {\n            PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.\n            return fn();\n        });\n    },\n\n    async: function (generatorFn) {\n        return function () {\n            try {\n                var rv = awaitIterator(generatorFn.apply(this, arguments));\n                if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);\n                return rv;\n            } catch (e) {\n                return rejection(e);\n            }\n        };\n    },\n\n    spawn: function (generatorFn, args, thiz) {\n        try {\n            var rv = awaitIterator(generatorFn.apply(thiz, args || []));\n            if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);\n            return rv;\n        } catch (e) {\n            return rejection(e);\n        }\n    },\n\n    // Dexie.currentTransaction property\n    currentTransaction: {\n        get: function () {\n            return PSD.trans || null;\n        }\n    },\n\n    // Export our Promise implementation since it can be handy as a standalone Promise implementation\n    Promise: Promise,\n\n    // Dexie.debug proptery:\n    // Dexie.debug = false\n    // Dexie.debug = true\n    // Dexie.debug = \"dexie\" - don't hide dexie's stack frames.\n    debug: {\n        get: function () {\n            return debug;\n        },\n        set: function (value) {\n            setDebug(value, value === 'dexie' ? function () {\n                return true;\n            } : dexieStackFrameFilter);\n        }\n    },\n\n    // Export our derive/extend/override methodology\n    derive: derive,\n    extend: extend,\n    props: props,\n    override: override,\n    // Export our Events() function - can be handy as a toolkit\n    Events: Events,\n    events: { get: deprecated(function () {\n            return Events;\n        }) }, // Backward compatible lowercase version.\n    // Utilities\n    getByKeyPath: getByKeyPath,\n    setByKeyPath: setByKeyPath,\n    delByKeyPath: delByKeyPath,\n    shallowClone: shallowClone,\n    deepClone: deepClone,\n    getObjectDiff: getObjectDiff,\n    asap: asap,\n    maxKey: maxKey,\n    // Addon registry\n    addons: [],\n    // Global DB connection list\n    connections: connections,\n\n    MultiModifyError: exceptions.Modify, // Backward compatibility 0.9.8. Deprecate.\n    errnames: errnames,\n\n    // Export other static classes\n    IndexSpec: IndexSpec,\n    TableSchema: TableSchema,\n\n    //\n    // Dependencies\n    //\n    // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.\n    //\n    // In node.js, however, these properties must be set \"manually\" before instansiating a new Dexie().\n    // For node.js, you need to require indexeddb-js or similar and then set these deps.\n    //\n    dependencies: {\n        // Required:\n        indexedDB: idbshim.shimIndexedDB || _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,\n        IDBKeyRange: idbshim.IDBKeyRange || _global.IDBKeyRange || _global.webkitIDBKeyRange\n    },\n\n    // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.\n    semVer: DEXIE_VERSION,\n    version: DEXIE_VERSION.split('.').map(function (n) {\n        return parseInt(n);\n    }).reduce(function (p, c, i) {\n        return p + c / Math.pow(10, i * 2);\n    }),\n    fakeAutoComplete: fakeAutoComplete,\n\n    // https://github.com/dfahlander/Dexie.js/issues/186\n    // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return\n    // x.default. Workaround: Set Dexie.default = Dexie.\n    default: Dexie\n});\n\ntryCatch(function () {\n    // Optional dependencies\n    // localStorage\n    Dexie.dependencies.localStorage = (typeof chrome !== \"undefined\" && chrome !== null ? chrome.storage : void 0) != null ? null : _global.localStorage;\n});\n\n// Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.\nPromise.rejectionMapper = mapError;\n\n// Fool IDE to improve autocomplete. Tested with Visual Studio 2013 and 2015.\ndoFakeAutoComplete(function () {\n    Dexie.fakeAutoComplete = fakeAutoComplete = doFakeAutoComplete;\n    Dexie.fake = fake = true;\n});\n\nreturn Dexie;\n\n})));\n//# sourceMappingURL=dexie.js.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// version: 0.12.0\n// date: Wed Aug 01 2018 09:48:10 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n// version: 0.12.0\n// date: Wed Aug 01 2018 09:48:10 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(\"minibus\",[],e):\"object\"==typeof exports?exports.minibus=e():t.minibus=e()}(\"undefined\"!=typeof self?self:this,function(){return function(t){function __webpack_require__(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}var e={};return __webpack_require__.m=t,__webpack_require__.c=e,__webpack_require__.d=function(t,e,n){__webpack_require__.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},__webpack_require__.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return __webpack_require__.d(e,\"a\",e),e},__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.p=\"\",__webpack_require__(__webpack_require__.s=136)}([function(t,e){var n=t.exports={version:\"2.5.7\"};\"number\"==typeof __e&&(__e=n)},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e,n){var r=n(28)(\"wks\"),o=n(20),i=n(1).Symbol,u=\"function\"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)(\"Symbol.\"+t))}).store=r},function(t,e,n){var r=n(1),o=n(0),i=n(15),u=n(9),s=n(8),c=function(t,e,n){var f,a,l,p=t&c.F,v=t&c.G,d=t&c.S,h=t&c.P,y=t&c.B,_=t&c.W,b=v?o:o[e]||(o[e]={}),g=b.prototype,m=v?r:d?r[e]:(r[e]||{}).prototype;v&&(n=e);for(f in n)(a=!p&&m&&void 0!==m[f])&&s(b,f)||(l=a?m[f]:n[f],b[f]=v&&\"function\"!=typeof m[f]?n[f]:y&&a?i(l,r):_&&m[f]==l?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(l):h&&\"function\"==typeof l?i(Function.call,l):l,h&&((b.virtual||(b.virtual={}))[f]=l,t&c.R&&g&&!g[f]&&u(g,f,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e,n){t.exports=!n(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e,n){var r=n(4),o=n(36),i=n(26),u=Object.defineProperty;e.f=n(5)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(t[e]=n.value),t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(7),o=n(19);t.exports=n(5)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(57),o=n(23);t.exports=function(t){return r(o(t))}},function(t,e,n){\"use strict\";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}},function(t,e,n){\"use strict\";e.__esModule=!0;var r=n(60),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=function(){function defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,o.default)(t,r.key,r)}}return function(t,e,n){return e&&defineProperties(t.prototype,e),n&&defineProperties(t,n),t}}()},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=!0},function(t,e,n){var r=n(18);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports={}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(37),o=n(29);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(7).f,o=n(8),i=n(2)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(6),o=n(1).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},function(t,e,n){var r=n(28)(\"keys\"),o=n(20);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(0),o=n(1),i=o[\"__core-js_shared__\"]||(o[\"__core-js_shared__\"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:r.version,mode:n(14)?\"pure\":\"global\",copyright:\"© 2018 Denis Pushkarev (zloirock.ru)\"})},function(t,e){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,e,n){var r=n(23);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(4),o=n(69),i=n(29),u=n(27)(\"IE_PROTO\"),s=function(){},c=function(){var t,e=n(25)(\"iframe\"),r=i.length;for(e.style.display=\"none\",n(46).appendChild(e),e.src=\"javascript:\",t=e.contentWindow.document,t.open(),t.write(\"<script>document.F=Object<\\/script>\"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[u]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){\"use strict\";function PromiseCapability(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}var r=n(18);t.exports.f=function(t){return new PromiseCapability(t)}},function(t,e,n){e.f=n(2)},function(t,e,n){var r=n(1),o=n(0),i=n(14),u=n(33),s=n(7).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});\"_\"==t.charAt(0)||t in e||s(e,t,{value:u.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){t.exports=!n(5)&&!n(13)(function(){return 7!=Object.defineProperty(n(25)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(t,e,n){var r=n(8),o=n(10),i=n(58)(!1),u=n(27)(\"IE_PROTO\");t.exports=function(t,e){var n,s=o(t),c=0,f=[];for(n in s)n!=u&&r(s,n)&&f.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~i(f,n)||f.push(n));return f}},function(t,e,n){var r=n(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(3),o=n(0),i=n(13);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e,n){var r=n(35),o=n(19),i=n(10),u=n(26),s=n(8),c=n(36),f=Object.getOwnPropertyDescriptor;e.f=n(5)?f:function(t,e){if(t=i(t),e=u(e,!0),c)try{return f(t,e)}catch(t){}if(s(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){t.exports={default:n(66),__esModule:!0}},function(t,e){},function(t,e,n){\"use strict\";var r=n(67)(!0);n(44)(String,\"String\",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){\"use strict\";var r=n(14),o=n(3),i=n(45),u=n(9),s=n(17),c=n(68),f=n(24),a=n(47),l=n(2)(\"iterator\"),p=!([].keys&&\"next\"in[].keys()),v=function(){return this};t.exports=function(t,e,n,d,h,y,_){c(n,e,d);var b,g,m,w=function(t){if(!p&&t in P)return P[t];switch(t){case\"keys\":case\"values\":return function(){return new n(this,t)}}return function(){return new n(this,t)}},x=e+\" Iterator\",O=\"values\"==h,M=!1,P=t.prototype,S=P[l]||P[\"@@iterator\"]||h&&P[h],L=S||w(h),j=h?O?w(\"entries\"):L:void 0,k=\"Array\"==e?P.entries||S:S;if(k&&(m=a(k.call(new t)))!==Object.prototype&&m.next&&(f(m,x,!0),r||\"function\"==typeof m[l]||u(m,l,v)),O&&S&&\"values\"!==S.name&&(M=!0,L=function(){return S.call(this)}),r&&!_||!p&&!M&&P[l]||u(P,l,L),s[e]=L,s[x]=v,h)if(b={values:O?L:w(\"values\"),keys:y?L:w(\"keys\"),entries:j},_)for(g in b)g in P||i(P,g,b[g]);else o(o.P+o.F*(p||M),e,b);return b}},function(t,e,n){t.exports=n(9)},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(8),o=n(30),i=n(27)(\"IE_PROTO\"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){n(70);for(var r=n(1),o=n(9),i=n(17),u=n(2)(\"toStringTag\"),s=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),c=0;c<s.length;c++){var f=s[c],a=r[f],l=a&&a.prototype;l&&!l[u]&&o(l,u,f),i[f]=i.Array}},function(t,e,n){var r=n(16),o=n(2)(\"toStringTag\"),i=\"Arguments\"==r(function(){return arguments}()),u=function(t,e){try{return t[e]}catch(t){}};t.exports=function(t){var e,n,s;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=u(e=Object(t),o))?n:i?r(e):\"Object\"==(s=r(e))&&\"function\"==typeof e.callee?\"Arguments\":s}},function(t,e,n){var r=n(4),o=n(18),i=n(2)(\"species\");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||void 0==(n=r(u)[i])?e:o(n)}},function(t,e,n){var r,o,i,u=n(15),s=n(79),c=n(46),f=n(25),a=n(1),l=a.process,p=a.setImmediate,v=a.clearImmediate,d=a.MessageChannel,h=a.Dispatch,y=0,_={},b=function(){var t=+this;if(_.hasOwnProperty(t)){var e=_[t];delete _[t],e()}},g=function(t){b.call(t.data)};p&&v||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return _[++y]=function(){s(\"function\"==typeof t?t:Function(t),e)},r(y),y},v=function(t){delete _[t]},\"process\"==n(16)(l)?r=function(t){l.nextTick(u(b,t,1))}:h&&h.now?r=function(t){h.now(u(b,t,1))}:d?(o=new d,i=o.port2,o.port1.onmessage=g,r=u(i.postMessage,i,1)):a.addEventListener&&\"function\"==typeof postMessage&&!a.importScripts?(r=function(t){a.postMessage(t+\"\",\"*\")},a.addEventListener(\"message\",g,!1)):r=\"onreadystatechange\"in f(\"script\")?function(t){c.appendChild(f(\"script\")).onreadystatechange=function(){c.removeChild(this),b.call(t)}}:function(t){setTimeout(u(b,t,1),0)}),t.exports={set:p,clear:v}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(4),o=n(6),i=n(32);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(90),o=_interopRequireDefault(r),i=n(92),u=_interopRequireDefault(i),s=\"function\"==typeof u.default&&\"symbol\"==typeof o.default?function(t){return typeof t}:function(t){return t&&\"function\"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?\"symbol\":typeof t};e.default=\"function\"==typeof u.default&&\"symbol\"===s(o.default)?function(t){return void 0===t?\"undefined\":s(t)}:function(t){return t&&\"function\"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?\"symbol\":void 0===t?\"undefined\":s(t)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(37),o=n(29).concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(16);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e,n){var r=n(10),o=n(38),i=n(59);t.exports=function(t){return function(e,n,u){var s,c=r(e),f=o(c.length),a=i(u,f);if(t&&n!=n){for(;f>a;)if((s=c[a++])!=s)return!0}else for(;f>a;a++)if((t||a in c)&&c[a]===n)return t||a||0;return!t&&-1}}},function(t,e,n){var r=n(22),o=Math.max,i=Math.min;t.exports=function(t,e){return t=r(t),t<0?o(t+e,0):i(t,e)}},function(t,e,n){t.exports={default:n(61),__esModule:!0}},function(t,e,n){n(62);var r=n(0).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(3);r(r.S+r.F*!n(5),\"Object\",{defineProperty:n(7).f})},function(t,e,n){t.exports={default:n(88),__esModule:!0}},function(t,e,n){\"use strict\";e.__esModule=!0;var r=n(54),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(void 0===e?\"undefined\":(0,o.default)(e))&&\"function\"!=typeof e?t:e}},function(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(101),o=_interopRequireDefault(r),i=n(105),u=_interopRequireDefault(i),s=n(54),c=_interopRequireDefault(s);e.default=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+(void 0===e?\"undefined\":(0,c.default)(e)));t.prototype=(0,u.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o.default?(0,o.default)(t,e):t.__proto__=e)}},function(t,e,n){n(42),n(43),n(48),n(73),n(85),n(86),t.exports=n(0).Promise},function(t,e,n){var r=n(22),o=n(23);t.exports=function(t){return function(e,n){var i,u,s=String(o(e)),c=r(n),f=s.length;return c<0||c>=f?t?\"\":void 0:(i=s.charCodeAt(c),i<55296||i>56319||c+1===f||(u=s.charCodeAt(c+1))<56320||u>57343?t?s.charAt(c):i:t?s.slice(c,c+2):u-56320+(i-55296<<10)+65536)}}},function(t,e,n){\"use strict\";var r=n(31),o=n(19),i=n(24),u={};n(9)(u,n(2)(\"iterator\"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+\" Iterator\")}},function(t,e,n){var r=n(7),o=n(4),i=n(21);t.exports=n(5)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),s=u.length,c=0;s>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){\"use strict\";var r=n(71),o=n(72),i=n(17),u=n(10);t.exports=n(44)(Array,\"Array\",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):\"keys\"==e?o(0,n):\"values\"==e?o(0,t[n]):o(0,[n,t[n]])},\"values\"),i.Arguments=i.Array,r(\"keys\"),r(\"values\"),r(\"entries\")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){\"use strict\";var r,o,i,u,s=n(14),c=n(1),f=n(15),a=n(49),l=n(3),p=n(6),v=n(18),d=n(74),h=n(75),y=n(50),_=n(51).set,b=n(80)(),g=n(32),m=n(52),w=n(81),x=n(53),O=c.TypeError,M=c.process,P=M&&M.versions,S=P&&P.v8||\"\",L=c.Promise,j=\"process\"==a(M),k=function(){},E=o=g.f,R=!!function(){try{var t=L.resolve(1),e=(t.constructor={})[n(2)(\"species\")]=function(t){t(k,k)};return(j||\"function\"==typeof PromiseRejectionEvent)&&t.then(k)instanceof e&&0!==S.indexOf(\"6.6\")&&-1===w.indexOf(\"Chrome/66\")}catch(t){}}(),T=function(t){var e;return!(!p(t)||\"function\"!=typeof(e=t.then))&&e},C=function(t,e){if(!t._n){t._n=!0;var n=t._c;b(function(){for(var r=t._v,o=1==t._s,i=0;n.length>i;)!function(e){var n,i,u,s=o?e.ok:e.fail,c=e.resolve,f=e.reject,a=e.domain;try{s?(o||(2==t._h&&F(t),t._h=1),!0===s?n=r:(a&&a.enter(),n=s(r),a&&(a.exit(),u=!0)),n===e.promise?f(O(\"Promise-chain cycle\")):(i=T(n))?i.call(n,c,f):c(n)):f(r)}catch(t){a&&!u&&a.exit(),f(t)}}(n[i++]);t._c=[],t._n=!1,e&&!t._h&&A(t)})}},A=function(t){_.call(c,function(){var e,n,r,o=t._v,i=D(t);if(i&&(e=m(function(){j?M.emit(\"unhandledRejection\",o,t):(n=c.onunhandledrejection)?n({promise:t,reason:o}):(r=c.console)&&r.error&&r.error(\"Unhandled promise rejection\",o)}),t._h=j||D(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},D=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){_.call(c,function(){var e;j?M.emit(\"rejectionHandled\",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},q=function(t){var e=this;e._d||(e._d=!0,e=e._w||e,e._v=t,e._s=2,e._a||(e._a=e._c.slice()),C(e,!0))},I=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw O(\"Promise can't be resolved itself\");(e=T(t))?b(function(){var r={_w:n,_d:!1};try{e.call(t,f(I,r,1),f(q,r,1))}catch(t){q.call(r,t)}}):(n._v=t,n._s=1,C(n,!1))}catch(t){q.call({_w:n,_d:!1},t)}}};R||(L=function(t){d(this,L,\"Promise\",\"_h\"),v(t),r.call(this);try{t(f(I,this,1),f(q,this,1))}catch(t){q.call(this,t)}},r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},r.prototype=n(82)(L.prototype,{then:function(t,e){var n=E(y(this,L));return n.ok=\"function\"!=typeof t||t,n.fail=\"function\"==typeof e&&e,n.domain=j?M.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&C(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=f(I,t,1),this.reject=f(q,t,1)},g.f=E=function(t){return t===L||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!R,{Promise:L}),n(24)(L,\"Promise\"),n(83)(\"Promise\"),u=n(0).Promise,l(l.S+l.F*!R,\"Promise\",{reject:function(t){var e=E(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!R),\"Promise\",{resolve:function(t){return x(s&&this===u?L:this,t)}}),l(l.S+l.F*!(R&&n(84)(function(t){L.all(t).catch(k)})),\"Promise\",{all:function(t){var e=this,n=E(e),r=n.resolve,o=n.reject,i=m(function(){var n=[],i=0,u=1;h(t,!1,function(t){var s=i++,c=!1;n.push(void 0),u++,e.resolve(t).then(function(t){c||(c=!0,n[s]=t,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=E(e),r=n.reject,o=m(function(){h(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+\": incorrect invocation!\");return t}},function(t,e,n){var r=n(15),o=n(76),i=n(77),u=n(4),s=n(38),c=n(78),f={},a={},e=t.exports=function(t,e,n,l,p){var v,d,h,y,_=p?function(){return t}:c(t),b=r(n,l,e?2:1),g=0;if(\"function\"!=typeof _)throw TypeError(t+\" is not iterable!\");if(i(_)){for(v=s(t.length);v>g;g++)if((y=e?b(u(d=t[g])[0],d[1]):b(t[g]))===f||y===a)return y}else for(h=_.call(t);!(d=h.next()).done;)if((y=o(h,b,d.value,e))===f||y===a)return y};e.BREAK=f,e.RETURN=a},function(t,e,n){var r=n(4);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(17),o=n(2)(\"iterator\"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){var r=n(49),o=n(2)(\"iterator\"),i=n(17);t.exports=n(0).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t[\"@@iterator\"]||i[r(t)]}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(1),o=n(51).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,s=r.Promise,c=\"process\"==n(16)(u);t.exports=function(){var t,e,n,f=function(){var r,o;for(c&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(c)n=function(){u.nextTick(f)};else if(!i||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var a=s.resolve(void 0);n=function(){a.then(f)}}else n=function(){o.call(r,f)};else{var l=!0,p=document.createTextNode(\"\");new i(f).observe(p,{characterData:!0}),n=function(){p.data=l=!l}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){var r=n(1),o=r.navigator;t.exports=o&&o.userAgent||\"\"},function(t,e,n){var r=n(9);t.exports=function(t,e,n){for(var o in e)n&&t[o]?t[o]=e[o]:r(t,o,e[o]);return t}},function(t,e,n){\"use strict\";var r=n(1),o=n(0),i=n(7),u=n(5),s=n(2)(\"species\");t.exports=function(t){var e=\"function\"==typeof o[t]?o[t]:r[t];u&&e&&!e[s]&&i.f(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(2)(\"iterator\"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},t(i)}catch(t){}return n}},function(t,e,n){\"use strict\";var r=n(3),o=n(0),i=n(1),u=n(50),s=n(53);r(r.P+r.R,\"Promise\",{finally:function(t){var e=u(this,o.Promise||i.Promise),n=\"function\"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){\"use strict\";var r=n(3),o=n(32),i=n(52);r(r.S,\"Promise\",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){var r,o;!function(i,u){\"use strict\";r=u,void 0!==(o=\"function\"==typeof r?r.call(e,n,e,t):r)&&(t.exports=o)}(0,function(){\"use strict\";function bindMethod(t,e){var n=t[e];if(\"function\"==typeof n.bind)return n.bind(t);try{return Function.prototype.bind.call(n,t)}catch(e){return function(){return Function.prototype.apply.apply(n,[t,arguments])}}}function realMethod(n){return\"debug\"===n&&(n=\"log\"),typeof console!==e&&(void 0!==console[n]?bindMethod(console,n):void 0!==console.log?bindMethod(console,\"log\"):t)}function replaceLoggingMethods(e,r){for(var o=0;o<n.length;o++){var i=n[o];this[i]=o<e?t:this.methodFactory(i,e,r)}this.log=this.debug}function enableLoggingWhenConsoleArrives(t,n,r){return function(){typeof console!==e&&(replaceLoggingMethods.call(this,n,r),this[t].apply(this,arguments))}}function defaultMethodFactory(t,e,n){return realMethod(t)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(t,r,o){function persistLevelIfPossible(t){var r=(n[t]||\"silent\").toUpperCase();if(typeof window!==e){try{return void(window.localStorage[s]=r)}catch(t){}try{window.document.cookie=encodeURIComponent(s)+\"=\"+r+\";\"}catch(t){}}}function getPersistedLevel(){var t;if(typeof window!==e){try{t=window.localStorage[s]}catch(t){}if(typeof t===e)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(s)+\"=\");-1!==r&&(t=/^([^;]+)/.exec(n.slice(r))[1])}catch(t){}return void 0===u.levels[t]&&(t=void 0),t}}var i,u=this,s=\"loglevel\";t&&(s+=\":\"+t),u.name=t,u.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},u.methodFactory=o||defaultMethodFactory,u.getLevel=function(){return i},u.setLevel=function(n,r){if(\"string\"==typeof n&&void 0!==u.levels[n.toUpperCase()]&&(n=u.levels[n.toUpperCase()]),!(\"number\"==typeof n&&n>=0&&n<=u.levels.SILENT))throw\"log.setLevel() called with invalid level: \"+n;if(i=n,!1!==r&&persistLevelIfPossible(n),replaceLoggingMethods.call(u,n,t),typeof console===e&&n<u.levels.SILENT)return\"No console available for logging\"},u.setDefaultLevel=function(t){getPersistedLevel()||u.setLevel(t,!1)},u.enableAll=function(t){u.setLevel(u.levels.TRACE,t)},u.disableAll=function(t){u.setLevel(u.levels.SILENT,t)};var c=getPersistedLevel();null==c&&(c=null==r?\"WARN\":r),u.setLevel(c,!1)}var t=function(){},e=\"undefined\",n=[\"trace\",\"debug\",\"info\",\"warn\",\"error\"],r=new Logger,o={};r.getLogger=function(t){if(\"string\"!=typeof t||\"\"===t)throw new TypeError(\"You must supply a name when creating a logger.\");var e=o[t];return e||(e=o[t]=new Logger(t,r.getLevel(),r.methodFactory)),e};var i=typeof window!==e?window.log:void 0;return r.noConflict=function(){return typeof window!==e&&window.log===r&&(window.log=i),r},r.getLoggers=function(){return o},r})},function(t,e,n){n(89),t.exports=n(0).Object.getPrototypeOf},function(t,e,n){var r=n(30),o=n(47);n(39)(\"getPrototypeOf\",function(){return function(t){return o(r(t))}})},function(t,e,n){t.exports={default:n(91),__esModule:!0}},function(t,e,n){n(43),n(48),t.exports=n(33).f(\"iterator\")},function(t,e,n){t.exports={default:n(93),__esModule:!0}},function(t,e,n){n(94),n(42),n(99),n(100),t.exports=n(0).Symbol},function(t,e,n){\"use strict\";var r=n(1),o=n(8),i=n(5),u=n(3),s=n(45),c=n(95).KEY,f=n(13),a=n(28),l=n(24),p=n(20),v=n(2),d=n(33),h=n(34),y=n(96),_=n(97),b=n(4),g=n(6),m=n(10),w=n(26),x=n(19),O=n(31),M=n(98),P=n(40),S=n(7),L=n(21),j=P.f,k=S.f,E=M.f,R=r.Symbol,T=r.JSON,C=T&&T.stringify,A=v(\"_hidden\"),D=v(\"toPrimitive\"),F={}.propertyIsEnumerable,q=a(\"symbol-registry\"),I=a(\"symbols\"),N=a(\"op-symbols\"),B=Object.prototype,W=\"function\"==typeof R,G=r.QObject,U=!G||!G.prototype||!G.prototype.findChild,V=i&&f(function(){return 7!=O(k({},\"a\",{get:function(){return k(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=j(B,e);r&&delete B[e],k(t,e,n),r&&t!==B&&k(B,e,r)}:k,H=function(t){var e=I[t]=O(R.prototype);return e._k=t,e},K=W&&\"symbol\"==typeof R.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof R},J=function(t,e,n){return t===B&&J(N,e,n),b(t),e=w(e,!0),b(n),o(I,e)?(n.enumerable?(o(t,A)&&t[A][e]&&(t[A][e]=!1),n=O(n,{enumerable:x(0,!1)})):(o(t,A)||k(t,A,x(1,{})),t[A][e]=!0),V(t,e,n)):k(t,e,n)},z=function(t,e){b(t);for(var n,r=y(e=m(e)),o=0,i=r.length;i>o;)J(t,n=r[o++],e[n]);return t},Y=function(t,e){return void 0===e?O(t):z(O(t),e)},Q=function(t){var e=F.call(this,t=w(t,!0));return!(this===B&&o(I,t)&&!o(N,t))&&(!(e||!o(this,t)||!o(I,t)||o(this,A)&&this[A][t])||e)},X=function(t,e){if(t=m(t),e=w(e,!0),t!==B||!o(I,e)||o(N,e)){var n=j(t,e);return!n||!o(I,e)||o(t,A)&&t[A][e]||(n.enumerable=!0),n}},Z=function(t){for(var e,n=E(m(t)),r=[],i=0;n.length>i;)o(I,e=n[i++])||e==A||e==c||r.push(e);return r},$=function(t){for(var e,n=t===B,r=E(n?N:m(t)),i=[],u=0;r.length>u;)!o(I,e=r[u++])||n&&!o(B,e)||i.push(I[e]);return i};W||(R=function(){if(this instanceof R)throw TypeError(\"Symbol is not a constructor!\");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===B&&e.call(N,n),o(this,A)&&o(this[A],t)&&(this[A][t]=!1),V(this,t,x(1,n))};return i&&U&&V(B,t,{configurable:!0,set:e}),H(t)},s(R.prototype,\"toString\",function(){return this._k}),P.f=X,S.f=J,n(56).f=M.f=Z,n(35).f=Q,n(55).f=$,i&&!n(14)&&s(B,\"propertyIsEnumerable\",Q,!0),d.f=function(t){return H(v(t))}),u(u.G+u.W+u.F*!W,{Symbol:R});for(var tt=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),et=0;tt.length>et;)v(tt[et++]);for(var nt=L(v.store),rt=0;nt.length>rt;)h(nt[rt++]);u(u.S+u.F*!W,\"Symbol\",{for:function(t){return o(q,t+=\"\")?q[t]:q[t]=R(t)},keyFor:function(t){if(!K(t))throw TypeError(t+\" is not a symbol!\");for(var e in q)if(q[e]===t)return e},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!W,\"Object\",{create:Y,defineProperty:J,defineProperties:z,getOwnPropertyDescriptor:X,getOwnPropertyNames:Z,getOwnPropertySymbols:$}),T&&u(u.S+u.F*(!W||f(function(){var t=R();return\"[null]\"!=C([t])||\"{}\"!=C({a:t})||\"{}\"!=C(Object(t))})),\"JSON\",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(g(e)||void 0!==t)&&!K(t))return _(e)||(e=function(t,e){if(\"function\"==typeof n&&(e=n.call(this,t,e)),!K(e))return e}),r[1]=e,C.apply(T,r)}}),R.prototype[D]||n(9)(R.prototype,D,R.prototype.valueOf),l(R,\"Symbol\"),l(Math,\"Math\",!0),l(r.JSON,\"JSON\",!0)},function(t,e,n){var r=n(20)(\"meta\"),o=n(6),i=n(8),u=n(7).f,s=0,c=Object.isExtensible||function(){return!0},f=!n(13)(function(){return c(Object.preventExtensions({}))}),a=function(t){u(t,r,{value:{i:\"O\"+ ++s,w:{}}})},l=function(t,e){if(!o(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!i(t,r)){if(!c(t))return\"F\";if(!e)return\"E\";a(t)}return t[r].i},p=function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;a(t)}return t[r].w},v=function(t){return f&&d.NEED&&c(t)&&!i(t,r)&&a(t),t},d=t.exports={KEY:r,NEED:!1,fastKey:l,getWeak:p,onFreeze:v}},function(t,e,n){var r=n(21),o=n(55),i=n(35);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,s=n(t),c=i.f,f=0;s.length>f;)c.call(t,u=s[f++])&&e.push(u);return e}},function(t,e,n){var r=n(16);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(10),o=n(56).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(t){try{return o(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&\"[object Window]\"==i.call(t)?s(t):o(r(t))}},function(t,e,n){n(34)(\"asyncIterator\")},function(t,e,n){n(34)(\"observable\")},function(t,e,n){t.exports={default:n(102),__esModule:!0}},function(t,e,n){n(103),t.exports=n(0).Object.setPrototypeOf},function(t,e,n){var r=n(3);r(r.S,\"Object\",{setPrototypeOf:n(104).set})},function(t,e,n){var r=n(6),o=n(4),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,r){try{r=n(15)(Function.call,n(40).f(Object.prototype,\"__proto__\").set,2),r(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){t.exports={default:n(106),__esModule:!0}},function(t,e,n){n(107);var r=n(0).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){var r=n(3);r(r.S,\"Object\",{create:n(31)})},,,,,,,,,function(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(63),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),s=n(12),c=_interopRequireDefault(s),f=n(64),a=_interopRequireDefault(f),l=n(65),p=_interopRequireDefault(l),v=n(117),d=_interopRequireDefault(v),h=function(t){function MiniBus(){return(0,u.default)(this,MiniBus),(0,a.default)(this,(MiniBus.__proto__||(0,o.default)(MiniBus)).call(this))}return(0,p.default)(MiniBus,t),(0,c.default)(MiniBus,[{key:\"postMessage\",value:function(t,e,n){var r=this;return r._genId(t),r._responseCallback(t,e,n),r._onPostMessage(t),t.id}},{key:\"_onMessage\",value:function(t){var e=this;if(!e._onResponse(t)){var n=e._subscriptions[t.to];n?(e._publishOn(n,t),t.to.startsWith(\"hyperty\")||e._publishOnDefault(t)):e._publishOnDefault(t)}}}]),MiniBus}(d.default);e.default=h,t.exports=e.default},function(t,e,n){\"use strict\";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(41),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),s=n(12),c=_interopRequireDefault(s),f=n(87),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(f),l=a.getLogger(\"Bus\"),p=function(){function Bus(){(0,u.default)(this,Bus);var t=this;t._msgId=0,t._subscriptions={},t._responseTimeOut=3e4,t._responseCallbacks={},t._registerExternalListener()}return(0,c.default)(Bus,[{key:\"addListener\",value:function(t,e){var n=this,r=new v(n._subscriptions,t,e),o=n._subscriptions[t];return o||(o=[],n._subscriptions[t]=o),o.push(r),r}},{key:\"addResponseListener\",value:function(t,e,n){this._responseCallbacks[t+e]=n}},{key:\"removeResponseListener\",value:function(t,e){delete this._responseCallbacks[t+e]}},{key:\"removeAllListenersOf\",value:function(t){delete this._subscriptions[t]}},{key:\"bind\",value:function(t,e,n){var r=this,o=this;return{thisListener:o.addListener(t,function(t){n.postMessage(t)}),targetListener:n.addListener(e,function(t){o.postMessage(t)}),unbind:function(){r.thisListener.remove(),r.targetListener.remove()}}}},{key:\"_publishOnDefault\",value:function(t){var e=this._subscriptions[\"*\"];e&&this._publishOn(e,t)}},{key:\"_publishOn\",value:function(t,e){t.forEach(function(t){t._callback(e)})}},{key:\"_responseCallback\",value:function(t,e){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=this;if(e){var o=t.from+t.id;r._responseCallbacks[o]=e,n&&setTimeout(function(){var e=r._responseCallbacks[o];if(delete r._responseCallbacks[o],e){e({id:t.id,type:\"response\",body:{code:408,desc:\"Response timeout!\",value:t}})}},r._responseTimeOut)}}},{key:\"_onResponse\",value:function(t){var e=this;if(\"response\"===t.type){var n=t.to+t.id,r=e._responseCallbacks[n];if(t.body.code>=200&&delete e._responseCallbacks[n],r)return r(t),!0}return!1}},{key:\"_onMessage\",value:function(t){var e=this;if(!e._onResponse(t)){var n=e._subscriptions[t.to];n?e._publishOn(n,t):e._publishOnDefault(t)}}},{key:\"_genId\",value:function(t){t.id&&0!==t.id||(this._msgId++,t.id=this._msgId)}},{key:\"postMessage\",value:function(t,e){}},{key:\"postMessageWithRetries\",value:function(t,e,n){var r=this,i=0,u=function(){return new o.default(function(e,o){r.postMessage(t,function(r){408===r.body.code||500===r.body.code?o():(l.info(\"[Bus.postMessageWithRetries] msg delivered: \",t),n(r),e())})})};!function tryAgain(){u().then(function(){},function(){if(l.warn(\"[Bus.postMessageWithRetries] Message Bounced (retry \"+i+\"): '\",t),!(i++<e)){var n=\"[Error] Message Bounced (delivery attempts \"+e+\"): '\";throw new Error(n+t)}tryAgain()})}()}},{key:\"_onPostMessage\",value:function(t){}},{key:\"_registerExternalListener\",value:function(){}}]),Bus}(),v=function(){function MsgListener(t,e,n){(0,u.default)(this,MsgListener);var r=this;r._subscriptions=t,r._url=e,r._callback=n}return(0,c.default)(MsgListener,[{key:\"remove\",value:function(){var t=this,e=t._subscriptions[t._url];if(e){var n=e.indexOf(t);e.splice(n,1),0===e.length&&delete t._subscriptions[t._url]}}},{key:\"url\",get:function(){return this._url}}]),MsgListener}();e.default=p,t.exports=e.default},,,,,,,,,,,,,,,,,,,function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(116),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=o.default,t.exports=e.default}])});","// version: 0.12.0\n// date: Wed Aug 01 2018 09:48:10 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n// version: 0.12.0\n// date: Wed Aug 01 2018 09:48:10 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"sandbox\",[],t):\"object\"==typeof exports?exports.sandbox=t():e.sandbox=t()}(\"undefined\"!=typeof self?self:this,function(){return function(e){function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,\"a\",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p=\"\",__webpack_require__(__webpack_require__.s=134)}([function(e,t){var n=e.exports={version:\"2.5.7\"};\"number\"==typeof __e&&(__e=n)},function(e,t){var n=e.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(e,t,n){var r=n(28)(\"wks\"),o=n(20),i=n(1).Symbol,u=\"function\"==typeof i;(e.exports=function(e){return r[e]||(r[e]=u&&i[e]||(u?i:o)(\"Symbol.\"+e))}).store=r},function(e,t,n){var r=n(1),o=n(0),i=n(15),u=n(9),s=n(8),c=function(e,t,n){var a,f,l,p=e&c.F,d=e&c.G,v=e&c.S,y=e&c.P,_=e&c.B,h=e&c.W,b=d?o:o[t]||(o[t]={}),g=b.prototype,m=d?r:v?r[t]:(r[t]||{}).prototype;d&&(n=t);for(a in n)(f=!p&&m&&void 0!==m[a])&&s(b,a)||(l=f?m[a]:n[a],b[a]=d&&\"function\"!=typeof m[a]?n[a]:_&&f?i(l,r):h&&m[a]==l?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(l):y&&\"function\"==typeof l?i(Function.call,l):l,y&&((b.virtual||(b.virtual={}))[a]=l,e&c.R&&g&&!g[a]&&u(g,a,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var r=n(6);e.exports=function(e){if(!r(e))throw TypeError(e+\" is not an object!\");return e}},function(e,t,n){e.exports=!n(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},function(e,t,n){var r=n(4),o=n(36),i=n(26),u=Object.defineProperty;t.f=n(5)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(e[t]=n.value),e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(7),o=n(19);e.exports=n(5)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(57),o=n(23);e.exports=function(e){return r(o(e))}},function(e,t,n){\"use strict\";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}},function(e,t,n){\"use strict\";t.__esModule=!0;var r=n(60),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,o.default)(e,r.key,r)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}()},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=!0},function(e,t,n){var r=n(18);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports={}},function(e,t){e.exports=function(e){if(\"function\"!=typeof e)throw TypeError(e+\" is not a function!\");return e}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return\"Symbol(\".concat(void 0===e?\"\":e,\")_\",(++n+r).toString(36))}},function(e,t,n){var r=n(37),o=n(29);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError(\"Can't call method on  \"+e);return e}},function(e,t,n){var r=n(7).f,o=n(8),i=n(2)(\"toStringTag\");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(6),o=n(1).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if(\"function\"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError(\"Can't convert object to primitive value\")}},function(e,t,n){var r=n(28)(\"keys\"),o=n(20);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(0),o=n(1),i=o[\"__core-js_shared__\"]||(o[\"__core-js_shared__\"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})(\"versions\",[]).push({version:r.version,mode:n(14)?\"pure\":\"global\",copyright:\"© 2018 Denis Pushkarev (zloirock.ru)\"})},function(e,t){e.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(e,t,n){var r=n(23);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(4),o=n(69),i=n(29),u=n(27)(\"IE_PROTO\"),s=function(){},c=function(){var e,t=n(25)(\"iframe\"),r=i.length;for(t.style.display=\"none\",n(46).appendChild(t),t.src=\"javascript:\",e=t.contentWindow.document,e.open(),e.write(\"<script>document.F=Object<\\/script>\"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[u]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){\"use strict\";function PromiseCapability(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError(\"Bad Promise constructor\");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}var r=n(18);e.exports.f=function(e){return new PromiseCapability(e)}},function(e,t,n){t.f=n(2)},function(e,t,n){var r=n(1),o=n(0),i=n(14),u=n(33),s=n(7).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});\"_\"==e.charAt(0)||e in t||s(t,e,{value:u.f(e)})}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){e.exports=!n(5)&&!n(13)(function(){return 7!=Object.defineProperty(n(25)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(e,t,n){var r=n(8),o=n(10),i=n(58)(!1),u=n(27)(\"IE_PROTO\");e.exports=function(e,t){var n,s=o(e),c=0,a=[];for(n in s)n!=u&&r(s,n)&&a.push(n);for(;t.length>c;)r(s,n=t[c++])&&(~i(a,n)||a.push(n));return a}},function(e,t,n){var r=n(22),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(3),o=n(0),i=n(13);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],u={};u[e]=t(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(e,t,n){var r=n(35),o=n(19),i=n(10),u=n(26),s=n(8),c=n(36),a=Object.getOwnPropertyDescriptor;t.f=n(5)?a:function(e,t){if(e=i(e),t=u(t,!0),c)try{return a(e,t)}catch(e){}if(s(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){e.exports={default:n(66),__esModule:!0}},function(e,t){},function(e,t,n){\"use strict\";var r=n(67)(!0);n(44)(String,\"String\",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){\"use strict\";var r=n(14),o=n(3),i=n(45),u=n(9),s=n(17),c=n(68),a=n(24),f=n(47),l=n(2)(\"iterator\"),p=!([].keys&&\"next\"in[].keys()),d=function(){return this};e.exports=function(e,t,n,v,y,_,h){c(n,t,v);var b,g,m,x=function(e){if(!p&&e in M)return M[e];switch(e){case\"keys\":case\"values\":return function(){return new n(this,e)}}return function(){return new n(this,e)}},w=t+\" Iterator\",O=\"values\"==y,S=!1,M=e.prototype,P=M[l]||M[\"@@iterator\"]||y&&M[y],k=P||x(y),R=y?O?x(\"entries\"):k:void 0,L=\"Array\"==t?M.entries||P:P;if(L&&(m=f(L.call(new e)))!==Object.prototype&&m.next&&(a(m,w,!0),r||\"function\"==typeof m[l]||u(m,l,d)),O&&P&&\"values\"!==P.name&&(S=!0,k=function(){return P.call(this)}),r&&!h||!p&&!S&&M[l]||u(M,l,k),s[t]=k,s[w]=d,y)if(b={values:O?k:x(\"values\"),keys:_?k:x(\"keys\"),entries:R},h)for(g in b)g in M||i(M,g,b[g]);else o(o.P+o.F*(p||S),t,b);return b}},function(e,t,n){e.exports=n(9)},function(e,t,n){var r=n(1).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(8),o=n(30),i=n(27)(\"IE_PROTO\"),u=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:\"function\"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,n){n(70);for(var r=n(1),o=n(9),i=n(17),u=n(2)(\"toStringTag\"),s=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),c=0;c<s.length;c++){var a=s[c],f=r[a],l=f&&f.prototype;l&&!l[u]&&o(l,u,a),i[a]=i.Array}},function(e,t,n){var r=n(16),o=n(2)(\"toStringTag\"),i=\"Arguments\"==r(function(){return arguments}()),u=function(e,t){try{return e[t]}catch(e){}};e.exports=function(e){var t,n,s;return void 0===e?\"Undefined\":null===e?\"Null\":\"string\"==typeof(n=u(t=Object(e),o))?n:i?r(t):\"Object\"==(s=r(t))&&\"function\"==typeof t.callee?\"Arguments\":s}},function(e,t,n){var r=n(4),o=n(18),i=n(2)(\"species\");e.exports=function(e,t){var n,u=r(e).constructor;return void 0===u||void 0==(n=r(u)[i])?t:o(n)}},function(e,t,n){var r,o,i,u=n(15),s=n(79),c=n(46),a=n(25),f=n(1),l=f.process,p=f.setImmediate,d=f.clearImmediate,v=f.MessageChannel,y=f.Dispatch,_=0,h={},b=function(){var e=+this;if(h.hasOwnProperty(e)){var t=h[e];delete h[e],t()}},g=function(e){b.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return h[++_]=function(){s(\"function\"==typeof e?e:Function(e),t)},r(_),_},d=function(e){delete h[e]},\"process\"==n(16)(l)?r=function(e){l.nextTick(u(b,e,1))}:y&&y.now?r=function(e){y.now(u(b,e,1))}:v?(o=new v,i=o.port2,o.port1.onmessage=g,r=u(i.postMessage,i,1)):f.addEventListener&&\"function\"==typeof postMessage&&!f.importScripts?(r=function(e){f.postMessage(e+\"\",\"*\")},f.addEventListener(\"message\",g,!1)):r=\"onreadystatechange\"in a(\"script\")?function(e){c.appendChild(a(\"script\")).onreadystatechange=function(){c.removeChild(this),b.call(e)}}:function(e){setTimeout(u(b,e,1),0)}),e.exports={set:p,clear:d}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(4),o=n(6),i=n(32);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var r=n(90),o=_interopRequireDefault(r),i=n(92),u=_interopRequireDefault(i),s=\"function\"==typeof u.default&&\"symbol\"==typeof o.default?function(e){return typeof e}:function(e){return e&&\"function\"==typeof u.default&&e.constructor===u.default&&e!==u.default.prototype?\"symbol\":typeof e};t.default=\"function\"==typeof u.default&&\"symbol\"===s(o.default)?function(e){return void 0===e?\"undefined\":s(e)}:function(e){return e&&\"function\"==typeof u.default&&e.constructor===u.default&&e!==u.default.prototype?\"symbol\":void 0===e?\"undefined\":s(e)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(37),o=n(29).concat(\"length\",\"prototype\");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(16);e.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(e){return\"String\"==r(e)?e.split(\"\"):Object(e)}},function(e,t,n){var r=n(10),o=n(38),i=n(59);e.exports=function(e){return function(t,n,u){var s,c=r(t),a=o(c.length),f=i(u,a);if(e&&n!=n){for(;a>f;)if((s=c[f++])!=s)return!0}else for(;a>f;f++)if((e||f in c)&&c[f]===n)return e||f||0;return!e&&-1}}},function(e,t,n){var r=n(22),o=Math.max,i=Math.min;e.exports=function(e,t){return e=r(e),e<0?o(e+t,0):i(e,t)}},function(e,t,n){e.exports={default:n(61),__esModule:!0}},function(e,t,n){n(62);var r=n(0).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){var r=n(3);r(r.S+r.F*!n(5),\"Object\",{defineProperty:n(7).f})},function(e,t,n){e.exports={default:n(88),__esModule:!0}},function(e,t,n){\"use strict\";t.__esModule=!0;var r=n(54),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!==(void 0===t?\"undefined\":(0,o.default)(t))&&\"function\"!=typeof t?e:t}},function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var r=n(101),o=_interopRequireDefault(r),i=n(105),u=_interopRequireDefault(i),s=n(54),c=_interopRequireDefault(s);t.default=function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+(void 0===t?\"undefined\":(0,c.default)(t)));e.prototype=(0,u.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.default?(0,o.default)(e,t):e.__proto__=t)}},function(e,t,n){n(42),n(43),n(48),n(73),n(85),n(86),e.exports=n(0).Promise},function(e,t,n){var r=n(22),o=n(23);e.exports=function(e){return function(t,n){var i,u,s=String(o(t)),c=r(n),a=s.length;return c<0||c>=a?e?\"\":void 0:(i=s.charCodeAt(c),i<55296||i>56319||c+1===a||(u=s.charCodeAt(c+1))<56320||u>57343?e?s.charAt(c):i:e?s.slice(c,c+2):u-56320+(i-55296<<10)+65536)}}},function(e,t,n){\"use strict\";var r=n(31),o=n(19),i=n(24),u={};n(9)(u,n(2)(\"iterator\"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(u,{next:o(1,n)}),i(e,t+\" Iterator\")}},function(e,t,n){var r=n(7),o=n(4),i=n(21);e.exports=n(5)?Object.defineProperties:function(e,t){o(e);for(var n,u=i(t),s=u.length,c=0;s>c;)r.f(e,n=u[c++],t[n]);return e}},function(e,t,n){\"use strict\";var r=n(71),o=n(72),i=n(17),u=n(10);e.exports=n(44)(Array,\"Array\",function(e,t){this._t=u(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):\"keys\"==t?o(0,n):\"values\"==t?o(0,e[n]):o(0,[n,e[n]])},\"values\"),i.Arguments=i.Array,r(\"keys\"),r(\"values\"),r(\"entries\")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){\"use strict\";var r,o,i,u,s=n(14),c=n(1),a=n(15),f=n(49),l=n(3),p=n(6),d=n(18),v=n(74),y=n(75),_=n(50),h=n(51).set,b=n(80)(),g=n(32),m=n(52),x=n(81),w=n(53),O=c.TypeError,S=c.process,M=S&&S.versions,P=M&&M.v8||\"\",k=c.Promise,R=\"process\"==f(S),L=function(){},j=o=g.f,D=!!function(){try{var e=k.resolve(1),t=(e.constructor={})[n(2)(\"species\")]=function(e){e(L,L)};return(R||\"function\"==typeof PromiseRejectionEvent)&&e.then(L)instanceof t&&0!==P.indexOf(\"6.6\")&&-1===x.indexOf(\"Chrome/66\")}catch(e){}}(),E=function(e){var t;return!(!p(e)||\"function\"!=typeof(t=e.then))&&t},T=function(e,t){if(!e._n){e._n=!0;var n=e._c;b(function(){for(var r=e._v,o=1==e._s,i=0;n.length>i;)!function(t){var n,i,u,s=o?t.ok:t.fail,c=t.resolve,a=t.reject,f=t.domain;try{s?(o||(2==e._h&&C(e),e._h=1),!0===s?n=r:(f&&f.enter(),n=s(r),f&&(f.exit(),u=!0)),n===t.promise?a(O(\"Promise-chain cycle\")):(i=E(n))?i.call(n,c,a):c(n)):a(r)}catch(e){f&&!u&&f.exit(),a(e)}}(n[i++]);e._c=[],e._n=!1,t&&!e._h&&A(e)})}},A=function(e){h.call(c,function(){var t,n,r,o=e._v,i=q(e);if(i&&(t=m(function(){R?S.emit(\"unhandledRejection\",o,e):(n=c.onunhandledrejection)?n({promise:e,reason:o}):(r=c.console)&&r.error&&r.error(\"Unhandled promise rejection\",o)}),e._h=R||q(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},q=function(e){return 1!==e._h&&0===(e._a||e._c).length},C=function(e){h.call(c,function(){var t;R?S.emit(\"rejectionHandled\",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},I=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),T(t,!0))},F=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw O(\"Promise can't be resolved itself\");(t=E(e))?b(function(){var r={_w:n,_d:!1};try{t.call(e,a(F,r,1),a(I,r,1))}catch(e){I.call(r,e)}}):(n._v=e,n._s=1,T(n,!1))}catch(e){I.call({_w:n,_d:!1},e)}}};D||(k=function(e){v(this,k,\"Promise\",\"_h\"),d(e),r.call(this);try{e(a(F,this,1),a(I,this,1))}catch(e){I.call(this,e)}},r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},r.prototype=n(82)(k.prototype,{then:function(e,t){var n=j(_(this,k));return n.ok=\"function\"!=typeof e||e,n.fail=\"function\"==typeof t&&t,n.domain=R?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&T(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=a(F,e,1),this.reject=a(I,e,1)},g.f=j=function(e){return e===k||e===u?new i(e):o(e)}),l(l.G+l.W+l.F*!D,{Promise:k}),n(24)(k,\"Promise\"),n(83)(\"Promise\"),u=n(0).Promise,l(l.S+l.F*!D,\"Promise\",{reject:function(e){var t=j(this);return(0,t.reject)(e),t.promise}}),l(l.S+l.F*(s||!D),\"Promise\",{resolve:function(e){return w(s&&this===u?k:this,e)}}),l(l.S+l.F*!(D&&n(84)(function(e){k.all(e).catch(L)})),\"Promise\",{all:function(e){var t=this,n=j(t),r=n.resolve,o=n.reject,i=m(function(){var n=[],i=0,u=1;y(e,!1,function(e){var s=i++,c=!1;n.push(void 0),u++,t.resolve(e).then(function(e){c||(c=!0,n[s]=e,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=j(t),r=n.reject,o=m(function(){y(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+\": incorrect invocation!\");return e}},function(e,t,n){var r=n(15),o=n(76),i=n(77),u=n(4),s=n(38),c=n(78),a={},f={},t=e.exports=function(e,t,n,l,p){var d,v,y,_,h=p?function(){return e}:c(e),b=r(n,l,t?2:1),g=0;if(\"function\"!=typeof h)throw TypeError(e+\" is not iterable!\");if(i(h)){for(d=s(e.length);d>g;g++)if((_=t?b(u(v=e[g])[0],v[1]):b(e[g]))===a||_===f)return _}else for(y=h.call(e);!(v=y.next()).done;)if((_=o(y,b,v.value,t))===a||_===f)return _};t.BREAK=a,t.RETURN=f},function(e,t,n){var r=n(4);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(17),o=n(2)(\"iterator\"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(49),o=n(2)(\"iterator\"),i=n(17);e.exports=n(0).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e[\"@@iterator\"]||i[r(e)]}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(1),o=n(51).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,s=r.Promise,c=\"process\"==n(16)(u);e.exports=function(){var e,t,n,a=function(){var r,o;for(c&&(r=u.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(c)n=function(){u.nextTick(a)};else if(!i||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);n=function(){f.then(a)}}else n=function(){o.call(r,a)};else{var l=!0,p=document.createTextNode(\"\");new i(a).observe(p,{characterData:!0}),n=function(){p.data=l=!l}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var r=n(1),o=r.navigator;e.exports=o&&o.userAgent||\"\"},function(e,t,n){var r=n(9);e.exports=function(e,t,n){for(var o in t)n&&e[o]?e[o]=t[o]:r(e,o,t[o]);return e}},function(e,t,n){\"use strict\";var r=n(1),o=n(0),i=n(7),u=n(5),s=n(2)(\"species\");e.exports=function(e){var t=\"function\"==typeof o[e]?o[e]:r[e];u&&t&&!t[s]&&i.f(t,s,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(2)(\"iterator\"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},e(i)}catch(e){}return n}},function(e,t,n){\"use strict\";var r=n(3),o=n(0),i=n(1),u=n(50),s=n(53);r(r.P+r.R,\"Promise\",{finally:function(e){var t=u(this,o.Promise||i.Promise),n=\"function\"==typeof e;return this.then(n?function(n){return s(t,e()).then(function(){return n})}:e,n?function(n){return s(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){\"use strict\";var r=n(3),o=n(32),i=n(52);r(r.S,\"Promise\",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){var r,o;!function(i,u){\"use strict\";r=u,void 0!==(o=\"function\"==typeof r?r.call(t,n,t,e):r)&&(e.exports=o)}(0,function(){\"use strict\";function bindMethod(e,t){var n=e[t];if(\"function\"==typeof n.bind)return n.bind(e);try{return Function.prototype.bind.call(n,e)}catch(t){return function(){return Function.prototype.apply.apply(n,[e,arguments])}}}function realMethod(n){return\"debug\"===n&&(n=\"log\"),typeof console!==t&&(void 0!==console[n]?bindMethod(console,n):void 0!==console.log?bindMethod(console,\"log\"):e)}function replaceLoggingMethods(t,r){for(var o=0;o<n.length;o++){var i=n[o];this[i]=o<t?e:this.methodFactory(i,t,r)}this.log=this.debug}function enableLoggingWhenConsoleArrives(e,n,r){return function(){typeof console!==t&&(replaceLoggingMethods.call(this,n,r),this[e].apply(this,arguments))}}function defaultMethodFactory(e,t,n){return realMethod(e)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(e,r,o){function persistLevelIfPossible(e){var r=(n[e]||\"silent\").toUpperCase();if(typeof window!==t){try{return void(window.localStorage[s]=r)}catch(e){}try{window.document.cookie=encodeURIComponent(s)+\"=\"+r+\";\"}catch(e){}}}function getPersistedLevel(){var e;if(typeof window!==t){try{e=window.localStorage[s]}catch(e){}if(typeof e===t)try{var n=window.document.cookie,r=n.indexOf(encodeURIComponent(s)+\"=\");-1!==r&&(e=/^([^;]+)/.exec(n.slice(r))[1])}catch(e){}return void 0===u.levels[e]&&(e=void 0),e}}var i,u=this,s=\"loglevel\";e&&(s+=\":\"+e),u.name=e,u.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},u.methodFactory=o||defaultMethodFactory,u.getLevel=function(){return i},u.setLevel=function(n,r){if(\"string\"==typeof n&&void 0!==u.levels[n.toUpperCase()]&&(n=u.levels[n.toUpperCase()]),!(\"number\"==typeof n&&n>=0&&n<=u.levels.SILENT))throw\"log.setLevel() called with invalid level: \"+n;if(i=n,!1!==r&&persistLevelIfPossible(n),replaceLoggingMethods.call(u,n,e),typeof console===t&&n<u.levels.SILENT)return\"No console available for logging\"},u.setDefaultLevel=function(e){getPersistedLevel()||u.setLevel(e,!1)},u.enableAll=function(e){u.setLevel(u.levels.TRACE,e)},u.disableAll=function(e){u.setLevel(u.levels.SILENT,e)};var c=getPersistedLevel();null==c&&(c=null==r?\"WARN\":r),u.setLevel(c,!1)}var e=function(){},t=\"undefined\",n=[\"trace\",\"debug\",\"info\",\"warn\",\"error\"],r=new Logger,o={};r.getLogger=function(e){if(\"string\"!=typeof e||\"\"===e)throw new TypeError(\"You must supply a name when creating a logger.\");var t=o[e];return t||(t=o[e]=new Logger(e,r.getLevel(),r.methodFactory)),t};var i=typeof window!==t?window.log:void 0;return r.noConflict=function(){return typeof window!==t&&window.log===r&&(window.log=i),r},r.getLoggers=function(){return o},r})},function(e,t,n){n(89),e.exports=n(0).Object.getPrototypeOf},function(e,t,n){var r=n(30),o=n(47);n(39)(\"getPrototypeOf\",function(){return function(e){return o(r(e))}})},function(e,t,n){e.exports={default:n(91),__esModule:!0}},function(e,t,n){n(43),n(48),e.exports=n(33).f(\"iterator\")},function(e,t,n){e.exports={default:n(93),__esModule:!0}},function(e,t,n){n(94),n(42),n(99),n(100),e.exports=n(0).Symbol},function(e,t,n){\"use strict\";var r=n(1),o=n(8),i=n(5),u=n(3),s=n(45),c=n(95).KEY,a=n(13),f=n(28),l=n(24),p=n(20),d=n(2),v=n(33),y=n(34),_=n(96),h=n(97),b=n(4),g=n(6),m=n(10),x=n(26),w=n(19),O=n(31),S=n(98),M=n(40),P=n(7),k=n(21),R=M.f,L=P.f,j=S.f,D=r.Symbol,E=r.JSON,T=E&&E.stringify,A=d(\"_hidden\"),q=d(\"toPrimitive\"),C={}.propertyIsEnumerable,I=f(\"symbol-registry\"),F=f(\"symbols\"),N=f(\"op-symbols\"),B=Object.prototype,W=\"function\"==typeof D,G=r.QObject,U=!G||!G.prototype||!G.prototype.findChild,V=i&&a(function(){return 7!=O(L({},\"a\",{get:function(){return L(this,\"a\",{value:7}).a}})).a})?function(e,t,n){var r=R(B,t);r&&delete B[t],L(e,t,n),r&&e!==B&&L(B,t,r)}:L,H=function(e){var t=F[e]=O(D.prototype);return t._k=e,t},K=W&&\"symbol\"==typeof D.iterator?function(e){return\"symbol\"==typeof e}:function(e){return e instanceof D},J=function(e,t,n){return e===B&&J(N,t,n),b(e),t=x(t,!0),b(n),o(F,t)?(n.enumerable?(o(e,A)&&e[A][t]&&(e[A][t]=!1),n=O(n,{enumerable:w(0,!1)})):(o(e,A)||L(e,A,w(1,{})),e[A][t]=!0),V(e,t,n)):L(e,t,n)},z=function(e,t){b(e);for(var n,r=_(t=m(t)),o=0,i=r.length;i>o;)J(e,n=r[o++],t[n]);return e},Y=function(e,t){return void 0===t?O(e):z(O(e),t)},Q=function(e){var t=C.call(this,e=x(e,!0));return!(this===B&&o(F,e)&&!o(N,e))&&(!(t||!o(this,e)||!o(F,e)||o(this,A)&&this[A][e])||t)},X=function(e,t){if(e=m(e),t=x(t,!0),e!==B||!o(F,t)||o(N,t)){var n=R(e,t);return!n||!o(F,t)||o(e,A)&&e[A][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=j(m(e)),r=[],i=0;n.length>i;)o(F,t=n[i++])||t==A||t==c||r.push(t);return r},$=function(e){for(var t,n=e===B,r=j(n?N:m(e)),i=[],u=0;r.length>u;)!o(F,t=r[u++])||n&&!o(B,t)||i.push(F[t]);return i};W||(D=function(){if(this instanceof D)throw TypeError(\"Symbol is not a constructor!\");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===B&&t.call(N,n),o(this,A)&&o(this[A],e)&&(this[A][e]=!1),V(this,e,w(1,n))};return i&&U&&V(B,e,{configurable:!0,set:t}),H(e)},s(D.prototype,\"toString\",function(){return this._k}),M.f=X,P.f=J,n(56).f=S.f=Z,n(35).f=Q,n(55).f=$,i&&!n(14)&&s(B,\"propertyIsEnumerable\",Q,!0),v.f=function(e){return H(d(e))}),u(u.G+u.W+u.F*!W,{Symbol:D});for(var ee=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),te=0;ee.length>te;)d(ee[te++]);for(var ne=k(d.store),re=0;ne.length>re;)y(ne[re++]);u(u.S+u.F*!W,\"Symbol\",{for:function(e){return o(I,e+=\"\")?I[e]:I[e]=D(e)},keyFor:function(e){if(!K(e))throw TypeError(e+\" is not a symbol!\");for(var t in I)if(I[t]===e)return t},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!W,\"Object\",{create:Y,defineProperty:J,defineProperties:z,getOwnPropertyDescriptor:X,getOwnPropertyNames:Z,getOwnPropertySymbols:$}),E&&u(u.S+u.F*(!W||a(function(){var e=D();return\"[null]\"!=T([e])||\"{}\"!=T({a:e})||\"{}\"!=T(Object(e))})),\"JSON\",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(g(t)||void 0!==e)&&!K(e))return h(t)||(t=function(e,t){if(\"function\"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,T.apply(E,r)}}),D.prototype[q]||n(9)(D.prototype,q,D.prototype.valueOf),l(D,\"Symbol\"),l(Math,\"Math\",!0),l(r.JSON,\"JSON\",!0)},function(e,t,n){var r=n(20)(\"meta\"),o=n(6),i=n(8),u=n(7).f,s=0,c=Object.isExtensible||function(){return!0},a=!n(13)(function(){return c(Object.preventExtensions({}))}),f=function(e){u(e,r,{value:{i:\"O\"+ ++s,w:{}}})},l=function(e,t){if(!o(e))return\"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!i(e,r)){if(!c(e))return\"F\";if(!t)return\"E\";f(e)}return e[r].i},p=function(e,t){if(!i(e,r)){if(!c(e))return!0;if(!t)return!1;f(e)}return e[r].w},d=function(e){return a&&v.NEED&&c(e)&&!i(e,r)&&f(e),e},v=e.exports={KEY:r,NEED:!1,fastKey:l,getWeak:p,onFreeze:d}},function(e,t,n){var r=n(21),o=n(55),i=n(35);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var u,s=n(e),c=i.f,a=0;s.length>a;)c.call(e,u=s[a++])&&t.push(u);return t}},function(e,t,n){var r=n(16);e.exports=Array.isArray||function(e){return\"Array\"==r(e)}},function(e,t,n){var r=n(10),o=n(56).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(e){return u.slice()}};e.exports.f=function(e){return u&&\"[object Window]\"==i.call(e)?s(e):o(r(e))}},function(e,t,n){n(34)(\"asyncIterator\")},function(e,t,n){n(34)(\"observable\")},function(e,t,n){e.exports={default:n(102),__esModule:!0}},function(e,t,n){n(103),e.exports=n(0).Object.setPrototypeOf},function(e,t,n){var r=n(3);r(r.S,\"Object\",{setPrototypeOf:n(104).set})},function(e,t,n){var r=n(6),o=n(4),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+\": can't set as prototype!\")};e.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(e,t,r){try{r=n(15)(Function.call,n(40).f(Object.prototype,\"__proto__\").set,2),r(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){e.exports={default:n(106),__esModule:!0}},function(e,t,n){n(107);var r=n(0).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(3);r(r.S,\"Object\",{create:n(31)})},function(e,t,n){e.exports={default:n(109),__esModule:!0}},function(e,t,n){n(110),e.exports=n(0).Object.keys},function(e,t,n){var r=n(30),o=n(21);n(39)(\"keys\",function(){return function(e){return o(r(e))}})},,,,,,function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(63),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),s=n(12),c=_interopRequireDefault(s),a=n(64),f=_interopRequireDefault(a),l=n(65),p=_interopRequireDefault(l),d=n(117),v=_interopRequireDefault(d),y=function(e){function MiniBus(){return(0,u.default)(this,MiniBus),(0,f.default)(this,(MiniBus.__proto__||(0,o.default)(MiniBus)).call(this))}return(0,p.default)(MiniBus,e),(0,c.default)(MiniBus,[{key:\"postMessage\",value:function(e,t,n){var r=this;return r._genId(e),r._responseCallback(e,t,n),r._onPostMessage(e),e.id}},{key:\"_onMessage\",value:function(e){var t=this;if(!t._onResponse(e)){var n=t._subscriptions[e.to];n?(t._publishOn(n,e),e.to.startsWith(\"hyperty\")||t._publishOnDefault(e)):t._publishOnDefault(e)}}}]),MiniBus}(v.default);t.default=y,e.exports=t.default},function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(41),o=_interopRequireDefault(r),i=n(11),u=_interopRequireDefault(i),s=n(12),c=_interopRequireDefault(s),a=n(87),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(a),l=f.getLogger(\"Bus\"),p=function(){function Bus(){(0,u.default)(this,Bus);var e=this;e._msgId=0,e._subscriptions={},e._responseTimeOut=3e4,e._responseCallbacks={},e._registerExternalListener()}return(0,c.default)(Bus,[{key:\"addListener\",value:function(e,t){var n=this,r=new d(n._subscriptions,e,t),o=n._subscriptions[e];return o||(o=[],n._subscriptions[e]=o),o.push(r),r}},{key:\"addResponseListener\",value:function(e,t,n){this._responseCallbacks[e+t]=n}},{key:\"removeResponseListener\",value:function(e,t){delete this._responseCallbacks[e+t]}},{key:\"removeAllListenersOf\",value:function(e){delete this._subscriptions[e]}},{key:\"bind\",value:function(e,t,n){var r=this,o=this;return{thisListener:o.addListener(e,function(e){n.postMessage(e)}),targetListener:n.addListener(t,function(e){o.postMessage(e)}),unbind:function(){r.thisListener.remove(),r.targetListener.remove()}}}},{key:\"_publishOnDefault\",value:function(e){var t=this._subscriptions[\"*\"];t&&this._publishOn(t,e)}},{key:\"_publishOn\",value:function(e,t){e.forEach(function(e){e._callback(t)})}},{key:\"_responseCallback\",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=this;if(t){var o=e.from+e.id;r._responseCallbacks[o]=t,n&&setTimeout(function(){var t=r._responseCallbacks[o];if(delete r._responseCallbacks[o],t){t({id:e.id,type:\"response\",body:{code:408,desc:\"Response timeout!\",value:e}})}},r._responseTimeOut)}}},{key:\"_onResponse\",value:function(e){var t=this;if(\"response\"===e.type){var n=e.to+e.id,r=t._responseCallbacks[n];if(e.body.code>=200&&delete t._responseCallbacks[n],r)return r(e),!0}return!1}},{key:\"_onMessage\",value:function(e){var t=this;if(!t._onResponse(e)){var n=t._subscriptions[e.to];n?t._publishOn(n,e):t._publishOnDefault(e)}}},{key:\"_genId\",value:function(e){e.id&&0!==e.id||(this._msgId++,e.id=this._msgId)}},{key:\"postMessage\",value:function(e,t){}},{key:\"postMessageWithRetries\",value:function(e,t,n){var r=this,i=0,u=function(){return new o.default(function(t,o){r.postMessage(e,function(r){408===r.body.code||500===r.body.code?o():(l.info(\"[Bus.postMessageWithRetries] msg delivered: \",e),n(r),t())})})};!function tryAgain(){u().then(function(){},function(){if(l.warn(\"[Bus.postMessageWithRetries] Message Bounced (retry \"+i+\"): '\",e),!(i++<t)){var n=\"[Error] Message Bounced (delivery attempts \"+t+\"): '\";throw new Error(n+e)}tryAgain()})}()}},{key:\"_onPostMessage\",value:function(e){}},{key:\"_registerExternalListener\",value:function(){}}]),Bus}(),d=function(){function MsgListener(e,t,n){(0,u.default)(this,MsgListener);var r=this;r._subscriptions=e,r._url=t,r._callback=n}return(0,c.default)(MsgListener,[{key:\"remove\",value:function(){var e=this,t=e._subscriptions[e._url];if(t){var n=t.indexOf(e);t.splice(n,1),0===t.length&&delete e._subscriptions[e._url]}}},{key:\"url\",get:function(){return this._url}}]),MsgListener}();t.default=p,e.exports=t.default},function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(11),o=_interopRequireDefault(r),i=n(12),u=_interopRequireDefault(i),s=function(){function SandboxRegistry(e){(0,o.default)(this,SandboxRegistry);var t=this;t._bus=e,t._components={},e.addListener(SandboxRegistry.InternalDeployAddress,function(e){switch(e.type){case\"create\":t._onDeploy(e);break;case\"delete\":t._onRemove(e)}})}return(0,u.default)(SandboxRegistry,[{key:\"_responseMsg\",value:function(e,t,n){var r={id:e.id,type:\"response\",from:SandboxRegistry.InternalDeployAddress,to:SandboxRegistry.ExternalDeployAddress},o={};return t&&(o.code=t),n&&(o.desc=n),r.body=o,r}},{key:\"_onDeploy\",value:function(e){var t=this,n=e.body.config,r=e.body.url,o=e.body.sourceCode,i=void 0,u=void 0;if(t._components.hasOwnProperty(r))i=500,u=\"Instance \"+r+\" already exist!\";else try{t._components[r]=t._create(r,o,n),i=200}catch(e){i=500,u=e}var s=t._responseMsg(e,i,u);t._bus.postMessage(s)}},{key:\"_onRemove\",value:function(e){var t=this,n=e.body.url,r=void 0,o=void 0;t._components.hasOwnProperty(n)?(delete t._components[n],t._bus.removeAllListenersOf(n),r=200):(r=500,o=\"Instance \"+n+\" doesn't exist!\");var i=t._responseMsg(e,r,o);t._bus.postMessage(i)}},{key:\"_create\",value:function(e,t,n){}},{key:\"components\",get:function(){return this._components}}]),SandboxRegistry}();s.ExternalDeployAddress=\"hyperty-runtime://sandbox/external\",s.InternalDeployAddress=\"hyperty-runtime://sandbox/internal\",t.default=s,e.exports=t.default},,,,,,,,,,,,,,,,function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.SandboxRegistry=t.SandboxType=t.Sandbox=void 0;var r=n(135),o=_interopRequireDefault(r),i=n(118),u=_interopRequireDefault(i);t.Sandbox=o.default,t.SandboxType=r.SandboxType,t.SandboxRegistry=u.default},function(e,t,n){\"use strict\";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.SandboxType=void 0;var r=n(108),o=_interopRequireDefault(r),i=n(41),u=_interopRequireDefault(i),s=n(63),c=_interopRequireDefault(s),a=n(11),f=_interopRequireDefault(a),l=n(12),p=_interopRequireDefault(l),d=n(64),v=_interopRequireDefault(d),y=n(65),_=_interopRequireDefault(y),h=n(118),b=_interopRequireDefault(h),g=n(116),m=_interopRequireDefault(g),x=(t.SandboxType={APP:\"app\",NORMAL:\"normal\",WINDOW:\"window\"},function(e){function Sandbox(e){(0,f.default)(this,Sandbox);var t=(0,v.default)(this,(Sandbox.__proto__||(0,c.default)(Sandbox)).call(this)),n=t;return e&&(n.capabilities=e),t}return(0,_.default)(Sandbox,e),(0,p.default)(Sandbox,[{key:\"deployComponent\",value:function(e,t,n,r){var o=this;return new u.default(function(i,u){var s={type:\"create\",from:b.default.ExternalDeployAddress,to:b.default.InternalDeployAddress,body:{url:t,sourceCode:e,config:n,libs:r}};o.postMessage(s,function(e){200===e.body.code?i(\"deployed\"):u(e.body.desc)})})}},{key:\"removeComponent\",value:function(e){var t=this;return new u.default(function(n,r){var o={type:\"delete\",from:b.default.ExternalDeployAddress,to:b.default.InternalDeployAddress,body:{url:e}};t.postMessage(o,function(e){200===e.body.code?n(\"undeployed\"):r(e.body.desc)})})}},{key:\"matches\",value:function(e){var t=this,n=(0,o.default)(e).filter(function(n){return!(t.capabilities[n]&&t.capabilities[n]===e[n])});return 0===n.length||!e[n]}}]),Sandbox}(m.default));t.default=x}])});","// version: 0.9.0\n// date: Wed Aug 01 2018 09:34:34 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"PersistenceManager\",[],t):\"object\"==typeof exports?exports.PersistenceManager=t():(e[\"\"]=e[\"\"]||{},e[\"\"].PersistenceManager=t())}(\"undefined\"!=typeof self?self:this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=183)}({0:function(e,t){var n=e.exports={version:\"2.5.7\"};\"number\"==typeof __e&&(__e=n)},1:function(e,t){var n=e.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},10:function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},11:function(e,t,n){var r=n(8),o=n(16);e.exports=n(4)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},13:function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},14:function(e,t,n){var r=n(24);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},16:function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},183:function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(184),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=o.default,e.exports=t.default},184:function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var o=n(58),u=r(o),i=n(3),f=r(i),c=n(5),a=r(c),l=function(){function e(t){if((0,f.default)(this,e),!t)throw Error(\"The Persistence Manager needs the localStorage\");this.localStorage=t}return(0,a.default)(e,[{key:\"set\",value:function(e,t,n){this.localStorage.setItem(e,(0,u.default)({version:t,value:n}))}},{key:\"get\",value:function(e){var t=this;try{return JSON.parse(t.localStorage.getItem(e)).value}catch(e){}}},{key:\"getVersion\",value:function(e){var t=this;try{return JSON.parse(t.localStorage.getItem(e)).version}catch(e){}}},{key:\"delete\",value:function(e){this.localStorage.removeItem(e)}}]),e}();t.default=l,e.exports=t.default},24:function(e,t){e.exports=function(e){if(\"function\"!=typeof e)throw TypeError(e+\" is not a function!\");return e}},27:function(e,t,n){var r=n(7);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if(\"function\"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError(\"Can't convert object to primitive value\")}},28:function(e,t,n){var r=n(7),o=n(1).document,u=r(o)&&r(o.createElement);e.exports=function(e){return u?o.createElement(e):{}}},3:function(e,t,n){\"use strict\";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}},39:function(e,t,n){e.exports=!n(4)&&!n(13)(function(){return 7!=Object.defineProperty(n(28)(\"div\"),\"a\",{get:function(){return 7}}).a})},4:function(e,t,n){e.exports=!n(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},5:function(e,t,n){\"use strict\";t.__esModule=!0;var r=n(59),o=function(e){return e&&e.__esModule?e:{default:e}}(r);t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,o.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},58:function(e,t,n){e.exports={default:n(76),__esModule:!0}},59:function(e,t,n){e.exports={default:n(61),__esModule:!0}},6:function(e,t,n){var r=n(1),o=n(0),u=n(14),i=n(11),f=n(10),c=function(e,t,n){var a,l,s,p=e&c.F,d=e&c.G,y=e&c.S,v=e&c.P,h=e&c.B,g=e&c.W,x=d?o:o[t]||(o[t]={}),_=x.prototype,b=d?r:y?r[t]:(r[t]||{}).prototype;d&&(n=t);for(a in n)(l=!p&&b&&void 0!==b[a])&&f(x,a)||(s=l?b[a]:n[a],x[a]=d&&\"function\"!=typeof b[a]?n[a]:h&&l?u(s,r):g&&b[a]==s?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(s):v&&\"function\"==typeof s?u(Function.call,s):s,v&&((x.virtual||(x.virtual={}))[a]=s,e&c.R&&_&&!_[a]&&i(_,a,s)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},61:function(e,t,n){n(62);var r=n(0).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},62:function(e,t,n){var r=n(6);r(r.S+r.F*!n(4),\"Object\",{defineProperty:n(8).f})},7:function(e,t){e.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},76:function(e,t,n){var r=n(0),o=r.JSON||(r.JSON={stringify:JSON.stringify});e.exports=function(e){return o.stringify.apply(o,arguments)}},8:function(e,t,n){var r=n(9),o=n(39),u=n(27),i=Object.defineProperty;t.f=n(4)?Object.defineProperty:function(e,t,n){if(r(e),t=u(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(e[t]=n.value),e}},9:function(e,t,n){var r=n(7);e.exports=function(e){if(!r(e))throw TypeError(e+\" is not an object!\");return e}}})});","// version: 0.9.0\n// date: Wed Aug 01 2018 09:34:34 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(\"RuntimeCatalogue\",[],e):\"object\"==typeof exports?exports.RuntimeCatalogue=e():(t[\"\"]=t[\"\"]||{},t[\"\"].RuntimeCatalogue=e())}(\"undefined\"!=typeof self?self:this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var r={};return e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,\"a\",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=185)}([function(t,e){var r=t.exports={version:\"2.5.7\"};\"number\"==typeof __e&&(__e=r)},function(t,e){var r=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=r)},function(t,e,r){var n=r(36)(\"wks\"),i=r(23),o=r(1).Symbol,a=\"function\"==typeof o;(t.exports=function(t){return n[t]||(n[t]=a&&o[t]||(a?o:i)(\"Symbol.\"+t))}).store=n},function(t,e,r){\"use strict\";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}},function(t,e,r){t.exports=!r(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,r){\"use strict\";e.__esModule=!0;var n=r(59),i=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),(0,i.default)(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}()},function(t,e,r){var n=r(1),i=r(0),o=r(14),a=r(11),u=r(10),s=function(t,e,r){var c,l,f,h=t&s.F,p=t&s.G,d=t&s.S,v=t&s.P,y=t&s.B,m=t&s.W,g=p?i:i[e]||(i[e]={}),_=g.prototype,O=p?n:d?n[e]:(n[e]||{}).prototype;p&&(r=e);for(c in r)(l=!h&&O&&void 0!==O[c])&&u(g,c)||(f=l?O[c]:r[c],g[c]=p&&\"function\"!=typeof O[c]?r[c]:y&&l?o(f,n):m&&O[c]==f?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&\"function\"==typeof f?o(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[c]=f,t&s.R&&_&&!_[c]&&a(_,c,f)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e,r){var n=r(9),i=r(39),o=r(27),a=Object.defineProperty;e.f=r(4)?Object.defineProperty:function(t,e,r){if(n(t),e=o(e,!0),n(r),i)try{return a(t,e,r)}catch(t){}if(\"get\"in r||\"set\"in r)throw TypeError(\"Accessors not supported!\");return\"value\"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(7);t.exports=function(t){if(!n(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(8),i=r(16);t.exports=r(4)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(55),i=r(30);t.exports=function(t){return n(i(t))}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(24);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=!0},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports={}},function(t,e,r){t.exports={default:r(102),__esModule:!0}},,function(t,e,r){var n=r(45),i=r(37);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n,i;!function(o,a){\"use strict\";n=a,void 0!==(i=\"function\"==typeof n?n.call(e,r,e,t):n)&&(t.exports=i)}(0,function(){\"use strict\";function t(t,e){var r=t[e];if(\"function\"==typeof r.bind)return r.bind(t);try{return Function.prototype.bind.call(r,t)}catch(e){return function(){return Function.prototype.apply.apply(r,[t,arguments])}}}function e(e){return\"debug\"===e&&(e=\"log\"),typeof console!==u&&(void 0!==console[e]?t(console,e):void 0!==console.log?t(console,\"log\"):a)}function r(t,e){for(var r=0;r<s.length;r++){var n=s[r];this[n]=r<t?a:this.methodFactory(n,t,e)}this.log=this.debug}function n(t,e,n){return function(){typeof console!==u&&(r.call(this,e,n),this[t].apply(this,arguments))}}function i(t,r,i){return e(t)||n.apply(this,arguments)}function o(t,e,n){function o(t){var e=(s[t]||\"silent\").toUpperCase();if(typeof window!==u){try{return void(window.localStorage[f]=e)}catch(t){}try{window.document.cookie=encodeURIComponent(f)+\"=\"+e+\";\"}catch(t){}}}function a(){var t;if(typeof window!==u){try{t=window.localStorage[f]}catch(t){}if(typeof t===u)try{var e=window.document.cookie,r=e.indexOf(encodeURIComponent(f)+\"=\");-1!==r&&(t=/^([^;]+)/.exec(e.slice(r))[1])}catch(t){}return void 0===l.levels[t]&&(t=void 0),t}}var c,l=this,f=\"loglevel\";t&&(f+=\":\"+t),l.name=t,l.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},l.methodFactory=n||i,l.getLevel=function(){return c},l.setLevel=function(e,n){if(\"string\"==typeof e&&void 0!==l.levels[e.toUpperCase()]&&(e=l.levels[e.toUpperCase()]),!(\"number\"==typeof e&&e>=0&&e<=l.levels.SILENT))throw\"log.setLevel() called with invalid level: \"+e;if(c=e,!1!==n&&o(e),r.call(l,e,t),typeof console===u&&e<l.levels.SILENT)return\"No console available for logging\"},l.setDefaultLevel=function(t){a()||l.setLevel(t,!1)},l.enableAll=function(t){l.setLevel(l.levels.TRACE,t)},l.disableAll=function(t){l.setLevel(l.levels.SILENT,t)};var h=a();null==h&&(h=null==e?\"WARN\":e),l.setLevel(h,!1)}var a=function(){},u=\"undefined\",s=[\"trace\",\"debug\",\"info\",\"warn\",\"error\"],c=new o,l={};c.getLogger=function(t){if(\"string\"!=typeof t||\"\"===t)throw new TypeError(\"You must supply a name when creating a logger.\");var e=l[t];return e||(e=l[t]=new o(t,c.getLevel(),c.methodFactory)),e};var f=typeof window!==u?window.log:void 0;return c.noConflict=function(){return typeof window!==u&&window.log===c&&(window.log=f),c},c.getLoggers=function(){return l},c})},function(t,e){var r=0,n=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++r+n).toString(36))}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,r){t.exports={default:r(91),__esModule:!0}},function(t,e,r){var n=r(8).f,i=r(10),o=r(2)(\"toStringTag\");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},function(t,e,r){var n=r(7);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&\"function\"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if(\"function\"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&\"function\"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError(\"Can't convert object to primitive value\")}},function(t,e,r){var n=r(7),i=r(1).document,o=n(i)&&n(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(30);t.exports=function(t){return Object(n(t))}},function(t,e,r){\"use strict\";e.__esModule=!0;var n=r(47),i=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default=function(t,e){if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!==(void 0===e?\"undefined\":(0,i.default)(e))&&\"function\"!=typeof e?t:e}},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var i=r(93),o=n(i),a=r(97),u=n(a),s=r(47),c=n(s);e.default=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+(void 0===e?\"undefined\":(0,c.default)(e)));t.prototype=(0,u.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o.default?(0,o.default)(t,e):t.__proto__=e)}},function(t,e,r){var n=r(36)(\"keys\"),i=r(23);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e,r){var n=r(0),i=r(1),o=i[\"__core-js_shared__\"]||(i[\"__core-js_shared__\"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:n.version,mode:r(15)?\"pure\":\"global\",copyright:\"© 2018 Denis Pushkarev (zloirock.ru)\"})},function(t,e){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,e,r){var n=r(9),i=r(72),o=r(37),a=r(35)(\"IE_PROTO\"),u=function(){},s=function(){var t,e=r(28)(\"iframe\"),n=o.length;for(e.style.display=\"none\",r(56).appendChild(e),e.src=\"javascript:\",t=e.contentWindow.document,t.open(),t.write(\"<script>document.F=Object<\\/script>\"),t.close(),s=t.F;n--;)delete s.prototype[o[n]];return s()};t.exports=Object.create||function(t,e){var r;return null!==t?(u.prototype=n(t),r=new u,u.prototype=null,r[a]=t):r=s(),void 0===e?r:i(r,e)}},function(t,e,r){t.exports=!r(4)&&!r(13)(function(){return 7!=Object.defineProperty(r(28)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(2)},function(t,e,r){var n=r(1),i=r(0),o=r(15),a=r(40),u=r(8).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:n.Symbol||{});\"_\"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},,function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(6),i=r(0),o=r(13);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],a={};a[t]=e(r),n(n.S+n.F*o(function(){r(1)}),\"Object\",a)}},function(t,e,r){var n=r(10),i=r(12),o=r(64)(!1),a=r(35)(\"IE_PROTO\");t.exports=function(t,e){var r,u=i(t),s=0,c=[];for(r in u)r!=a&&n(u,r)&&c.push(r);for(;e.length>s;)n(u,r=e[s++])&&(~o(c,r)||c.push(r));return c}},function(t,e,r){var n=r(29),i=r(16),o=r(12),a=r(27),u=r(10),s=r(39),c=Object.getOwnPropertyDescriptor;e.f=r(4)?c:function(t,e){if(t=o(t),e=a(e,!0),s)try{return c(t,e)}catch(t){}if(u(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var i=r(79),o=n(i),a=r(81),u=n(a),s=\"function\"==typeof u.default&&\"symbol\"==typeof o.default?function(t){return typeof t}:function(t){return t&&\"function\"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?\"symbol\":typeof t};e.default=\"function\"==typeof u.default&&\"symbol\"===s(o.default)?function(t){return void 0===t?\"undefined\":s(t)}:function(t){return t&&\"function\"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?\"symbol\":void 0===t?\"undefined\":s(t)}},function(t,e,r){\"use strict\";var n=r(15),i=r(6),o=r(50),a=r(11),u=r(17),s=r(71),c=r(26),l=r(53),f=r(2)(\"iterator\"),h=!([].keys&&\"next\"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,v,y,m){s(r,e,d);var g,_,O,b=function(t){if(!h&&t in w)return w[t];switch(t){case\"keys\":case\"values\":return function(){return new r(this,t)}}return function(){return new r(this,t)}},E=e+\" Iterator\",P=\"values\"==v,S=!1,w=t.prototype,R=w[f]||w[\"@@iterator\"]||v&&w[v],T=R||b(v),k=v?P?b(\"entries\"):T:void 0,M=\"Array\"==e?w.entries||R:R;if(M&&(O=l(M.call(new t)))!==Object.prototype&&O.next&&(c(O,E,!0),n||\"function\"==typeof O[f]||a(O,f,p)),P&&R&&\"values\"!==R.name&&(S=!0,T=function(){return R.call(this)}),n&&!m||!h&&!S&&w[f]||a(w,f,T),u[e]=T,u[E]=p,v)if(g={values:P?T:b(\"values\"),keys:y?T:b(\"keys\"),entries:k},m)for(_ in g)_ in w||o(w,_,g[_]);else i(i.P+i.F*(h||S),e,g);return g}},function(t,e,r){var n=r(31),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){t.exports=r(11)},function(t,e,r){\"use strict\";function n(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError(\"Bad Promise constructor\");e=t,r=n}),this.resolve=i(e),this.reject=i(r)}var i=r(24);t.exports.f=function(t){return new n(t)}},function(t,e,r){\"use strict\";var n=r(70)(!0);r(48)(String,\"String\",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){var n=r(10),i=r(32),o=r(35)(\"IE_PROTO\"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,o)?t[o]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,r){r(73);for(var n=r(1),i=r(11),o=r(17),a=r(2)(\"toStringTag\"),u=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),s=0;s<u.length;s++){var c=u[s],l=n[c],f=l&&l.prototype;f&&!f[a]&&i(f,a,c),o[c]=o.Array}},function(t,e,r){var n=r(21);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==n(t)?t.split(\"\"):Object(t)}},function(t,e,r){var n=r(1).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(45),i=r(37).concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){t.exports={default:r(76),__esModule:!0}},function(t,e,r){t.exports={default:r(61),__esModule:!0}},function(t,e){},function(t,e,r){r(62);var n=r(0).Object;t.exports=function(t,e,r){return n.defineProperty(t,e,r)}},function(t,e,r){var n=r(6);n(n.S+n.F*!r(4),\"Object\",{defineProperty:r(8).f})},function(t,e,r){var n=r(21),i=r(2)(\"toStringTag\"),o=\"Arguments\"==n(function(){return arguments}()),a=function(t,e){try{return t[e]}catch(t){}};t.exports=function(t){var e,r,u;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(r=a(e=Object(t),i))?r:o?n(e):\"Object\"==(u=n(e))&&\"function\"==typeof e.callee?\"Arguments\":u}},function(t,e,r){var n=r(12),i=r(49),o=r(65);t.exports=function(t){return function(e,r,a){var u,s=n(e),c=i(s.length),l=o(a,c);if(t&&r!=r){for(;c>l;)if((u=s[l++])!=u)return!0}else for(;c>l;l++)if((t||l in s)&&s[l]===r)return t||l||0;return!t&&-1}}},function(t,e,r){var n=r(31),i=Math.max,o=Math.min;t.exports=function(t,e){return t=n(t),t<0?i(t+e,0):o(t,e)}},function(t,e,r){var n=r(9),i=r(24),o=r(2)(\"species\");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||void 0==(r=n(a)[o])?e:i(r)}},function(t,e,r){var n,i,o,a=r(14),u=r(108),s=r(56),c=r(28),l=r(1),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,y=0,m={},g=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},_=function(t){g.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return m[++y]=function(){u(\"function\"==typeof t?t:Function(t),e)},n(y),y},p=function(t){delete m[t]},\"process\"==r(21)(f)?n=function(t){f.nextTick(a(g,t,1))}:v&&v.now?n=function(t){v.now(a(g,t,1))}:d?(i=new d,o=i.port2,i.port1.onmessage=_,n=a(o.postMessage,o,1)):l.addEventListener&&\"function\"==typeof postMessage&&!l.importScripts?(n=function(t){l.postMessage(t+\"\",\"*\")},l.addEventListener(\"message\",_,!1)):n=\"onreadystatechange\"in c(\"script\")?function(t){s.appendChild(c(\"script\")).onreadystatechange=function(){s.removeChild(this),g.call(t)}}:function(t){setTimeout(a(g,t,1),0)}),t.exports={set:h,clear:p}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(9),i=r(7),o=r(51);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=o.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var n=r(31),i=r(30);t.exports=function(t){return function(e,r){var o,a,u=String(i(e)),s=n(r),c=u.length;return s<0||s>=c?t?\"\":void 0:(o=u.charCodeAt(s),o<55296||o>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):o:t?u.slice(s,s+2):a-56320+(o-55296<<10)+65536)}}},function(t,e,r){\"use strict\";var n=r(38),i=r(16),o=r(26),a={};r(11)(a,r(2)(\"iterator\"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(a,{next:i(1,r)}),o(t,e+\" Iterator\")}},function(t,e,r){var n=r(8),i=r(9),o=r(20);t.exports=r(4)?Object.defineProperties:function(t,e){i(t);for(var r,a=o(e),u=a.length,s=0;u>s;)n.f(t,r=a[s++],e[r]);return t}},function(t,e,r){\"use strict\";var n=r(74),i=r(75),o=r(17),a=r(12);t.exports=r(48)(Array,\"Array\",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):\"keys\"==e?i(0,r):\"values\"==e?i(0,t[r]):i(0,[r,t[r]])},\"values\"),o.Arguments=o.Array,n(\"keys\"),n(\"values\"),n(\"entries\")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){var n=r(0),i=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(t){return i.stringify.apply(i,arguments)}},function(t,e,r){var n=r(23)(\"meta\"),i=r(7),o=r(10),a=r(8).f,u=0,s=Object.isExtensible||function(){return!0},c=!r(13)(function(){return s(Object.preventExtensions({}))}),l=function(t){a(t,n,{value:{i:\"O\"+ ++u,w:{}}})},f=function(t,e){if(!i(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!o(t,n)){if(!s(t))return\"F\";if(!e)return\"E\";l(t)}return t[n].i},h=function(t,e){if(!o(t,n)){if(!s(t))return!0;if(!e)return!1;l(t)}return t[n].w},p=function(t){return c&&d.NEED&&s(t)&&!o(t,n)&&l(t),t},d=t.exports={KEY:n,NEED:!1,fastKey:f,getWeak:h,onFreeze:p}},,function(t,e,r){t.exports={default:r(80),__esModule:!0}},function(t,e,r){r(52),r(54),t.exports=r(40).f(\"iterator\")},function(t,e,r){t.exports={default:r(82),__esModule:!0}},function(t,e,r){r(83),r(60),r(87),r(88),t.exports=r(0).Symbol},function(t,e,r){\"use strict\";var n=r(1),i=r(10),o=r(4),a=r(6),u=r(50),s=r(77).KEY,c=r(13),l=r(36),f=r(26),h=r(23),p=r(2),d=r(40),v=r(41),y=r(84),m=r(85),g=r(9),_=r(7),O=r(12),b=r(27),E=r(16),P=r(38),S=r(86),w=r(46),R=r(8),T=r(20),k=w.f,M=R.f,x=S.f,C=n.Symbol,j=n.JSON,A=j&&j.stringify,N=p(\"_hidden\"),I=p(\"toPrimitive\"),U={}.propertyIsEnumerable,L=l(\"symbol-registry\"),D=l(\"symbols\"),F=l(\"op-symbols\"),H=Object.prototype,Y=\"function\"==typeof C,B=n.QObject,K=!B||!B.prototype||!B.prototype.findChild,G=o&&c(function(){return 7!=P(M({},\"a\",{get:function(){return M(this,\"a\",{value:7}).a}})).a})?function(t,e,r){var n=k(H,e);n&&delete H[e],M(t,e,r),n&&t!==H&&M(H,e,n)}:M,J=function(t){var e=D[t]=P(C.prototype);return e._k=t,e},W=Y&&\"symbol\"==typeof C.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof C},V=function(t,e,r){return t===H&&V(F,e,r),g(t),e=b(e,!0),g(r),i(D,e)?(r.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),r=P(r,{enumerable:E(0,!1)})):(i(t,N)||M(t,N,E(1,{})),t[N][e]=!0),G(t,e,r)):M(t,e,r)},q=function(t,e){g(t);for(var r,n=y(e=O(e)),i=0,o=n.length;o>i;)V(t,r=n[i++],e[r]);return t},z=function(t,e){return void 0===e?P(t):q(P(t),e)},X=function(t){var e=U.call(this,t=b(t,!0));return!(this===H&&i(D,t)&&!i(F,t))&&(!(e||!i(this,t)||!i(D,t)||i(this,N)&&this[N][t])||e)},$=function(t,e){if(t=O(t),e=b(e,!0),t!==H||!i(D,e)||i(F,e)){var r=k(t,e);return!r||!i(D,e)||i(t,N)&&t[N][e]||(r.enumerable=!0),r}},Q=function(t){for(var e,r=x(O(t)),n=[],o=0;r.length>o;)i(D,e=r[o++])||e==N||e==s||n.push(e);return n},Z=function(t){for(var e,r=t===H,n=x(r?F:O(t)),o=[],a=0;n.length>a;)!i(D,e=n[a++])||r&&!i(H,e)||o.push(D[e]);return o};Y||(C=function(){if(this instanceof C)throw TypeError(\"Symbol is not a constructor!\");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===H&&e.call(F,r),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),G(this,t,E(1,r))};return o&&K&&G(H,t,{configurable:!0,set:e}),J(t)},u(C.prototype,\"toString\",function(){return this._k}),w.f=$,R.f=V,r(57).f=S.f=Q,r(29).f=X,r(43).f=Z,o&&!r(15)&&u(H,\"propertyIsEnumerable\",X,!0),d.f=function(t){return J(p(t))}),a(a.G+a.W+a.F*!Y,{Symbol:C});for(var tt=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),et=0;tt.length>et;)p(tt[et++]);for(var rt=T(p.store),nt=0;rt.length>nt;)v(rt[nt++]);a(a.S+a.F*!Y,\"Symbol\",{for:function(t){return i(L,t+=\"\")?L[t]:L[t]=C(t)},keyFor:function(t){if(!W(t))throw TypeError(t+\" is not a symbol!\");for(var e in L)if(L[e]===t)return e},useSetter:function(){K=!0},useSimple:function(){K=!1}}),a(a.S+a.F*!Y,\"Object\",{create:z,defineProperty:V,defineProperties:q,getOwnPropertyDescriptor:$,getOwnPropertyNames:Q,getOwnPropertySymbols:Z}),j&&a(a.S+a.F*(!Y||c(function(){var t=C();return\"[null]\"!=A([t])||\"{}\"!=A({a:t})||\"{}\"!=A(Object(t))})),\"JSON\",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(_(e)||void 0!==t)&&!W(t))return m(e)||(e=function(t,e){if(\"function\"==typeof r&&(e=r.call(this,t,e)),!W(e))return e}),n[1]=e,A.apply(j,n)}}),C.prototype[I]||r(11)(C.prototype,I,C.prototype.valueOf),f(C,\"Symbol\"),f(Math,\"Math\",!0),f(n.JSON,\"JSON\",!0)},function(t,e,r){var n=r(20),i=r(43),o=r(29);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var a,u=r(t),s=o.f,c=0;u.length>c;)s.call(t,a=u[c++])&&e.push(a);return e}},function(t,e,r){var n=r(21);t.exports=Array.isArray||function(t){return\"Array\"==n(t)}},function(t,e,r){var n=r(12),i=r(57).f,o={}.toString,a=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],u=function(t){try{return i(t)}catch(t){return a.slice()}};t.exports.f=function(t){return a&&\"[object Window]\"==o.call(t)?u(t):i(n(t))}},function(t,e,r){r(41)(\"asyncIterator\")},function(t,e,r){r(41)(\"observable\")},,,function(t,e,r){r(92),t.exports=r(0).Object.getPrototypeOf},function(t,e,r){var n=r(32),i=r(53);r(44)(\"getPrototypeOf\",function(){return function(t){return i(n(t))}})},function(t,e,r){t.exports={default:r(94),__esModule:!0}},function(t,e,r){r(95),t.exports=r(0).Object.setPrototypeOf},function(t,e,r){var n=r(6);n(n.S,\"Object\",{setPrototypeOf:r(96).set})},function(t,e,r){var n=r(7),i=r(9),o=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,n){try{n=r(14)(Function.call,r(46).f(Object.prototype,\"__proto__\").set,2),n(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return o(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:o}},function(t,e,r){t.exports={default:r(98),__esModule:!0}},function(t,e,r){r(99);var n=r(0).Object;t.exports=function(t,e){return n.create(t,e)}},function(t,e,r){var n=r(6);n(n.S,\"Object\",{create:r(38)})},,function(t,e,r){var n=r(63),i=r(2)(\"iterator\"),o=r(17);t.exports=r(0).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t[\"@@iterator\"]||o[n(t)]}},function(t,e,r){r(60),r(52),r(54),r(103),r(114),r(115),t.exports=r(0).Promise},function(t,e,r){\"use strict\";var n,i,o,a,u=r(15),s=r(1),c=r(14),l=r(63),f=r(6),h=r(7),p=r(24),d=r(104),v=r(105),y=r(66),m=r(67).set,g=r(109)(),_=r(51),O=r(68),b=r(110),E=r(69),P=s.TypeError,S=s.process,w=S&&S.versions,R=w&&w.v8||\"\",T=s.Promise,k=\"process\"==l(S),M=function(){},x=i=_.f,C=!!function(){try{var t=T.resolve(1),e=(t.constructor={})[r(2)(\"species\")]=function(t){t(M,M)};return(k||\"function\"==typeof PromiseRejectionEvent)&&t.then(M)instanceof e&&0!==R.indexOf(\"6.6\")&&-1===b.indexOf(\"Chrome/66\")}catch(t){}}(),j=function(t){var e;return!(!h(t)||\"function\"!=typeof(e=t.then))&&e},A=function(t,e){if(!t._n){t._n=!0;var r=t._c;g(function(){for(var n=t._v,i=1==t._s,o=0;r.length>o;)!function(e){var r,o,a,u=i?e.ok:e.fail,s=e.resolve,c=e.reject,l=e.domain;try{u?(i||(2==t._h&&U(t),t._h=1),!0===u?r=n:(l&&l.enter(),r=u(n),l&&(l.exit(),a=!0)),r===e.promise?c(P(\"Promise-chain cycle\")):(o=j(r))?o.call(r,s,c):s(r)):c(n)}catch(t){l&&!a&&l.exit(),c(t)}}(r[o++]);t._c=[],t._n=!1,e&&!t._h&&N(t)})}},N=function(t){m.call(s,function(){var e,r,n,i=t._v,o=I(t);if(o&&(e=O(function(){k?S.emit(\"unhandledRejection\",i,t):(r=s.onunhandledrejection)?r({promise:t,reason:i}):(n=s.console)&&n.error&&n.error(\"Unhandled promise rejection\",i)}),t._h=k||I(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},I=function(t){return 1!==t._h&&0===(t._a||t._c).length},U=function(t){m.call(s,function(){var e;k?S.emit(\"rejectionHandled\",t):(e=s.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,e=e._w||e,e._v=t,e._s=2,e._a||(e._a=e._c.slice()),A(e,!0))},D=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw P(\"Promise can't be resolved itself\");(e=j(t))?g(function(){var n={_w:r,_d:!1};try{e.call(t,c(D,n,1),c(L,n,1))}catch(t){L.call(n,t)}}):(r._v=t,r._s=1,A(r,!1))}catch(t){L.call({_w:r,_d:!1},t)}}};C||(T=function(t){d(this,T,\"Promise\",\"_h\"),p(t),n.call(this);try{t(c(D,this,1),c(L,this,1))}catch(t){L.call(this,t)}},n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},n.prototype=r(111)(T.prototype,{then:function(t,e){var r=x(y(this,T));return r.ok=\"function\"!=typeof t||t,r.fail=\"function\"==typeof e&&e,r.domain=k?S.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&A(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n;this.promise=t,this.resolve=c(D,t,1),this.reject=c(L,t,1)},_.f=x=function(t){return t===T||t===a?new o(t):i(t)}),f(f.G+f.W+f.F*!C,{Promise:T}),r(26)(T,\"Promise\"),r(112)(\"Promise\"),a=r(0).Promise,f(f.S+f.F*!C,\"Promise\",{reject:function(t){var e=x(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(u||!C),\"Promise\",{resolve:function(t){return E(u&&this===a?T:this,t)}}),f(f.S+f.F*!(C&&r(113)(function(t){T.all(t).catch(M)})),\"Promise\",{all:function(t){var e=this,r=x(e),n=r.resolve,i=r.reject,o=O(function(){var r=[],o=0,a=1;v(t,!1,function(t){var u=o++,s=!1;r.push(void 0),a++,e.resolve(t).then(function(t){s||(s=!0,r[u]=t,--a||n(r))},i)}),--a||n(r)});return o.e&&i(o.v),r.promise},race:function(t){var e=this,r=x(e),n=r.reject,i=O(function(){v(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return i.e&&n(i.v),r.promise}})},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+\": incorrect invocation!\");return t}},function(t,e,r){var n=r(14),i=r(106),o=r(107),a=r(9),u=r(49),s=r(101),c={},l={},e=t.exports=function(t,e,r,f,h){var p,d,v,y,m=h?function(){return t}:s(t),g=n(r,f,e?2:1),_=0;if(\"function\"!=typeof m)throw TypeError(t+\" is not iterable!\");if(o(m)){for(p=u(t.length);p>_;_++)if((y=e?g(a(d=t[_])[0],d[1]):g(t[_]))===c||y===l)return y}else for(v=m.call(t);!(d=v.next()).done;)if((y=i(v,g,d.value,e))===c||y===l)return y};e.BREAK=c,e.RETURN=l},function(t,e,r){var n=r(9);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},function(t,e,r){var n=r(17),i=r(2)(\"iterator\"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||o[i]===t)}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(1),i=r(67).set,o=n.MutationObserver||n.WebKitMutationObserver,a=n.process,u=n.Promise,s=\"process\"==r(21)(a);t.exports=function(){var t,e,r,c=function(){var n,i;for(s&&(n=a.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(s)r=function(){a.nextTick(c)};else if(!o||n.navigator&&n.navigator.standalone)if(u&&u.resolve){var l=u.resolve(void 0);r=function(){l.then(c)}}else r=function(){i.call(n,c)};else{var f=!0,h=document.createTextNode(\"\");new o(c).observe(h,{characterData:!0}),r=function(){h.data=f=!f}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},function(t,e,r){var n=r(1),i=n.navigator;t.exports=i&&i.userAgent||\"\"},function(t,e,r){var n=r(11);t.exports=function(t,e,r){for(var i in e)r&&t[i]?t[i]=e[i]:n(t,i,e[i]);return t}},function(t,e,r){\"use strict\";var n=r(1),i=r(0),o=r(8),a=r(4),u=r(2)(\"species\");t.exports=function(t){var e=\"function\"==typeof i[t]?i[t]:n[t];a&&e&&!e[u]&&o.f(e,u,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(2)(\"iterator\"),i=!1;try{var o=[7][n]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o=[7],a=o[n]();a.next=function(){return{done:r=!0}},o[n]=function(){return a},t(o)}catch(t){}return r}},function(t,e,r){\"use strict\";var n=r(6),i=r(0),o=r(1),a=r(66),u=r(69);n(n.P+n.R,\"Promise\",{finally:function(t){var e=a(this,i.Promise||o.Promise),r=\"function\"==typeof t;return this.then(r?function(r){return u(e,t()).then(function(){return r})}:t,r?function(r){return u(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){\"use strict\";var n=r(6),i=r(51),o=r(68);n(n.S,\"Promise\",{try:function(t){var e=i.f(this),r=o(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0}),e.DataObjectSourceLanguage=e.CatalogueObjectType=void 0;var i=r(25),o=n(i),a=r(3),u=n(a),s=r(5),c=n(s),l=r(33),f=n(l),h=r(34),p=n(h),d=r(136),v=n(d),y=function(t){function e(t,r,n,i,a,s,c){(0,u.default)(this,e);var l=(0,f.default)(this,(e.__proto__||(0,o.default)(e)).call(this));return l._guid=t,l._type=r,l._version=n,l._objectName=i,l._description=a,l._language=s,l._sourcePackageURL=c,l._signature=null,l._sourcePackage=null,l}return(0,p.default)(e,t),(0,c.default)(e,[{key:\"guid\",get:function(){return this._guid},set:function(t){t&&(this._guid=t)}},{key:\"type\",get:function(){return this._type},set:function(t){t&&(this._type=t)}},{key:\"version\",get:function(){return this._version},set:function(t){t&&(this._version=t)}},{key:\"objectName\",get:function(){return this._objectName},set:function(t){t&&(this._objectName=t)}},{key:\"description\",get:function(){return this._description},set:function(t){t&&(this._description=t)}},{key:\"language\",get:function(){return this._language},set:function(t){t&&(this._language=t)}},{key:\"signature\",get:function(){return this._signature},set:function(t){t&&(this._signature=t)}},{key:\"sourcePackage\",get:function(){return this._sourcePackage},set:function(t){t&&(this._sourcePackage=t)}},{key:\"sourcePackageURL\",get:function(){return this._sourcePackageURL},set:function(t){t&&(this._sourcePackageURL=t)}}]),e}(v.default);e.CatalogueObjectType={HYPERTY:\"hyperty\",PROTOSTUB:\"protostub\",HYPERTY_RUNTIME:\"hyperty_runtime\",HYPERTY_INTERCEPTOR:\"hyperty_inspector\",HYPERTY_DATA_OBJECT:\"hyperty_data_object\"},e.DataObjectSourceLanguage={JAVASCRIPT_ECMA6:\"javascript_ecma6\",JAVASCRIPT_ECMA5:\"javascript_ecma5\",JSON_SCHEMA_V4:\"json_schema_v4\",PYTHON:\"python\",TYPESCRIPT:\"typescript\"};e.default=y},,,,,,,,,,,,,,,,,,,,function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0}),e.RethinkObject=void 0;var i=r(58),o=n(i),a=r(3),u=n(a),s=r(5),c=n(s),l=r(137),f=n(l),h=e.RethinkObject=function(){function t(){(0,u.default)(this,t)}return(0,c.default)(t,[{key:\"validate\",value:function(t){f.default.addSchema(t.id,t);var e=f.default.validateMultiple(JSON.parse((0,o.default)(this)),t);return e.errors.forEach(function(t){delete t.stack}),(!e.valid||e.missing.length>0)&&(console.warn(\"Object validation \"+(e.valid?\"succeeded, but schema contained references:\":\"failed:\"),(0,o.default)(e,null,2)),console.log(\"Object:\",(0,o.default)(this,null,2))),e.valid}}]),t}();e.default=h},function(t,e,r){var n,i,o;!function(r,a){i=[],n=a,void 0!==(o=\"function\"==typeof n?n.apply(e,i):n)&&(t.exports=o)}(0,function(){function t(t){return encodeURI(t).replace(/%25[0-9][0-9]/g,function(t){return\"%\"+t.substring(3)})}function e(e){var r=\"\";h[e.charAt(0)]&&(r=e.charAt(0),e=e.substring(1));var n=\"\",i=\"\",o=!0,a=!1,u=!1;\"+\"===r?o=!1:\".\"===r?(i=\".\",n=\".\"):\"/\"===r?(i=\"/\",n=\"/\"):\"#\"===r?(i=\"#\",o=!1):\";\"===r?(i=\";\",n=\";\",a=!0,u=!0):\"?\"===r?(i=\"?\",n=\"&\",a=!0):\"&\"===r&&(i=\"&\",n=\"&\",a=!0);for(var s=[],c=e.split(\",\"),l=[],f={},d=0;d<c.length;d++){var v=c[d],y=null;if(-1!==v.indexOf(\":\")){var m=v.split(\":\");v=m[0],y=parseInt(m[1],10)}for(var g={};p[v.charAt(v.length-1)];)g[v.charAt(v.length-1)]=!0,v=v.substring(0,v.length-1);var _={truncate:y,name:v,suffices:g};l.push(_),f[v]=_,s.push(v)}var O=function(e){for(var r=\"\",s=0,c=0;c<l.length;c++){var f=l[c],h=e(f.name);if(null===h||void 0===h||Array.isArray(h)&&0===h.length||\"object\"==typeof h&&0===Object.keys(h).length)s++;else if(r+=c===s?i:n||\",\",Array.isArray(h)){a&&(r+=f.name+\"=\");for(var p=0;p<h.length;p++)p>0&&(r+=f.suffices[\"*\"]?n||\",\":\",\",f.suffices[\"*\"]&&a&&(r+=f.name+\"=\")),r+=o?encodeURIComponent(h[p]).replace(/!/g,\"%21\"):t(h[p])}else if(\"object\"==typeof h){a&&!f.suffices[\"*\"]&&(r+=f.name+\"=\");var d=!0;for(var v in h)d||(r+=f.suffices[\"*\"]?n||\",\":\",\"),d=!1,r+=o?encodeURIComponent(v).replace(/!/g,\"%21\"):t(v),r+=f.suffices[\"*\"]?\"=\":\",\",r+=o?encodeURIComponent(h[v]).replace(/!/g,\"%21\"):t(h[v])}else a&&(r+=f.name,u&&\"\"===h||(r+=\"=\")),null!=f.truncate&&(h=h.substring(0,f.truncate)),r+=o?encodeURIComponent(h).replace(/!/g,\"%21\"):t(h)}return r};return O.varNames=s,{prefix:i,substitution:O}}function r(t){if(!(this instanceof r))return new r(t);for(var n=t.split(\"{\"),i=[n.shift()],o=[],a=[],u=[];n.length>0;){var s=n.shift(),c=s.split(\"}\")[0],l=s.substring(c.length+1),f=e(c);a.push(f.substitution),o.push(f.prefix),i.push(l),u=u.concat(f.substitution.varNames)}this.fill=function(t){for(var e=i[0],r=0;r<a.length;r++){e+=(0,a[r])(t),e+=i[r+1]}return e},this.varNames=u,this.template=t}function n(t,e){if(t===e)return!0;if(t&&e&&\"object\"==typeof t&&\"object\"==typeof e){if(Array.isArray(t)!==Array.isArray(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;for(var r=0;r<t.length;r++)if(!n(t[r],e[r]))return!1}else{var i;for(i in t)if(void 0===e[i]&&void 0!==t[i])return!1;for(i in e)if(void 0===t[i]&&void 0!==e[i])return!1;for(i in t)if(!n(t[i],e[i]))return!1}return!0}return!1}function i(t){var e=String(t).replace(/^\\s+|\\s+$/g,\"\").match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);return e?{href:e[0]||\"\",protocol:e[1]||\"\",authority:e[2]||\"\",host:e[3]||\"\",hostname:e[4]||\"\",port:e[5]||\"\",pathname:e[6]||\"\",search:e[7]||\"\",hash:e[8]||\"\"}:null}function o(t,e){return e=i(e||\"\"),t=i(t||\"\"),e&&t?(e.protocol||t.protocol)+(e.protocol||e.authority?e.authority:t.authority)+function(t){var e=[];return t.replace(/^(\\.\\.?(\\/|$))+/,\"\").replace(/\\/(\\.(\\/|$))+/g,\"/\").replace(/\\/\\.\\.$/,\"/../\").replace(/\\/?[^\\/]*/g,function(t){\"/..\"===t?e.pop():e.push(t)}),e.join(\"\").replace(/^\\//,\"/\"===t.charAt(0)?\"/\":\"\")}(e.protocol||e.authority||\"/\"===e.pathname.charAt(0)?e.pathname:e.pathname?(t.authority&&!t.pathname?\"/\":\"\")+t.pathname.slice(0,t.pathname.lastIndexOf(\"/\")+1)+e.pathname:t.pathname)+(e.protocol||e.authority||e.pathname?e.search:e.search||t.search)+e.hash:null}function a(t){return t.split(\"#\")[0]}function u(t,e){if(t&&\"object\"==typeof t)if(void 0===e?e=t.id:\"string\"==typeof t.id&&(e=o(e,t.id),t.id=e),Array.isArray(t))for(var r=0;r<t.length;r++)u(t[r],e);else{\"string\"==typeof t.$ref&&(t.$ref=o(e,t.$ref));for(var n in t)\"enum\"!==n&&u(t[n],e)}}function s(t){t=t||\"en\";var e=b[t];return function(t){var r=e[t.code]||O[t.code];if(\"string\"!=typeof r)return\"Unknown error code \"+t.code+\": \"+JSON.stringify(t.messageParams);var n=t.params;return r.replace(/\\{([^{}]*)\\}/g,function(t,e){var r=n[e];return\"string\"==typeof r||\"number\"==typeof r?r:t})}}function c(t,e,r,n,i){if(Error.call(this),void 0===t)throw new Error(\"No error code supplied: \"+n);this.message=\"\",this.params=e,this.code=t,this.dataPath=r||\"\",this.schemaPath=n||\"\",this.subErrors=i||null;var o=new Error(this.message);if(this.stack=o.stack||o.stacktrace,!this.stack)try{throw o}catch(o){this.stack=o.stack||o.stacktrace}}function l(t,e){if(e.substring(0,t.length)===t){var r=e.substring(t.length);if(e.length>0&&\"/\"===e.charAt(t.length-1)||\"#\"===r.charAt(0)||\"?\"===r.charAt(0))return!0}return!1}function f(t){var e,r,n=new d,i={setErrorReporter:function(t){return\"string\"==typeof t?this.language(t):(r=t,!0)},addFormat:function(){n.addFormat.apply(n,arguments)},language:function(t){return t?(b[t]||(t=t.split(\"-\")[0]),!!b[t]&&(e=t,t)):e},addLanguage:function(t,e){var r;for(r in m)e[r]&&!e[m[r]]&&(e[m[r]]=e[r]);var n=t.split(\"-\")[0];if(b[n]){b[t]=Object.create(b[n]);for(r in e)void 0===b[n][r]&&(b[n][r]=e[r]),b[t][r]=e[r]}else b[t]=e,b[n]=e;return this},freshApi:function(t){var e=f();return t&&e.language(t),e},validate:function(t,i,o,a){var u=s(e),c=r?function(t,e,n){return r(t,e,n)||u(t,e,n)}:u,l=new d(n,!1,c,o,a);\"string\"==typeof i&&(i={$ref:i}),l.addSchema(\"\",i);var f=l.validateAll(t,i,null,null,\"\");return!f&&a&&(f=l.banUnknownProperties(t,i)),this.error=f,this.missing=l.missing,this.valid=null===f,this.valid},validateResult:function(){var t={toString:function(){return this.valid?\"valid\":this.error.message}};return this.validate.apply(t,arguments),t},validateMultiple:function(t,i,o,a){var u=s(e),c=r?function(t,e,n){return r(t,e,n)||u(t,e,n)}:u,l=new d(n,!0,c,o,a);\"string\"==typeof i&&(i={$ref:i}),l.addSchema(\"\",i),l.validateAll(t,i,null,null,\"\"),a&&l.banUnknownProperties(t,i);var f={toString:function(){return this.valid?\"valid\":this.error.message}};return f.errors=l.errors,f.missing=l.missing,f.valid=0===f.errors.length,f},addSchema:function(){return n.addSchema.apply(n,arguments)},getSchema:function(){return n.getSchema.apply(n,arguments)},getSchemaMap:function(){return n.getSchemaMap.apply(n,arguments)},getSchemaUris:function(){return n.getSchemaUris.apply(n,arguments)},getMissingUris:function(){return n.getMissingUris.apply(n,arguments)},dropSchemas:function(){n.dropSchemas.apply(n,arguments)},defineKeyword:function(){n.defineKeyword.apply(n,arguments)},defineError:function(t,e,r){if(\"string\"!=typeof t||!/^[A-Z]+(_[A-Z]+)*$/.test(t))throw new Error(\"Code name must be a string in UPPER_CASE_WITH_UNDERSCORES\");if(\"number\"!=typeof e||e%1!=0||e<1e4)throw new Error(\"Code number must be an integer > 10000\");if(void 0!==m[t])throw new Error(\"Error already defined: \"+t+\" as \"+m[t]);if(void 0!==g[e])throw new Error(\"Error code already used: \"+g[e]+\" as \"+e);m[t]=e,g[e]=t,O[t]=O[e]=r;for(var n in b){var i=b[n];i[t]&&(i[e]=i[e]||i[t])}},reset:function(){n.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:u,resolveUrl:o,getDocumentUri:a,errorCodes:m};return i.language(t||\"en\"),i}Object.keys||(Object.keys=function(){var t=Object.prototype.hasOwnProperty,e=!{toString:null}.propertyIsEnumerable(\"toString\"),r=[\"toString\",\"toLocaleString\",\"valueOf\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"constructor\"],n=r.length;return function(i){if(\"object\"!=typeof i&&\"function\"!=typeof i||null===i)throw new TypeError(\"Object.keys called on non-object\");var o=[];for(var a in i)t.call(i,a)&&o.push(a);if(e)for(var u=0;u<n;u++)t.call(i,r[u])&&o.push(r[u]);return o}}()),Object.create||(Object.create=function(){function t(){}return function(e){if(1!==arguments.length)throw new Error(\"Object.create implementation only accepts one parameter.\");return t.prototype=e,new t}}()),Array.isArray||(Array.isArray=function(t){return\"[object Array]\"===Object.prototype.toString.call(t)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){if(null===this)throw new TypeError;var e=Object(this),r=e.length>>>0;if(0===r)return-1;var n=0;if(arguments.length>1&&(n=Number(arguments[1]),n!==n?n=0:0!==n&&n!==1/0&&n!==-1/0&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return-1;for(var i=n>=0?n:Math.max(r-Math.abs(n),0);i<r;i++)if(i in e&&e[i]===t)return i;return-1}),Object.isFrozen||(Object.isFrozen=function(t){for(var e=\"tv4_test_frozen_key\";t.hasOwnProperty(e);)e+=Math.random();try{return t[e]=!0,delete t[e],!1}catch(t){return!0}});var h={\"+\":!0,\"#\":!0,\".\":!0,\"/\":!0,\";\":!0,\"?\":!0,\"&\":!0},p={\"*\":!0};r.prototype={toString:function(){return this.template},fillFromObject:function(t){return this.fill(function(e){return t[e]})}};var d=function(t,e,r,n,i){if(this.missing=[],this.missingMap={},this.formatValidators=t?Object.create(t.formatValidators):{},this.schemas=t?Object.create(t.schemas):{},this.collectMultiple=e,this.errors=[],this.handleError=e?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey=\"tv4_validation_id\",this.validationErrorsKey=\"tv4_validation_errors_id\"),i&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||s(\"en\"),\"string\"==typeof this.errorReporter)throw new Error(\"debug\");if(this.definedKeywords={},t)for(var o in t.definedKeywords)this.definedKeywords[o]=t.definedKeywords[o].slice(0)};d.prototype.defineKeyword=function(t,e){this.definedKeywords[t]=this.definedKeywords[t]||[],this.definedKeywords[t].push(e)},d.prototype.createError=function(t,e,r,n,i,o,a){var u=new c(t,e,r,n,i);return u.message=this.errorReporter(u,o,a),u},d.prototype.returnError=function(t){return t},d.prototype.collectError=function(t){return t&&this.errors.push(t),null},d.prototype.prefixErrors=function(t,e,r){for(var n=t;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(e,r);return this},d.prototype.banUnknownProperties=function(t,e){for(var r in this.unknownPropertyPaths){var n=this.createError(m.UNKNOWN_PROPERTY,{path:r},r,\"\",null,t,e),i=this.handleError(n);if(i)return i}return null},d.prototype.addFormat=function(t,e){if(\"object\"==typeof t){for(var r in t)this.addFormat(r,t[r]);return this}this.formatValidators[t]=e},d.prototype.resolveRefs=function(t,e){if(void 0!==t.$ref){if(e=e||{},e[t.$ref])return this.createError(m.CIRCULAR_REFERENCE,{urls:Object.keys(e).join(\", \")},\"\",\"\",null,void 0,t);e[t.$ref]=!0,t=this.getSchema(t.$ref,e)}return t},d.prototype.getSchema=function(t,e){var r;if(void 0!==this.schemas[t])return r=this.schemas[t],this.resolveRefs(r,e);var n=t,i=\"\";if(-1!==t.indexOf(\"#\")&&(i=t.substring(t.indexOf(\"#\")+1),n=t.substring(0,t.indexOf(\"#\"))),\"object\"==typeof this.schemas[n]){r=this.schemas[n];var o=decodeURIComponent(i);if(\"\"===o)return this.resolveRefs(r,e);if(\"/\"!==o.charAt(0))return;for(var a=o.split(\"/\").slice(1),u=0;u<a.length;u++){var s=a[u].replace(/~1/g,\"/\").replace(/~0/g,\"~\");if(void 0===r[s]){r=void 0;break}r=r[s]}if(void 0!==r)return this.resolveRefs(r,e)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n)},d.prototype.searchSchemas=function(t,e){if(Array.isArray(t))for(var r=0;r<t.length;r++)this.searchSchemas(t[r],e);else if(t&&\"object\"==typeof t){\"string\"==typeof t.id&&l(e,t.id)&&void 0===this.schemas[t.id]&&(this.schemas[t.id]=t);for(var n in t)if(\"enum\"!==n)if(\"object\"==typeof t[n])this.searchSchemas(t[n],e);else if(\"$ref\"===n){var i=a(t[n]);i&&void 0===this.schemas[i]&&void 0===this.missingMap[i]&&(this.missingMap[i]=i)}}},d.prototype.addSchema=function(t,e){if(\"string\"!=typeof t||void 0===e){if(\"object\"!=typeof t||\"string\"!=typeof t.id)return;e=t,t=e.id}t===a(t)+\"#\"&&(t=a(t)),this.schemas[t]=e,delete this.missingMap[t],u(e,t),this.searchSchemas(e,t)},d.prototype.getSchemaMap=function(){var t={};for(var e in this.schemas)t[e]=this.schemas[e];return t},d.prototype.getSchemaUris=function(t){var e=[];for(var r in this.schemas)t&&!t.test(r)||e.push(r);return e},d.prototype.getMissingUris=function(t){var e=[];for(var r in this.missingMap)t&&!t.test(r)||e.push(r);return e},d.prototype.dropSchemas=function(){this.schemas={},this.reset()},d.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},d.prototype.validateAll=function(t,e,r,n,i){var o;if(!(e=this.resolveRefs(e)))return null;if(e instanceof c)return this.errors.push(e),e;var a,u=this.errors.length,s=null,l=null;if(this.checkRecursive&&t&&\"object\"==typeof t){if(o=!this.scanned.length,t[this.validatedSchemasKey]){var f=t[this.validatedSchemasKey].indexOf(e);if(-1!==f)return this.errors=this.errors.concat(t[this.validationErrorsKey][f]),null}if(Object.isFrozen(t)&&-1!==(a=this.scannedFrozen.indexOf(t))){var h=this.scannedFrozenSchemas[a].indexOf(e);if(-1!==h)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[a][h]),null}if(this.scanned.push(t),Object.isFrozen(t))-1===a&&(a=this.scannedFrozen.length,this.scannedFrozen.push(t),this.scannedFrozenSchemas.push([])),s=this.scannedFrozenSchemas[a].length,this.scannedFrozenSchemas[a][s]=e,this.scannedFrozenValidationErrors[a][s]=[];else{if(!t[this.validatedSchemasKey])try{Object.defineProperty(t,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(t,this.validationErrorsKey,{value:[],configurable:!0})}catch(e){t[this.validatedSchemasKey]=[],t[this.validationErrorsKey]=[]}l=t[this.validatedSchemasKey].length,t[this.validatedSchemasKey][l]=e,t[this.validationErrorsKey][l]=[]}}var p=this.errors.length,d=this.validateBasic(t,e,i)||this.validateNumeric(t,e,i)||this.validateString(t,e,i)||this.validateArray(t,e,i)||this.validateObject(t,e,i)||this.validateCombinations(t,e,i)||this.validateHypermedia(t,e,i)||this.validateFormat(t,e,i)||this.validateDefinedKeywords(t,e,i)||null;if(o){for(;this.scanned.length;){delete this.scanned.pop()[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(d||p!==this.errors.length)for(;r&&r.length||n&&n.length;){var v=r&&r.length?\"\"+r.pop():null,y=n&&n.length?\"\"+n.pop():null;d&&(d=d.prefixWith(v,y)),this.prefixErrors(p,v,y)}return null!==s?this.scannedFrozenValidationErrors[a][s]=this.errors.slice(u):null!==l&&(t[this.validationErrorsKey][l]=this.errors.slice(u)),this.handleError(d)},d.prototype.validateFormat=function(t,e){if(\"string\"!=typeof e.format||!this.formatValidators[e.format])return null;var r=this.formatValidators[e.format].call(null,t,e);return\"string\"==typeof r||\"number\"==typeof r?this.createError(m.FORMAT_CUSTOM,{message:r},\"\",\"/format\",null,t,e):r&&\"object\"==typeof r?this.createError(m.FORMAT_CUSTOM,{message:r.message||\"?\"},r.dataPath||\"\",r.schemaPath||\"/format\",null,t,e):null},d.prototype.validateDefinedKeywords=function(t,e,r){for(var n in this.definedKeywords)if(void 0!==e[n])for(var i=this.definedKeywords[n],o=0;o<i.length;o++){var a=i[o],u=a(t,e[n],e,r);if(\"string\"==typeof u||\"number\"==typeof u)return this.createError(m.KEYWORD_CUSTOM,{key:n,message:u},\"\",\"\",null,t,e).prefixWith(null,n);if(u&&\"object\"==typeof u){var s=u.code;if(\"string\"==typeof s){if(!m[s])throw new Error(\"Undefined error code (use defineError): \"+s);s=m[s]}else\"number\"!=typeof s&&(s=m.KEYWORD_CUSTOM);var c=\"object\"==typeof u.message?u.message:{key:n,message:u.message||\"?\"},l=u.schemaPath||\"/\"+n.replace(/~/g,\"~0\").replace(/\\//g,\"~1\");return this.createError(s,c,u.dataPath||null,l,null,t,e)}}return null},d.prototype.validateBasic=function(t,e,r){var n;return(n=this.validateType(t,e,r))?n.prefixWith(null,\"type\"):(n=this.validateEnum(t,e,r))?n.prefixWith(null,\"type\"):null},d.prototype.validateType=function(t,e){if(void 0===e.type)return null;var r=typeof t;null===t?r=\"null\":Array.isArray(t)&&(r=\"array\");var n=e.type;Array.isArray(n)||(n=[n]);for(var i=0;i<n.length;i++){var o=n[i];if(o===r||\"integer\"===o&&\"number\"===r&&t%1==0)return null}return this.createError(m.INVALID_TYPE,{type:r,expected:n.join(\"/\")},\"\",\"\",null,t,e)},d.prototype.validateEnum=function(t,e){if(void 0===e.enum)return null;for(var r=0;r<e.enum.length;r++){if(n(t,e.enum[r]))return null}return this.createError(m.ENUM_MISMATCH,{value:\"undefined\"!=typeof JSON?JSON.stringify(t):t},\"\",\"\",null,t,e)},d.prototype.validateNumeric=function(t,e,r){return this.validateMultipleOf(t,e,r)||this.validateMinMax(t,e,r)||this.validateNaN(t,e,r)||null};var v=Math.pow(2,-51),y=1-v;d.prototype.validateMultipleOf=function(t,e){var r=e.multipleOf||e.divisibleBy;if(void 0===r)return null;if(\"number\"==typeof t){var n=t/r%1;if(n>=v&&n<y)return this.createError(m.NUMBER_MULTIPLE_OF,{value:t,multipleOf:r},\"\",\"\",null,t,e)}return null},d.prototype.validateMinMax=function(t,e){if(\"number\"!=typeof t)return null;if(void 0!==e.minimum){if(t<e.minimum)return this.createError(m.NUMBER_MINIMUM,{value:t,minimum:e.minimum},\"\",\"/minimum\",null,t,e);if(e.exclusiveMinimum&&t===e.minimum)return this.createError(m.NUMBER_MINIMUM_EXCLUSIVE,{value:t,minimum:e.minimum},\"\",\"/exclusiveMinimum\",null,t,e)}if(void 0!==e.maximum){if(t>e.maximum)return this.createError(m.NUMBER_MAXIMUM,{value:t,maximum:e.maximum},\"\",\"/maximum\",null,t,e);if(e.exclusiveMaximum&&t===e.maximum)return this.createError(m.NUMBER_MAXIMUM_EXCLUSIVE,{value:t,maximum:e.maximum},\"\",\"/exclusiveMaximum\",null,t,e)}return null},d.prototype.validateNaN=function(t,e){return\"number\"!=typeof t?null:!0===isNaN(t)||t===1/0||t===-1/0?this.createError(m.NUMBER_NOT_A_NUMBER,{value:t},\"\",\"/type\",null,t,e):null},d.prototype.validateString=function(t,e,r){return this.validateStringLength(t,e,r)||this.validateStringPattern(t,e,r)||null},d.prototype.validateStringLength=function(t,e){return\"string\"!=typeof t?null:void 0!==e.minLength&&t.length<e.minLength?this.createError(m.STRING_LENGTH_SHORT,{length:t.length,minimum:e.minLength},\"\",\"/minLength\",null,t,e):void 0!==e.maxLength&&t.length>e.maxLength?this.createError(m.STRING_LENGTH_LONG,{length:t.length,maximum:e.maxLength},\"\",\"/maxLength\",null,t,e):null},d.prototype.validateStringPattern=function(t,e){if(\"string\"!=typeof t||\"string\"!=typeof e.pattern&&!(e.pattern instanceof RegExp))return null;var r;if(e.pattern instanceof RegExp)r=e.pattern;else{var n,i=\"\",o=e.pattern.match(/^\\/(.+)\\/([img]*)$/);o?(n=o[1],i=o[2]):n=e.pattern,r=new RegExp(n,i)}return r.test(t)?null:this.createError(m.STRING_PATTERN,{pattern:e.pattern},\"\",\"/pattern\",null,t,e)},d.prototype.validateArray=function(t,e,r){return Array.isArray(t)?this.validateArrayLength(t,e,r)||this.validateArrayUniqueItems(t,e,r)||this.validateArrayItems(t,e,r)||null:null},d.prototype.validateArrayLength=function(t,e){var r;return void 0!==e.minItems&&t.length<e.minItems&&(r=this.createError(m.ARRAY_LENGTH_SHORT,{length:t.length,minimum:e.minItems},\"\",\"/minItems\",null,t,e),this.handleError(r))?r:void 0!==e.maxItems&&t.length>e.maxItems&&(r=this.createError(m.ARRAY_LENGTH_LONG,{length:t.length,maximum:e.maxItems},\"\",\"/maxItems\",null,t,e),this.handleError(r))?r:null},d.prototype.validateArrayUniqueItems=function(t,e){if(e.uniqueItems)for(var r=0;r<t.length;r++)for(var i=r+1;i<t.length;i++)if(n(t[r],t[i])){var o=this.createError(m.ARRAY_UNIQUE,{match1:r,match2:i},\"\",\"/uniqueItems\",null,t,e);if(this.handleError(o))return o}return null},d.prototype.validateArrayItems=function(t,e,r){if(void 0===e.items)return null;var n,i;if(Array.isArray(e.items)){for(i=0;i<t.length;i++)if(i<e.items.length){if(n=this.validateAll(t[i],e.items[i],[i],[\"items\",i],r+\"/\"+i))return n}else if(void 0!==e.additionalItems)if(\"boolean\"==typeof e.additionalItems){if(!e.additionalItems&&(n=this.createError(m.ARRAY_ADDITIONAL_ITEMS,{},\"/\"+i,\"/additionalItems\",null,t,e),this.handleError(n)))return n}else if(n=this.validateAll(t[i],e.additionalItems,[i],[\"additionalItems\"],r+\"/\"+i))return n}else for(i=0;i<t.length;i++)if(n=this.validateAll(t[i],e.items,[i],[\"items\"],r+\"/\"+i))return n;return null},d.prototype.validateObject=function(t,e,r){return\"object\"!=typeof t||null===t||Array.isArray(t)?null:this.validateObjectMinMaxProperties(t,e,r)||this.validateObjectRequiredProperties(t,e,r)||this.validateObjectProperties(t,e,r)||this.validateObjectDependencies(t,e,r)||null},d.prototype.validateObjectMinMaxProperties=function(t,e){var r,n=Object.keys(t);return void 0!==e.minProperties&&n.length<e.minProperties&&(r=this.createError(m.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:e.minProperties},\"\",\"/minProperties\",null,t,e),this.handleError(r))?r:void 0!==e.maxProperties&&n.length>e.maxProperties&&(r=this.createError(m.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:e.maxProperties},\"\",\"/maxProperties\",null,t,e),this.handleError(r))?r:null},d.prototype.validateObjectRequiredProperties=function(t,e){if(void 0!==e.required)for(var r=0;r<e.required.length;r++){var n=e.required[r];if(void 0===t[n]){var i=this.createError(m.OBJECT_REQUIRED,{key:n},\"\",\"/required/\"+r,null,t,e);if(this.handleError(i))return i}}return null},d.prototype.validateObjectProperties=function(t,e,r){var n;for(var i in t){var o=r+\"/\"+i.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),a=!1;if(void 0!==e.properties&&void 0!==e.properties[i]&&(a=!0,n=this.validateAll(t[i],e.properties[i],[i],[\"properties\",i],o)))return n;if(void 0!==e.patternProperties)for(var u in e.patternProperties){var s=new RegExp(u);if(s.test(i)&&(a=!0,n=this.validateAll(t[i],e.patternProperties[u],[i],[\"patternProperties\",u],o)))return n}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[o]=!0,delete this.unknownPropertyPaths[o]);else if(void 0!==e.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[o]=!0,delete this.unknownPropertyPaths[o]),\"boolean\"==typeof e.additionalProperties){if(!e.additionalProperties&&(n=this.createError(m.OBJECT_ADDITIONAL_PROPERTIES,{key:i},\"\",\"/additionalProperties\",null,t,e).prefixWith(i,null),this.handleError(n)))return n}else if(n=this.validateAll(t[i],e.additionalProperties,[i],[\"additionalProperties\"],o))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[o]&&(this.unknownPropertyPaths[o]=!0)}return null},d.prototype.validateObjectDependencies=function(t,e,r){var n;if(void 0!==e.dependencies)for(var i in e.dependencies)if(void 0!==t[i]){var o=e.dependencies[i];if(\"string\"==typeof o){if(void 0===t[o]&&(n=this.createError(m.OBJECT_DEPENDENCY_KEY,{key:i,missing:o},\"\",\"\",null,t,e).prefixWith(null,i).prefixWith(null,\"dependencies\"),this.handleError(n)))return n}else if(Array.isArray(o))for(var a=0;a<o.length;a++){var u=o[a];if(void 0===t[u]&&(n=this.createError(m.OBJECT_DEPENDENCY_KEY,{key:i,missing:u},\"\",\"/\"+a,null,t,e).prefixWith(null,i).prefixWith(null,\"dependencies\"),this.handleError(n)))return n}else if(n=this.validateAll(t,o,[],[\"dependencies\",i],r))return n}return null},d.prototype.validateCombinations=function(t,e,r){return this.validateAllOf(t,e,r)||this.validateAnyOf(t,e,r)||this.validateOneOf(t,e,r)||this.validateNot(t,e,r)||null},d.prototype.validateAllOf=function(t,e,r){if(void 0===e.allOf)return null;for(var n,i=0;i<e.allOf.length;i++){var o=e.allOf[i];if(n=this.validateAll(t,o,[],[\"allOf\",i],r))return n}return null},d.prototype.validateAnyOf=function(t,e,r){if(void 0===e.anyOf)return null;var n,i,o=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,i=this.knownPropertyPaths);for(var u=!0,s=0;s<e.anyOf.length;s++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=e.anyOf[s],l=this.errors.length,f=this.validateAll(t,c,[],[\"anyOf\",s],r);if(null===f&&l===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var h in this.knownPropertyPaths)i[h]=!0,delete n[h];for(var p in this.unknownPropertyPaths)i[p]||(n[p]=!0);u=!1;continue}return null}f&&o.push(f.prefixWith(null,\"\"+s).prefixWith(null,\"anyOf\"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=i),u?(o=o.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(m.ANY_OF_MISSING,{},\"\",\"/anyOf\",o,t,e)):void 0},d.prototype.validateOneOf=function(t,e,r){if(void 0===e.oneOf)return null;var n,i,o=null,a=[],u=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,i=this.knownPropertyPaths);for(var s=0;s<e.oneOf.length;s++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=e.oneOf[s],l=this.errors.length,f=this.validateAll(t,c,[],[\"oneOf\",s],r);if(null===f&&l===this.errors.length){if(null!==o)return this.errors=this.errors.slice(0,u),this.createError(m.ONE_OF_MULTIPLE,{index1:o,index2:s},\"\",\"/oneOf\",null,t,e);if(o=s,this.trackUnknownProperties){for(var h in this.knownPropertyPaths)i[h]=!0,delete n[h];for(var p in this.unknownPropertyPaths)i[p]||(n[p]=!0)}}else f&&a.push(f)}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=i),null===o?(a=a.concat(this.errors.slice(u)),this.errors=this.errors.slice(0,u),this.createError(m.ONE_OF_MISSING,{},\"\",\"/oneOf\",a,t,e)):(this.errors=this.errors.slice(0,u),null)},d.prototype.validateNot=function(t,e,r){if(void 0===e.not)return null;var n,i,o=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,i=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(t,e.not,null,null,r),u=this.errors.slice(o);return this.errors=this.errors.slice(0,o),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=i),null===a&&0===u.length?this.createError(m.NOT_PASSED,{},\"\",\"/not\",null,t,e):null},d.prototype.validateHypermedia=function(t,e,n){if(!e.links)return null;for(var i,o=0;o<e.links.length;o++){var a=e.links[o];if(\"describedby\"===a.rel){for(var u=new r(a.href),s=!0,c=0;c<u.varNames.length;c++)if(!(u.varNames[c]in t)){s=!1;break}if(s){var l=u.fillFromObject(t),f={$ref:l};if(i=this.validateAll(t,f,[],[\"links\",o],n))return i}}}};var m={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},g={};for(var _ in m)g[m[_]]=_;var O={INVALID_TYPE:\"Invalid type: {type} (expected {expected})\",ENUM_MISMATCH:\"No enum match for: {value}\",ANY_OF_MISSING:'Data does not match any schemas from \"anyOf\"',ONE_OF_MISSING:'Data does not match any schemas from \"oneOf\"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from \"not\"',NUMBER_MULTIPLE_OF:\"Value {value} is not a multiple of {multipleOf}\",NUMBER_MINIMUM:\"Value {value} is less than minimum {minimum}\",NUMBER_MINIMUM_EXCLUSIVE:\"Value {value} is equal to exclusive minimum {minimum}\",NUMBER_MAXIMUM:\"Value {value} is greater than maximum {maximum}\",NUMBER_MAXIMUM_EXCLUSIVE:\"Value {value} is equal to exclusive maximum {maximum}\",NUMBER_NOT_A_NUMBER:\"Value {value} is not a valid number\",STRING_LENGTH_SHORT:\"String is too short ({length} chars), minimum {minimum}\",STRING_LENGTH_LONG:\"String is too long ({length} chars), maximum {maximum}\",STRING_PATTERN:\"String does not match pattern: {pattern}\",OBJECT_PROPERTIES_MINIMUM:\"Too few properties defined ({propertyCount}), minimum {minimum}\",OBJECT_PROPERTIES_MAXIMUM:\"Too many properties defined ({propertyCount}), maximum {maximum}\",OBJECT_REQUIRED:\"Missing required property: {key}\",OBJECT_ADDITIONAL_PROPERTIES:\"Additional properties not allowed\",OBJECT_DEPENDENCY_KEY:\"Dependency failed - key must exist: {missing} (due to key: {key})\",ARRAY_LENGTH_SHORT:\"Array is too short ({length}), minimum {minimum}\",ARRAY_LENGTH_LONG:\"Array is too long ({length}), maximum {maximum}\",ARRAY_UNIQUE:\"Array items are not unique (indices {match1} and {match2})\",ARRAY_ADDITIONAL_ITEMS:\"Additional items not allowed\",FORMAT_CUSTOM:\"Format validation failed ({message})\",KEYWORD_CUSTOM:\"Keyword failed: {key} ({message})\",CIRCULAR_REFERENCE:\"Circular $refs: {urls}\",UNKNOWN_PROPERTY:\"Unknown property (not in schema)\"};c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,c.prototype.name=\"ValidationError\",c.prototype.prefixWith=function(t,e){if(null!==t&&(t=t.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),this.dataPath=\"/\"+t+this.dataPath),null!==e&&(e=e.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),this.schemaPath=\"/\"+e+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(t,e);return this};var b={},E=f();return E.addLanguage(\"en-gb\",O),E.tv4=E,E})},,,function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var i=r(3),o=n(i),a=r(5),u=n(a),s=function(){function t(e,r){(0,o.default)(this,t),this._sourceCode=r,this._sourceCodeClassname=e,this._encoding=null,this._signature=null}return(0,u.default)(t,[{key:\"sourceCode\",get:function(){return this._sourceCode},set:function(t){t&&(this._sourceCode=t)}},{key:\"sourceCodeClassname\",get:function(){return this._sourceCodeClassname},set:function(t){t&&(this._sourceCodeClassname=t)}},{key:\"encoding\",get:function(){return this._encoding},set:function(t){t&&(this._encoding=t)}},{key:\"signature\",get:function(){return this._signature},set:function(t){t&&(this._signature=t)}}]),t}();e.default=s,t.exports=e.default},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0}),e.HypertyResourceType=e.HypertyType=e.RuntimeHypertyCapabilityType=void 0;var i=r(25),o=n(i),a=r(3),u=n(a),s=r(5),c=n(s),l=r(33),f=n(l),h=r(34),p=n(h),d=r(116),v=n(d),y=function(t){function e(t,r,n,i,a,s,c,l,h){(0,u.default)(this,e);var p=(0,f.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,c));return p._configuration={},p._constraints={},p._policies={},p._messageSchema=null,p._hypertyType=l,p._dataObjects=h,p}return(0,p.default)(e,t),(0,c.default)(e,[{key:\"hypertyType\",get:function(){return this._hypertyType},set:function(t){t&&(this._hypertyType=t)}},{key:\"dataObjects\",get:function(){return this._dataObjects},set:function(t){t&&(this._dataObjects=t)}},{key:\"configuration\",get:function(){return this._configuration},set:function(t){t&&(this._configuration=t)}},{key:\"constraints\",get:function(){return this._constraints},set:function(t){t&&(this._constraints=t)}},{key:\"messageSchema\",get:function(){return this._messageSchema},set:function(t){t&&(this._messageSchema=t)}},{key:\"policies\",get:function(){return this._policies},set:function(t){t&&(this._policies=t)}}]),e}(v.default);e.RuntimeHypertyCapabilityType={},e.HypertyType={COMMUNICATOR:\"communicator\",IDENTITY:\"identity\",CONTEXT:\"context\"},e.HypertyResourceType={chat:\"CHAT\",audio:\"Audio\",video:\"Video\",av:\"AV\",screen:\"SCREEN\",file:\"FILe\",midi:\"MIDI\"};e.default=y},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var i=r(25),o=n(i),a=r(3),u=n(a),s=r(5),c=n(s),l=r(33),f=n(l),h=r(34),p=n(h),d=r(116),v=n(d),y=function(t){function e(t,r,n,i,a,s,c,l,h,p,d,v,y,m,g){(0,u.default)(this,e);var _=(0,f.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,c));return _._messageSchemas=l,_._configuration=h||{},_._constraints=p||{},_._hypertyType=d,_._dataObjects=v||[],_._interworking=y,_._idpProxy=m,_._mutualAuthentication=g,_}return(0,p.default)(e,t),(0,c.default)(e,[{key:\"messageSchemas\",get:function(){return this._messageSchemas},set:function(t){t&&(this._messageSchemas=t)}},{key:\"constraints\",get:function(){return this._constraints},set:function(t){t&&(this._constraints=t)}},{key:\"configuration\",get:function(){return this._configuration},set:function(t){t&&(this._configuration=t)}},{key:\"hypertyType\",get:function(){return this._hypertyType},set:function(t){this._hypertyType=t}},{key:\"dataObjects\",get:function(){return this._dataObjects},set:function(t){this._dataObjects=t}},{key:\"interworking\",get:function(){return this._interworking},set:function(t){this._interworking=t}},{key:\"idpProxy\",get:function(){return this._idpProxy},set:function(t){this._idpProxy=t}},{key:\"mutualAuthentication\",get:function(){return this._mutualAuthentication},set:function(t){this._mutualAuthentication=t}}]),e}(v.default);e.default=y,t.exports=e.default},,function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var i=r(3),o=n(i),a=r(5),u=n(a),s=r(116),c=n(s),l=r(140),f=n(l),h=r(141),p=n(h),d=r(142),v=n(d),y=r(145),m=n(y),g=r(146),_=n(g),O=r(147),b=function(){function t(){(0,o.default)(this,t)}return(0,u.default)(t,[{key:\"createCatalogueDataObject\",value:function(t,e,r,n,i,o,a){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o||void 0===a)throw new Error(\"Invalid parameters!\");return new c.default(t,e,r,n,i,o,a)}},{key:\"createHypertyDescriptorObject\",value:function(t,e,r,n,i,o,a,u){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o||void 0===a||void 0===u)throw new Error(\"Invalid parameters!\");return new p.default(t,s.CatalogueObjectType.HYPERTY,e,r,n,i,o,a,u)}},{key:\"createProtoStubDescriptorObject\",value:function(t,e,r,n,i,o,a,u,c,l,f,h,p,d){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o||void 0===a||void 0===u||void 0===c)throw new Error(\"Invalid parameters!\");return new v.default(t,s.CatalogueObjectType.PROTOSTUB,e,r,n,i,o,a,u,c,l,f,h,p,d)}},{key:\"createHypertyRuntimeDescriptorObject\",value:function(t,e,r,n,i,o,a,u,c,l,f){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o||void 0===a)throw new Error(\"Invalid parameters!\");return new m.default(t,s.CatalogueObjectType.HYPERTY_RUNTIME,e,r,n,i,o,a,u,c,l,f)}},{key:\"createHypertyInterceptorDescriptorObject\",value:function(t,e,r,n,i,o,a,u){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o)throw new Error(\"Invalid parameters!\");return new _.default(t,s.CatalogueObjectType.HYPERTY_INTERCEPTOR,e,r,n,i,o,a,u)}},{key:\"createDataObjectSchema\",value:function(t,e,r,n,i,o){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o)throw new Error(\"Invalid parameters!\");return new O.DataObjectSchema(t,s.CatalogueObjectType.HYPERTY_DATA_OBJECT,e,r,n,i,o)}},{key:\"createMessageDataObjectSchema\",value:function(t,e,r,n,i,o){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o)throw new Error(\"Invalid parameters!\");return new O.DataObjectSchema(t,s.CatalogueObjectType.HYPERTY_DATA_OBJECT,e,r,n,i,o)}},{key:\"createHypertyDataObjectSchema\",value:function(t,e,r,n,i,o,a,u){if(void 0===t||void 0===e||void 0===r||void 0===n||void 0===i||void 0===o||void 0===u||void 0===a)throw new Error(\"Invalid parameters!\");return u===O.DataUrlScheme.COMM?new O.CommunicationDataObjectSchema(t,s.CatalogueObjectType.HYPERTY_DATA_OBJECT,e,r,n,i,o,u,a):u===O.DataUrlScheme.CONNECTION?new O.ConnectionDataObjectSchema(t,s.CatalogueObjectType.HYPERTY_DATA_OBJECT,e,r,n,i,o,u,a):u===O.DataUrlScheme.CTXT?new O.ContextDataObjectSchema(t,s.CatalogueObjectType.HYPERTY_DATA_OBJECT,e,r,n,i,o,u,a):u===O.DataUrlScheme.IDENTITY?new O.IdentityDataObjectSchema(t,s.CatalogueObjectType.HYPERTY_DATA_OBJECT,e,r,n,i,o,u,a):void 0}},{key:\"createSourcePackage\",value:function(t,e){if(void 0===e||void 0===t)throw new Error(\"Invalid parameters!\");return new f.default(t,e)}}]),t}();e.default=b,t.exports=e.default},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0}),e.RuntimeType=e.RuntimeProtocolCapability=e.RuntimeHypertyCapability=void 0;var i=r(58),o=n(i),a=r(25),u=n(a),s=r(3),c=n(s),l=r(5),f=n(l),h=r(33),p=n(h),d=r(34),v=n(d),y=r(116),m=n(y),g=function(t){function e(t,r,n,i,o,a,s,l,f,h,d,v){(0,c.default)(this,e);var y=(0,p.default)(this,(e.__proto__||(0,u.default)(e)).call(this,t,r,n,i,o,a,s));return y._runtimeType=l,y._hypertyCapabilities=f||new _(!0,!1,!1,!1,!1),y._protocolCapabilities=h||new O(!0,!1,!0,!1,!1,!1),y._p2pHandlerStub=d,y._p2pRequesterStub=v,y}return(0,v.default)(e,t),(0,f.default)(e,[{key:\"runtimeType\",get:function(){return this._runtimeType},set:function(t){t&&(this._runtimeType=t)}},{key:\"hypertyCapabilities\",get:function(){return this._hypertyCapabilities},set:function(t){t&&(this._hypertyCapabilities=t)}},{key:\"protocolCapabilities\",get:function(){return this._hypertyCapabilities},set:function(t){t&&(this._protocolCapabilities=t)}},{key:\"p2pHandlerStub\",get:function(){return this._p2pHandlerStub},set:function(t){this._p2pHandlerStub=t}},{key:\"p2pRequesterStub\",get:function(){return this._p2pRequesterStub},set:function(t){this._p2pRequesterStub=t}}]),e}(m.default),_=e.RuntimeHypertyCapability=function(){function t(e,r,n,i,o){(0,c.default)(this,t),this._isWebRTC=e,this._isMic=r,this._isCamera=n,this._isSensor=i,this._isORTC=o}return(0,f.default)(t,[{key:\"getCapabilitySet\",value:function(){return(0,o.default)(this)}},{key:\"isMic\",get:function(){return this._isMic}},{key:\"isCamera\",get:function(){return this._isCamera}},{key:\"isSensor\",get:function(){return this._isSensor}},{key:\"isWebRTC\",get:function(){return this._isWebRTC}},{key:\"isORTCS\",get:function(){return this._isORTC}}]),t}(),O=e.RuntimeProtocolCapability=function(){function t(e,r,n,i,o,a){(0,c.default)(this,t),this._isHttp=e,this._isHttps=r,this._isWS=n,this._isWSS=i,this._isCoap=o,this._isDataChannel=a}return(0,f.default)(t,[{key:\"isHttp\",value:function(){return this._isHttp}},{key:\"isHttps\",value:function(){return this._isHttps}},{key:\"isWS\",value:function(){return this._isWS}},{key:\"isSensorSupported\",value:function(){return this._isSensor}},{key:\"isWSS\",value:function(){return this._isWSS}},{key:\"isCoap\",value:function(){return this._isCoap}},{key:\"isDataChannel\",value:function(){return this._isDataChannel}},{key:\"getCapabilitySet\",value:function(){return(0,o.default)(this)}}]),t}();e.RuntimeType={BROWSER:\"browser\",STANDALONE:\"standalone\",SERVER:\"server\",GATEWAY:\"gateway\"};e.default=g},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var i=r(25),o=n(i),a=r(3),u=n(a),s=r(5),c=n(s),l=r(33),f=n(l),h=r(34),p=n(h),d=r(116),v=n(d),y=function(t){function e(t,r,n,i,a,s,c,l,h){(0,u.default)(this,e);var p=(0,f.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,c));return p._configuration=l,p._policies=h,p}return(0,p.default)(e,t),(0,c.default)(e,[{key:\"configuration\",get:function(){return this._configuration},set:function(t){this._configuration=t}},{key:\"policies\",get:function(){return this._policies},set:function(t){this._policies=t}}]),e}(v.default);e.default=y,t.exports=e.default},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0}),e.DataUrlScheme=e.ContextDataObjectSchema=e.IdentityDataObjectSchema=e.ConnectionDataObjectSchema=e.CommunicationDataObjectSchema=e.HypertyDataObjectSchema=e.MessageDataObjectSchema=e.DataObjectSchema=void 0;var i=r(25),o=n(i),a=r(3),u=n(a),s=r(33),c=n(s),l=r(34),f=n(l),h=r(116),p=n(h),d=e.DataObjectSchema=function(t){function e(t,r,n,i,a,s,l){return(0,u.default)(this,e),(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l))}return(0,f.default)(e,t),e}(p.default),v=(e.MessageDataObjectSchema=function(t){function e(t,r,n,i,a,s,l){return(0,u.default)(this,e),(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l))}return(0,f.default)(e,t),e}(d),e.HypertyDataObjectSchema=function(t){function e(t,r,n,i,a,s,l,f,h){(0,u.default)(this,e);var p=(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l));return p._accessControlPolicy=f,p._scheme=h,p}return(0,f.default)(e,t),e}(d));e.CommunicationDataObjectSchema=function(t){function e(t,r,n,i,a,s,l,f){return(0,u.default)(this,e),(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l,f))}return(0,f.default)(e,t),e}(v),e.ConnectionDataObjectSchema=function(t){function e(t,r,n,i,a,s,l,f){return(0,u.default)(this,e),(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l,f))}return(0,f.default)(e,t),e}(v),e.IdentityDataObjectSchema=function(t){function e(t,r,n,i,a,s,l,f){return(0,u.default)(this,e),(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l,f))}return(0,f.default)(e,t),e}(v),e.ContextDataObjectSchema=function(t){function e(t,r,n,i,a,s,l,f){return(0,u.default)(this,e),(0,c.default)(this,(e.__proto__||(0,o.default)(e)).call(this,t,r,n,i,a,s,l,f))}return(0,f.default)(e,t),e}(v),e.DataUrlScheme={COMM:\"COMM\",CONNECTION:\"CONNECTION\",CTXT:\"CTXT\",IDENTITY:\"IDENTITY\"};e.default=d},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,r){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.RuntimeCatalogue=void 0;var n=r(22),i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}(n),o=r(186),a=function(t){return t&&t.__esModule?t:{default:t}}(o);i.getLogger(\"RuntimeCatalogue\").setLevel(0),e.RuntimeCatalogue=a.default},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var i=r(187),o=n(i),a=r(58),u=n(a),s=r(18),c=n(s),l=r(3),f=n(l),h=r(5),p=n(h),d=r(22),v=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}(d),y=r(144),m=n(y),g=v.getLogger(\"RuntimeCatalogue\"),_=function(){function t(e,r,n){if((0,f.default)(this,t),!e)throw Error(\"The catalogue needs the runtimeFactory\");this._factory=new m.default,this.httpRequest=e.createHttpRequest(),this.atob=e.atob?e.atob:atob;var i=r||\"runtimeCatalogue\",o=n||\"&cguid, accessControlPolicy, constraints, dataObjects, hypertyType, objectName, sourcePackage, version\",a={};a[i]=o,this.storageManager=e.storageManager(i,a)}return(0,p.default)(t,[{key:\"getDescriptor\",value:function(t,e){var r=this,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=arguments[3];g.info(\"[RuntimeCatalogue] - getting descriptor from: \",t,\" with constraints: \",i);var a=!1,s=!1,l=void 0;l=void 0!=i?c.default.all([this.httpRequest.post(t+\"/version\",{body:(0,u.default)(i)}),this.httpRequest.post(t+\"/cguid\",{body:(0,u.default)(i)})]):c.default.all([this.httpRequest.get(t+\"/version\"),this.httpRequest.get(t+\"/cguid\")]),l=l.then(function(e){var n=(0,o.default)(e,2),s=n[0],c=n[1];return g.info(\"[RuntimeCatalogue] - got version (\"+s+\") and cguid (\"+c+\") for descriptor \"+t),r.storageManager.getVersion(\"cguid\",c).then(function(e){return e>=s?(g.warn(\"storageManager contains saved version that is the same or newer than requested\"),a=!0,r.storageManager.get(\"cguid\",c)):(g.warn(\"storageManager does not contain saved version\"),(void 0!=i?r.httpRequest.post(t,{body:(0,u.default)(i)}):r.httpRequest.get(t)).then(function(t){if(t=JSON.parse(t),t.ERROR)throw new Error(t);return t}))})}).catch(function(e){var r=\"Unable to get descriptor for \"+t+(void 0!=i?\" with constraints \"+i:\"\")+\": \"+e;throw g.error(r),new Error(r)});var f=l;return n&&(g.log(\"adding promise to attach sourcePackage\"),f=l.then(function(t){return t.sourcePackage?(s=!0,t):(s=!1,r.attachRawSourcePackage(t))})),f=f.then(function(t){return(!a||a&&!s&&n)&&r.storageManager.set(t.cguid,t.version,t),e.apply(r,[t,i])})}},{key:\"attachRawSourcePackage\",value:function(t,e){var r=this;return g.log(\"attaching raw sourcePackage from:\",t.sourcePackageURL),new c.default(function(n,i){(void 0!=e?r.httpRequest.post(t.sourcePackageURL,{body:(0,u.default)(e)}):r.httpRequest.get(t.sourcePackageURL)).then(function(e){e=JSON.parse(e),t.sourcePackage=e,n(t)}).catch(function(t){i(t)})})}},{key:\"getHypertyDescriptor\",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments[2];return this.getDescriptor(t,this.createHyperty,e,r)}},{key:\"getStubDescriptor\",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments[2];return this.getDescriptor(t,this.createStub,e,r)}},{key:\"getRuntimeDescriptor\",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments[2];return this.getDescriptor(t,this.createRuntimeDescriptor,e,r)}},{key:\"getDataSchemaDescriptor\",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments[2];return this.getDescriptor(t,this.createDataSchema,e,r)}},{key:\"getIdpProxyDescriptor\",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments[2];return this.getDescriptor(t,this.createIdpProxy,e,r)}},{key:\"createHyperty\",value:function(t){var e=this._factory.createHypertyDescriptorObject(t.cguid,t.version,t.objectName,t.description,t.language,t.sourcePackageURL,t.type||t.hypertyType,t.dataObjects);e.configuration=t.configuration,e.constraints=t.constraints,e.messageSchema=t.messageSchema,e.policies=t.policies,e.signature=t.signature;var r=t.sourcePackage;return r&&(e.sourcePackage=this.createSourcePackage(r)),e}},{key:\"createStub\",value:function(t){var e=this._factory.createProtoStubDescriptorObject(t.cguid,t.version,t.objectName,t.description,t.language,t.sourcePackageURL,t.messageSchemas,t.configuration,t.constraints,t.hypertyType,t.dataObjects,t.interworking,t.idpProxy,t.mutualAuthentication);e.signature=t.signature;var r=t.sourcePackage;return r&&(e.sourcePackage=this.createSourcePackage(r)),e}},{key:\"createRuntimeDescriptor\",value:function(t){try{t.hypertyCapabilities=JSON.parse(t.hypertyCapabilities),t.protocolCapabilities=JSON.parse(t.protocolCapabilities)}catch(t){}var e=this._factory.createHypertyRuntimeDescriptorObject(t.cguid,t.version,t.objectName,t.description,t.language,t.sourcePackageURL,t.type||t.runtimeType,t.hypertyCapabilities,t.protocolCapabilities,t.p2pHandlerStub,t.p2pRequesterStub);e.signature=t.signature;var r=t.sourcePackage;return r&&(e.sourcePackage=this.createSourcePackage(r)),e}},{key:\"createDataSchema\",value:function(t){var e=void 0;e=t.accessControlPolicy&&t.scheme?this._factory.createHypertyDataObjectSchema(t.cguid,t.version,t.objectName,t.description,t.language,t.sourcePackageURL,t.accessControlPolicy,t.scheme):this._factory.createMessageDataObjectSchema(t.cguid,t.version,t.objectName,t.description,t.language,t.sourcePackageURL),e.signature=t.signature;var r=t.sourcePackage;if(r){e.sourcePackage=this.createSourcePackage(r);try{e.sourcePackage.sourceCode=JSON.parse(e.sourcePackage.sourceCode)}catch(t){g.log(\"DataSchema Source code is already parsed\")}return e}return e}},{key:\"createIdpProxy\",value:function(t){var e=this._factory.createProtoStubDescriptorObject(t.cguid,t.version,t.objectName,t.description,t.language,t.sourcePackageURL,t.messageSchemas,t.configuration,t.constraints,t.hypertyType,t.dataObjects,t.interworking,t.idpProxy,t.mutualAuthentication);e.signature=t.signature;var r=t.sourcePackage;return r&&(r=this.createSourcePackage(r),e.sourcePackage=r),e}},{key:\"createSourcePackage\",value:function(t){\"base64\"===t.encoding&&(t.sourceCode=this.atob(t.sourceCode),t.encoding=\"utf-8\");var e=this._factory.createSourcePackage(t.sourceCodeClassname,t.sourceCode);return t.encoding&&(e.encoding=t.encoding),t.signature&&(e.signature=t.signature),e}},{key:\"getSourcePackageFromURL\",value:function(t){var e=this;return g.log(\"getting sourcePackage from:\",t),new c.default(function(r,n){e.httpRequest.get(t).then(function(t){if(t.ERROR)n(t);else{t=JSON.parse(t);var i=e.createSourcePackage(t);r(i)}}).catch(function(t){n(t)})})}},{key:\"getSourceCodeFromDescriptor\",value:function(t){var e=this;return new c.default(function(r,n){t.sourcePackage?r(t.sourcePackage.sourceCode):e.storageManager.getVersion(t.sourcePackageURL+\"/sourceCode\").then(function(i){i>=t.version?(g.log(\"returning cached version from storageManager\"),e.storageManager.get(t.sourcePackageURL+\"/sourceCode\").then(function(t){r(t)}).catch(function(t){n(t)})):e.httpRequest.get(t.sourcePackageURL+\"/sourceCode\").then(function(i){i.ERROR?n(i):(e.storageManager.set(t.sourcePackageURL+\"/sourceCode\",t.version,i),r(i))}).catch(function(t){n(t)})}).catch(function(t){n(t)})})}},{key:\"getTypeList\",value:function(t,e){var r=this;return new c.default(function(n,i){(void 0!=e?r.httpRequest.post(t,{body:(0,u.default)(e)}):r.httpRequest.get(t)).then(function(t){t=JSON.parse(t),n(t)}).catch(function(t){i(t)})})}},{key:\"deleteFromPM\",value:function(t){return this.storageManager.delete(t)}},{key:\"runtimeURL\",set:function(t){this._runtimeURL=t},get:function(){return this._runtimeURL}}]),t}();e.default=_,t.exports=e.default},function(t,e,r){\"use strict\";function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var i=r(188),o=n(i),a=r(191),u=n(a);e.default=function(){function t(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=(0,u.default)(t);!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw o}}return r}return function(e,r){if(Array.isArray(e))return e;if((0,o.default)(Object(e)))return t(e,r);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}}()},function(t,e,r){t.exports={default:r(189),__esModule:!0}},function(t,e,r){r(54),r(52),t.exports=r(190)},function(t,e,r){var n=r(63),i=r(2)(\"iterator\"),o=r(17);t.exports=r(0).isIterable=function(t){var e=Object(t);return void 0!==e[i]||\"@@iterator\"in e||o.hasOwnProperty(n(e))}},function(t,e,r){t.exports={default:r(192),__esModule:!0}},function(t,e,r){r(54),r(52),t.exports=r(193)},function(t,e,r){var n=r(9),i=r(101);t.exports=r(0).getIterator=function(t){var e=i(t);if(\"function\"!=typeof e)throw TypeError(t+\" is not iterable!\");return n(e.call(t))}}])});","// version: 0.9.0\n// date: Wed Aug 01 2018 09:34:34 GMT+0100 (Western European Summer Time)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(\"StorageManager\",[],e):\"object\"==typeof exports?exports.StorageManager=e():(t[\"\"]=t[\"\"]||{},t[\"\"].StorageManager=e())}(\"undefined\"!=typeof self?self:this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,\"a\",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=153)}([function(t,e){var n=t.exports={version:\"2.5.7\"};\"number\"==typeof __e&&(__e=n)},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e,n){var r=n(36)(\"wks\"),o=n(23),i=n(1).Symbol,u=\"function\"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)(\"Symbol.\"+t))}).store=r},function(t,e,n){\"use strict\";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}},function(t,e,n){t.exports=!n(13)(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},function(t,e,n){\"use strict\";e.__esModule=!0;var r=n(59),o=function(t){return t&&t.__esModule?t:{default:t}}(r);e.default=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),(0,o.default)(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()},function(t,e,n){var r=n(1),o=n(0),i=n(14),u=n(11),f=n(10),c=function(t,e,n){var a,s,l,p=t&c.F,v=t&c.G,y=t&c.S,d=t&c.P,h=t&c.B,g=t&c.W,b=v?o:o[e]||(o[e]={}),m=b.prototype,w=v?r:y?r[e]:(r[e]||{}).prototype;v&&(n=e);for(a in n)(s=!p&&w&&void 0!==w[a])&&f(b,a)||(l=s?w[a]:n[a],b[a]=v&&\"function\"!=typeof w[a]?n[a]:h&&s?i(l,r):g&&w[a]==l?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(l):d&&\"function\"==typeof l?i(Function.call,l):l,d&&((b.virtual||(b.virtual={}))[a]=l,t&c.R&&m&&!m[a]&&u(m,a,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e,n){var r=n(9),o=n(39),i=n(27),u=Object.defineProperty;e.f=n(4)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(7);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(8),o=n(16);t.exports=n(4)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(55),o=n(30);t.exports=function(t){return r(o(t))}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(24);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=!0},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports={}},,,function(t,e,n){var r=n(45),o=n(37);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r,o;!function(i,u){\"use strict\";r=u,void 0!==(o=\"function\"==typeof r?r.call(e,n,e,t):r)&&(t.exports=o)}(0,function(){\"use strict\";function t(t,e){var n=t[e];if(\"function\"==typeof n.bind)return n.bind(t);try{return Function.prototype.bind.call(n,t)}catch(e){return function(){return Function.prototype.apply.apply(n,[t,arguments])}}}function e(e){return\"debug\"===e&&(e=\"log\"),typeof console!==f&&(void 0!==console[e]?t(console,e):void 0!==console.log?t(console,\"log\"):u)}function n(t,e){for(var n=0;n<c.length;n++){var r=c[n];this[r]=n<t?u:this.methodFactory(r,t,e)}this.log=this.debug}function r(t,e,r){return function(){typeof console!==f&&(n.call(this,e,r),this[t].apply(this,arguments))}}function o(t,n,o){return e(t)||r.apply(this,arguments)}function i(t,e,r){function i(t){var e=(c[t]||\"silent\").toUpperCase();if(typeof window!==f){try{return void(window.localStorage[l]=e)}catch(t){}try{window.document.cookie=encodeURIComponent(l)+\"=\"+e+\";\"}catch(t){}}}function u(){var t;if(typeof window!==f){try{t=window.localStorage[l]}catch(t){}if(typeof t===f)try{var e=window.document.cookie,n=e.indexOf(encodeURIComponent(l)+\"=\");-1!==n&&(t=/^([^;]+)/.exec(e.slice(n))[1])}catch(t){}return void 0===s.levels[t]&&(t=void 0),t}}var a,s=this,l=\"loglevel\";t&&(l+=\":\"+t),s.name=t,s.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},s.methodFactory=r||o,s.getLevel=function(){return a},s.setLevel=function(e,r){if(\"string\"==typeof e&&void 0!==s.levels[e.toUpperCase()]&&(e=s.levels[e.toUpperCase()]),!(\"number\"==typeof e&&e>=0&&e<=s.levels.SILENT))throw\"log.setLevel() called with invalid level: \"+e;if(a=e,!1!==r&&i(e),n.call(s,e,t),typeof console===f&&e<s.levels.SILENT)return\"No console available for logging\"},s.setDefaultLevel=function(t){u()||s.setLevel(t,!1)},s.enableAll=function(t){s.setLevel(s.levels.TRACE,t)},s.disableAll=function(t){s.setLevel(s.levels.SILENT,t)};var p=u();null==p&&(p=null==e?\"WARN\":e),s.setLevel(p,!1)}var u=function(){},f=\"undefined\",c=[\"trace\",\"debug\",\"info\",\"warn\",\"error\"],a=new i,s={};a.getLogger=function(t){if(\"string\"!=typeof t||\"\"===t)throw new TypeError(\"You must supply a name when creating a logger.\");var e=s[t];return e||(e=s[t]=new i(t,a.getLevel(),a.methodFactory)),e};var l=typeof window!==f?window.log:void 0;return a.noConflict=function(){return typeof window!==f&&window.log===a&&(window.log=l),a},a.getLoggers=function(){return s},a})},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},,function(t,e,n){var r=n(8).f,o=n(10),i=n(2)(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(7);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},function(t,e,n){var r=n(7),o=n(1).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(30);t.exports=function(t){return Object(r(t))}},,,function(t,e,n){var r=n(36)(\"keys\"),o=n(23);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(0),o=n(1),i=o[\"__core-js_shared__\"]||(o[\"__core-js_shared__\"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:r.version,mode:n(15)?\"pure\":\"global\",copyright:\"© 2018 Denis Pushkarev (zloirock.ru)\"})},function(t,e){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,e,n){var r=n(9),o=n(72),i=n(37),u=n(35)(\"IE_PROTO\"),f=function(){},c=function(){var t,e=n(28)(\"iframe\"),r=i.length;for(e.style.display=\"none\",n(56).appendChild(e),e.src=\"javascript:\",t=e.contentWindow.document,t.open(),t.write(\"<script>document.F=Object<\\/script>\"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=r(t),n=new f,f.prototype=null,n[u]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){t.exports=!n(4)&&!n(13)(function(){return 7!=Object.defineProperty(n(28)(\"div\"),\"a\",{get:function(){return 7}}).a})},function(t,e,n){e.f=n(2)},function(t,e,n){var r=n(1),o=n(0),i=n(15),u=n(40),f=n(8).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});\"_\"==t.charAt(0)||t in e||f(e,t,{value:u.f(t)})}},function(t,e,n){t.exports={default:n(89),__esModule:!0}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(6),o=n(0),i=n(13);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),\"Object\",u)}},function(t,e,n){var r=n(10),o=n(12),i=n(64)(!1),u=n(35)(\"IE_PROTO\");t.exports=function(t,e){var n,f=o(t),c=0,a=[];for(n in f)n!=u&&r(f,n)&&a.push(n);for(;e.length>c;)r(f,n=e[c++])&&(~i(a,n)||a.push(n));return a}},function(t,e,n){var r=n(29),o=n(16),i=n(12),u=n(27),f=n(10),c=n(39),a=Object.getOwnPropertyDescriptor;e.f=n(4)?a:function(t,e){if(t=i(t),e=u(e,!0),c)try{return a(t,e)}catch(t){}if(f(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var o=n(79),i=r(o),u=n(81),f=r(u),c=\"function\"==typeof f.default&&\"symbol\"==typeof i.default?function(t){return typeof t}:function(t){return t&&\"function\"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?\"symbol\":typeof t};e.default=\"function\"==typeof f.default&&\"symbol\"===c(i.default)?function(t){return void 0===t?\"undefined\":c(t)}:function(t){return t&&\"function\"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?\"symbol\":void 0===t?\"undefined\":c(t)}},function(t,e,n){\"use strict\";var r=n(15),o=n(6),i=n(50),u=n(11),f=n(17),c=n(71),a=n(26),s=n(53),l=n(2)(\"iterator\"),p=!([].keys&&\"next\"in[].keys()),v=function(){return this};t.exports=function(t,e,n,y,d,h,g){c(n,e,y);var b,m,w,O=function(t){if(!p&&t in j)return j[t];switch(t){case\"keys\":case\"values\":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+\" Iterator\",_=\"values\"==d,x=!1,j=t.prototype,P=j[l]||j[\"@@iterator\"]||d&&j[d],M=P||O(d),L=d?_?O(\"entries\"):M:void 0,T=\"Array\"==e?j.entries||P:P;if(T&&(w=s(T.call(new t)))!==Object.prototype&&w.next&&(a(w,S,!0),r||\"function\"==typeof w[l]||u(w,l,v)),_&&P&&\"values\"!==P.name&&(x=!0,M=function(){return P.call(this)}),r&&!g||!p&&!x&&j[l]||u(j,l,M),f[e]=M,f[S]=v,d)if(b={values:_?M:O(\"values\"),keys:h?M:O(\"keys\"),entries:L},g)for(m in b)m in j||i(j,m,b[m]);else o(o.P+o.F*(p||x),e,b);return b}},function(t,e,n){var r=n(31),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){t.exports=n(11)},,function(t,e,n){\"use strict\";var r=n(70)(!0);n(48)(String,\"String\",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(10),o=n(32),i=n(35)(\"IE_PROTO\"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){n(73);for(var r=n(1),o=n(11),i=n(17),u=n(2)(\"toStringTag\"),f=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),c=0;c<f.length;c++){var a=f[c],s=r[a],l=s&&s.prototype;l&&!l[u]&&o(l,u,a),i[a]=i.Array}},function(t,e,n){var r=n(21);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(45),o=n(37).concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},,function(t,e,n){t.exports={default:n(61),__esModule:!0}},function(t,e){},function(t,e,n){n(62);var r=n(0).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(6);r(r.S+r.F*!n(4),\"Object\",{defineProperty:n(8).f})},,function(t,e,n){var r=n(12),o=n(49),i=n(65);t.exports=function(t){return function(e,n,u){var f,c=r(e),a=o(c.length),s=i(u,a);if(t&&n!=n){for(;a>s;)if((f=c[s++])!=f)return!0}else for(;a>s;s++)if((t||s in c)&&c[s]===n)return t||s||0;return!t&&-1}}},function(t,e,n){var r=n(31),o=Math.max,i=Math.min;t.exports=function(t,e){return t=r(t),t<0?o(t+e,0):i(t,e)}},,,,,function(t,e,n){var r=n(31),o=n(30);t.exports=function(t){return function(e,n){var i,u,f=String(o(e)),c=r(n),a=f.length;return c<0||c>=a?t?\"\":void 0:(i=f.charCodeAt(c),i<55296||i>56319||c+1===a||(u=f.charCodeAt(c+1))<56320||u>57343?t?f.charAt(c):i:t?f.slice(c,c+2):u-56320+(i-55296<<10)+65536)}}},function(t,e,n){\"use strict\";var r=n(38),o=n(16),i=n(26),u={};n(11)(u,n(2)(\"iterator\"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+\" Iterator\")}},function(t,e,n){var r=n(8),o=n(9),i=n(20);t.exports=n(4)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),f=u.length,c=0;f>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){\"use strict\";var r=n(74),o=n(75),i=n(17),u=n(12);t.exports=n(48)(Array,\"Array\",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):\"keys\"==e?o(0,n):\"values\"==e?o(0,t[n]):o(0,[n,t[n]])},\"values\"),i.Arguments=i.Array,r(\"keys\"),r(\"values\"),r(\"entries\")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},,function(t,e,n){var r=n(23)(\"meta\"),o=n(7),i=n(10),u=n(8).f,f=0,c=Object.isExtensible||function(){return!0},a=!n(13)(function(){return c(Object.preventExtensions({}))}),s=function(t){u(t,r,{value:{i:\"O\"+ ++f,w:{}}})},l=function(t,e){if(!o(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!i(t,r)){if(!c(t))return\"F\";if(!e)return\"E\";s(t)}return t[r].i},p=function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;s(t)}return t[r].w},v=function(t){return a&&y.NEED&&c(t)&&!i(t,r)&&s(t),t},y=t.exports={KEY:r,NEED:!1,fastKey:l,getWeak:p,onFreeze:v}},function(t,e,n){t.exports={default:n(119),__esModule:!0}},function(t,e,n){t.exports={default:n(80),__esModule:!0}},function(t,e,n){n(52),n(54),t.exports=n(40).f(\"iterator\")},function(t,e,n){t.exports={default:n(82),__esModule:!0}},function(t,e,n){n(83),n(60),n(87),n(88),t.exports=n(0).Symbol},function(t,e,n){\"use strict\";var r=n(1),o=n(10),i=n(4),u=n(6),f=n(50),c=n(77).KEY,a=n(13),s=n(36),l=n(26),p=n(23),v=n(2),y=n(40),d=n(41),h=n(84),g=n(85),b=n(9),m=n(7),w=n(12),O=n(27),S=n(16),_=n(38),x=n(86),j=n(46),P=n(8),M=n(20),L=j.f,T=P.f,E=x.f,k=r.Symbol,A=r.JSON,F=A&&A.stringify,N=v(\"_hidden\"),C=v(\"toPrimitive\"),I={}.propertyIsEnumerable,R=s(\"symbol-registry\"),D=s(\"symbols\"),G=s(\"op-symbols\"),K=Object.prototype,V=\"function\"==typeof k,W=r.QObject,U=!W||!W.prototype||!W.prototype.findChild,q=i&&a(function(){return 7!=_(T({},\"a\",{get:function(){return T(this,\"a\",{value:7}).a}})).a})?function(t,e,n){var r=L(K,e);r&&delete K[e],T(t,e,n),r&&t!==K&&T(K,e,r)}:T,B=function(t){var e=D[t]=_(k.prototype);return e._k=t,e},H=V&&\"symbol\"==typeof k.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof k},J=function(t,e,n){return t===K&&J(G,e,n),b(t),e=O(e,!0),b(n),o(D,e)?(n.enumerable?(o(t,N)&&t[N][e]&&(t[N][e]=!1),n=_(n,{enumerable:S(0,!1)})):(o(t,N)||T(t,N,S(1,{})),t[N][e]=!0),q(t,e,n)):T(t,e,n)},Y=function(t,e){b(t);for(var n,r=h(e=w(e)),o=0,i=r.length;i>o;)J(t,n=r[o++],e[n]);return t},z=function(t,e){return void 0===e?_(t):Y(_(t),e)},Q=function(t){var e=I.call(this,t=O(t,!0));return!(this===K&&o(D,t)&&!o(G,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,N)&&this[N][t])||e)},X=function(t,e){if(t=w(t),e=O(e,!0),t!==K||!o(D,e)||o(G,e)){var n=L(t,e);return!n||!o(D,e)||o(t,N)&&t[N][e]||(n.enumerable=!0),n}},Z=function(t){for(var e,n=E(w(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==N||e==c||r.push(e);return r},$=function(t){for(var e,n=t===K,r=E(n?G:w(t)),i=[],u=0;r.length>u;)!o(D,e=r[u++])||n&&!o(K,e)||i.push(D[e]);return i};V||(k=function(){if(this instanceof k)throw TypeError(\"Symbol is not a constructor!\");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===K&&e.call(G,n),o(this,N)&&o(this[N],t)&&(this[N][t]=!1),q(this,t,S(1,n))};return i&&U&&q(K,t,{configurable:!0,set:e}),B(t)},f(k.prototype,\"toString\",function(){return this._k}),j.f=X,P.f=J,n(57).f=x.f=Z,n(29).f=Q,n(43).f=$,i&&!n(15)&&f(K,\"propertyIsEnumerable\",Q,!0),y.f=function(t){return B(v(t))}),u(u.G+u.W+u.F*!V,{Symbol:k});for(var tt=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),et=0;tt.length>et;)v(tt[et++]);for(var nt=M(v.store),rt=0;nt.length>rt;)d(nt[rt++]);u(u.S+u.F*!V,\"Symbol\",{for:function(t){return o(R,t+=\"\")?R[t]:R[t]=k(t)},keyFor:function(t){if(!H(t))throw TypeError(t+\" is not a symbol!\");for(var e in R)if(R[e]===t)return e},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!V,\"Object\",{create:z,defineProperty:J,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:Z,getOwnPropertySymbols:$}),A&&u(u.S+u.F*(!V||a(function(){var t=k();return\"[null]\"!=F([t])||\"{}\"!=F({a:t})||\"{}\"!=F(Object(t))})),\"JSON\",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(m(e)||void 0!==t)&&!H(t))return g(e)||(e=function(t,e){if(\"function\"==typeof n&&(e=n.call(this,t,e)),!H(e))return e}),r[1]=e,F.apply(A,r)}}),k.prototype[C]||n(11)(k.prototype,C,k.prototype.valueOf),l(k,\"Symbol\"),l(Math,\"Math\",!0),l(r.JSON,\"JSON\",!0)},function(t,e,n){var r=n(20),o=n(43),i=n(29);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,f=n(t),c=i.f,a=0;f.length>a;)c.call(t,u=f[a++])&&e.push(u);return e}},function(t,e,n){var r=n(21);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(12),o=n(57).f,i={}.toString,u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],f=function(t){try{return o(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&\"[object Window]\"==i.call(t)?f(t):o(r(t))}},function(t,e,n){n(41)(\"asyncIterator\")},function(t,e,n){n(41)(\"observable\")},function(t,e,n){n(90),t.exports=n(0).Object.keys},function(t,e,n){var r=n(32),o=n(20);n(44)(\"keys\",function(){return function(t){return o(r(t))}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){n(120),t.exports=n(0).Object.assign},function(t,e,n){var r=n(6);r(r.S+r.F,\"Object\",{assign:n(121)})},function(t,e,n){\"use strict\";var r=n(20),o=n(43),i=n(29),u=n(32),f=n(55),c=Object.assign;t.exports=!c||n(13)(function(){var t={},e={},n=Symbol(),r=\"abcdefghijklmnopqrst\";return t[n]=7,r.split(\"\").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join(\"\")!=r})?function(t,e){for(var n=u(t),c=arguments.length,a=1,s=o.f,l=i.f;c>a;)for(var p,v=f(arguments[a++]),y=s?r(v).concat(s(v)):r(v),d=y.length,h=0;d>h;)l.call(v,p=y[h++])&&(n[p]=v[p]);return n}:c},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var r=n(22),o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(r),i=n(154),u=function(t){return t&&t.__esModule?t:{default:t}}(i);o.getLogger(\"StorageManager\").setLevel(0),e.default=u.default,t.exports=e.default},function(t,e,n){\"use strict\";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var o=n(155),i=r(o),u=n(42),f=r(u),c=n(47),a=r(c),s=n(78),l=r(s),p=n(3),v=r(p),y=n(5),d=r(y),h=n(22),g=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(h),b=g.getLogger(\"StorageManager\"),m=function(){function t(e,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if((0,v.default)(this,t),!e)throw Error(\"The Storage Manager needs the database instance\");if(!n)throw Error(\"The Storage Manager needs the storage name\");var i={};r?i=r:i[n]=\"key,version,value\",e.version(o).stores(i),e.open().then(function(t){b.info(\"Found database name \"+t.name+\" with version no: \"+t.verno)}).catch(b.error),this.db=e,this.storageName=n}return(0,d.default)(t,[{key:\"_checkKey\",value:function(t){return\"string\"!=typeof t?t.toString():t}},{key:\"_getTable\",value:function(t){var e=void 0;try{e=this.db.table(this.storageName).name}catch(n){e=this.db.table(t).name}return e}},{key:\"_getPrimaryKey\",value:function(t){return this.db.table(t).schema.primKey.name}},{key:\"_isDefaultSchema\",value:function(t){var e=this._getTable(t),n=this.db[e].schema.instanceTemplate;return n.hasOwnProperty(\"value\")&&n.hasOwnProperty(\"version\")&&n.hasOwnProperty(\"key\")}},{key:\"set\",value:function(t,e,n,r){b.info(\"[StorageManager] - set \",t,n),r=r||t;var o=this._getTable(r),i=this._getPrimaryKey(o),u=n;if(this._isDefaultSchema(r))u={key:t,version:e,value:n};else{var f={};f[i]=t,(0,l.default)(u,f)}return this.db[o].put(u)}},{key:\"get\",value:function(t,e,n){var r=this;console.info(\"[StorageManager] - get \",t,e),n=n||t;var o=this._getTable(n),u=this._getPrimaryKey(o);return this.db.transaction(\"rw!\",this.db[o],function(){if(!t&&!e)return r.db[o].toArray().then(function(t){return t.reduce(function(t,e){return t[e[u]]=e,t},{})});if(!e)return r.db[o].where(u).equals(t).first().then(function(t){return t&&t.hasOwnProperty(\"value\")?t.value:t});var n=void 0===e?\"undefined\":(0,a.default)(e);switch(Array.isArray(e)&&(n=\"array\"),n){case\"string\":return r.db[o].where(t).equals(e).first().then(function(t){return t&&t.hasOwnProperty(\"value\")?t.value:t});case\"object\":var c=\"value.\"+(0,f.default)(e).toString(),s=(0,i.default)(e);return console.log(c,s),r.db[o].where(c).anyOf(s).first().then(function(t){return t&&t.hasOwnProperty(\"value\")?t.value:t});case\"array\":return console.log(\"ARRAY:\",e),r.db[o].where(e).then(function(t){return t&&t.hasOwnProperty(\"value\")?t.value:t})}})}},{key:\"getVersion\",value:function(t,e,n){var r=this;b.info(\"[StorageManager] - getVersion for key \",t),n=n||t;var o=this._getTable(n),i=this._getPrimaryKey(o),u=e;return e||(u=t),this.db.transaction(\"rw!\",this.db[o],function(){return r.db[o].where(i).equals(u).first().then(function(t){return t&&t.hasOwnProperty(\"version\")?t.version:t}).catch(function(e){b.info(\"error getting the version for \",t,\" with error: \",e)})})}},{key:\"delete\",value:function(t,e,n){n=n||t;var r=this._getTable(n),o=this._getPrimaryKey(r),i=e;return e||(i=t),this.db[r].where(o).equals(i).delete()}}]),t}();e.default=m,t.exports=e.default},function(t,e,n){t.exports={default:n(156),__esModule:!0}},function(t,e,n){n(157),t.exports=n(0).Object.values},function(t,e,n){var r=n(6),o=n(158)(!1);r(r.S,\"Object\",{values:function(t){return o(t)}})},function(t,e,n){var r=n(20),o=n(12),i=n(29).f;t.exports=function(t){return function(e){for(var n,u=o(e),f=r(u),c=f.length,a=0,s=[];c>a;)i.call(u,n=f[a++])&&s.push(t?[n,u[n]]:u[n]);return s}}}])});","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","/*!\n * URI.js - Mutating URLs\n * IPv6 Support\n *\n * Version: 1.19.1\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.IPv6 = factory(root);\n  }\n}(this, function (root) {\n  'use strict';\n\n  /*\n  var _in = \"fe80:0000:0000:0000:0204:61ff:fe9d:f156\";\n  var _out = IPv6.best(_in);\n  var _expected = \"fe80::204:61ff:fe9d:f156\";\n\n  console.log(_in, _out, _expected, _out === _expected);\n  */\n\n  // save current IPv6 variable, if any\n  var _IPv6 = root && root.IPv6;\n\n  function bestPresentation(address) {\n    // based on:\n    // Javascript to test an IPv6 address for proper format, and to\n    // present the \"best text representation\" according to IETF Draft RFC at\n    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04\n    // 8 Feb 2010 Rich Brown, Dartware, LLC\n    // Please feel free to use this code as long as you provide a link to\n    // http://www.intermapper.com\n    // http://intermapper.com/support/tools/IPV6-Validator.aspx\n    // http://download.dartware.com/thirdparty/ipv6validator.js\n\n    var _address = address.toLowerCase();\n    var segments = _address.split(':');\n    var length = segments.length;\n    var total = 8;\n\n    // trim colons (:: or ::a:b:c… or …a:b:c::)\n    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {\n      // must have been ::\n      // remove first two items\n      segments.shift();\n      segments.shift();\n    } else if (segments[0] === '' && segments[1] === '') {\n      // must have been ::xxxx\n      // remove the first item\n      segments.shift();\n    } else if (segments[length - 1] === '' && segments[length - 2] === '') {\n      // must have been xxxx::\n      segments.pop();\n    }\n\n    length = segments.length;\n\n    // adjust total segments for IPv4 trailer\n    if (segments[length - 1].indexOf('.') !== -1) {\n      // found a \".\" which means IPv4\n      total = 7;\n    }\n\n    // fill empty segments them with \"0000\"\n    var pos;\n    for (pos = 0; pos < length; pos++) {\n      if (segments[pos] === '') {\n        break;\n      }\n    }\n\n    if (pos < total) {\n      segments.splice(pos, 1, '0000');\n      while (segments.length < total) {\n        segments.splice(pos, 0, '0000');\n      }\n    }\n\n    // strip leading zeros\n    var _segments;\n    for (var i = 0; i < total; i++) {\n      _segments = segments[i].split('');\n      for (var j = 0; j < 3 ; j++) {\n        if (_segments[0] === '0' && _segments.length > 1) {\n          _segments.splice(0,1);\n        } else {\n          break;\n        }\n      }\n\n      segments[i] = _segments.join('');\n    }\n\n    // find longest sequence of zeroes and coalesce them into one segment\n    var best = -1;\n    var _best = 0;\n    var _current = 0;\n    var current = -1;\n    var inzeroes = false;\n    // i; already declared\n\n    for (i = 0; i < total; i++) {\n      if (inzeroes) {\n        if (segments[i] === '0') {\n          _current += 1;\n        } else {\n          inzeroes = false;\n          if (_current > _best) {\n            best = current;\n            _best = _current;\n          }\n        }\n      } else {\n        if (segments[i] === '0') {\n          inzeroes = true;\n          current = i;\n          _current = 1;\n        }\n      }\n    }\n\n    if (_current > _best) {\n      best = current;\n      _best = _current;\n    }\n\n    if (_best > 1) {\n      segments.splice(best, _best, '');\n    }\n\n    length = segments.length;\n\n    // assemble remaining segments\n    var result = '';\n    if (segments[0] === '')  {\n      result = ':';\n    }\n\n    for (i = 0; i < length; i++) {\n      result += segments[i];\n      if (i === length - 1) {\n        break;\n      }\n\n      result += ':';\n    }\n\n    if (segments[length - 1] === '') {\n      result += ':';\n    }\n\n    return result;\n  }\n\n  function noConflict() {\n    /*jshint validthis: true */\n    if (root.IPv6 === this) {\n      root.IPv6 = _IPv6;\n    }\n\n    return this;\n  }\n\n  return {\n    best: bestPresentation,\n    noConflict: noConflict\n  };\n}));\n","/*!\n * URI.js - Mutating URLs\n * Second Level Domain (SLD) Support\n *\n * Version: 1.19.1\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.SecondLevelDomains = factory(root);\n  }\n}(this, function (root) {\n  'use strict';\n\n  // save current SecondLevelDomains variable, if any\n  var _SecondLevelDomains = root && root.SecondLevelDomains;\n\n  var SLD = {\n    // list of known Second Level Domains\n    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains\n    // ----\n    // publicsuffix.org is more current and actually used by a couple of browsers internally.\n    // downside is it also contains domains like \"dyndns.org\" - which is fine for the security\n    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js\n    // ----\n    list: {\n      'ac':' com gov mil net org ',\n      'ae':' ac co gov mil name net org pro sch ',\n      'af':' com edu gov net org ',\n      'al':' com edu gov mil net org ',\n      'ao':' co ed gv it og pb ',\n      'ar':' com edu gob gov int mil net org tur ',\n      'at':' ac co gv or ',\n      'au':' asn com csiro edu gov id net org ',\n      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',\n      'bb':' biz co com edu gov info net org store tv ',\n      'bh':' biz cc com edu gov info net org ',\n      'bn':' com edu gov net org ',\n      'bo':' com edu gob gov int mil net org tv ',\n      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',\n      'bs':' com edu gov net org ',\n      'bz':' du et om ov rg ',\n      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',\n      'ck':' biz co edu gen gov info net org ',\n      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',\n      'co':' com edu gov mil net nom org ',\n      'cr':' ac c co ed fi go or sa ',\n      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',\n      'do':' art com edu gob gov mil net org sld web ',\n      'dz':' art asso com edu gov net org pol ',\n      'ec':' com edu fin gov info med mil net org pro ',\n      'eg':' com edu eun gov mil name net org sci ',\n      'er':' com edu gov ind mil net org rochest w ',\n      'es':' com edu gob nom org ',\n      'et':' biz com edu gov info name net org ',\n      'fj':' ac biz com info mil name net org pro ',\n      'fk':' ac co gov net nom org ',\n      'fr':' asso com f gouv nom prd presse tm ',\n      'gg':' co net org ',\n      'gh':' com edu gov mil org ',\n      'gn':' ac com gov net org ',\n      'gr':' com edu gov mil net org ',\n      'gt':' com edu gob ind mil net org ',\n      'gu':' com edu gov net org ',\n      'hk':' com edu gov idv net org ',\n      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',\n      'id':' ac co go mil net or sch web ',\n      'il':' ac co gov idf k12 muni net org ',\n      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',\n      'iq':' com edu gov i mil net org ',\n      'ir':' ac co dnssec gov i id net org sch ',\n      'it':' edu gov ',\n      'je':' co net org ',\n      'jo':' com edu gov mil name net org sch ',\n      'jp':' ac ad co ed go gr lg ne or ',\n      'ke':' ac co go info me mobi ne or sc ',\n      'kh':' com edu gov mil net org per ',\n      'ki':' biz com de edu gov info mob net org tel ',\n      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',\n      'kn':' edu gov net org ',\n      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',\n      'kw':' com edu gov net org ',\n      'ky':' com edu gov net org ',\n      'kz':' com edu gov mil net org ',\n      'lb':' com edu gov net org ',\n      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',\n      'lr':' com edu gov net org ',\n      'lv':' asn com conf edu gov id mil net org ',\n      'ly':' com edu gov id med net org plc sch ',\n      'ma':' ac co gov m net org press ',\n      'mc':' asso tm ',\n      'me':' ac co edu gov its net org priv ',\n      'mg':' com edu gov mil nom org prd tm ',\n      'mk':' com edu gov inf name net org pro ',\n      'ml':' com edu gov net org presse ',\n      'mn':' edu gov org ',\n      'mo':' com edu gov net org ',\n      'mt':' com edu gov net org ',\n      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',\n      'mw':' ac co com coop edu gov int museum net org ',\n      'mx':' com edu gob net org ',\n      'my':' com edu gov mil name net org sch ',\n      'nf':' arts com firm info net other per rec store web ',\n      'ng':' biz com edu gov mil mobi name net org sch ',\n      'ni':' ac co com edu gob mil net nom org ',\n      'np':' com edu gov mil net org ',\n      'nr':' biz com edu gov info net org ',\n      'om':' ac biz co com edu gov med mil museum net org pro sch ',\n      'pe':' com edu gob mil net nom org sld ',\n      'ph':' com edu gov i mil net ngo org ',\n      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',\n      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',\n      'pr':' ac biz com edu est gov info isla name net org pro prof ',\n      'ps':' com edu gov net org plo sec ',\n      'pw':' belau co ed go ne or ',\n      'ro':' arts com firm info nom nt org rec store tm www ',\n      'rs':' ac co edu gov in org ',\n      'sb':' com edu gov net org ',\n      'sc':' com edu gov net org ',\n      'sh':' co com edu gov net nom org ',\n      'sl':' com edu gov net org ',\n      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',\n      'sv':' com edu gob org red ',\n      'sz':' ac co org ',\n      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',\n      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',\n      'tw':' club com ebiz edu game gov idv mil net org ',\n      'mu':' ac co com gov net or org ',\n      'mz':' ac co edu gov org ',\n      'na':' co com ',\n      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',\n      'pa':' abo ac com edu gob ing med net nom org sld ',\n      'pt':' com edu gov int net nome org publ ',\n      'py':' com edu gov mil net org ',\n      'qa':' com edu gov mil net org ',\n      're':' asso com nom ',\n      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',\n      'rw':' ac co com edu gouv gov int mil net ',\n      'sa':' com edu gov med net org pub sch ',\n      'sd':' com edu gov info med net org tv ',\n      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',\n      'sg':' com edu gov idn net org per ',\n      'sn':' art com edu gouv org perso univ ',\n      'sy':' com edu gov mil net news org ',\n      'th':' ac co go in mi net or ',\n      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',\n      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',\n      'tz':' ac co go ne or ',\n      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',\n      'ug':' ac co go ne or org sc ',\n      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',\n      'us':' dni fed isa kids nsn ',\n      'uy':' com edu gub mil net org ',\n      've':' co com edu gob info mil net org web ',\n      'vi':' co com k12 net org ',\n      'vn':' ac biz com edu gov health info int name net org pro ',\n      'ye':' co com gov ltd me net org plc ',\n      'yu':' ac co edu gov org ',\n      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',\n      'zm':' ac co com edu gov net org sch ',\n      // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains\n      'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',\n      'net': 'gb jp se uk ',\n      'org': 'ae',\n      'de': 'com '\n    },\n    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost\n    // in both performance and memory footprint. No initialization required.\n    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4\n    // Following methods use lastIndexOf() rather than array.split() in order\n    // to avoid any memory allocations.\n    has: function(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\n        return false;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\n      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {\n        return false;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\n      if (!sldList) {\n        return false;\n      }\n      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;\n    },\n    is: function(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\n        return false;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\n      if (sldOffset >= 0) {\n        return false;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\n      if (!sldList) {\n        return false;\n      }\n      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;\n    },\n    get: function(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\n        return null;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\n      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {\n        return null;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\n      if (!sldList) {\n        return null;\n      }\n      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {\n        return null;\n      }\n      return domain.slice(sldOffset+1);\n    },\n    noConflict: function(){\n      if (root.SecondLevelDomains === this) {\n        root.SecondLevelDomains = _SecondLevelDomains;\n      }\n      return this;\n    }\n  };\n\n  return SLD;\n}));\n","/*!\n * URI.js - Mutating URLs\n *\n * Version: 1.19.1\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);\n  } else {\n    // Browser globals (root is window)\n    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);\n  }\n}(this, function (punycode, IPv6, SLD, root) {\n  'use strict';\n  /*global location, escape, unescape */\n  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase\n  /*jshint camelcase: false */\n\n  // save current URI variable, if any\n  var _URI = root && root.URI;\n\n  function URI(url, base) {\n    var _urlSupplied = arguments.length >= 1;\n    var _baseSupplied = arguments.length >= 2;\n\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof URI)) {\n      if (_urlSupplied) {\n        if (_baseSupplied) {\n          return new URI(url, base);\n        }\n\n        return new URI(url);\n      }\n\n      return new URI();\n    }\n\n    if (url === undefined) {\n      if (_urlSupplied) {\n        throw new TypeError('undefined is not a valid argument for URI');\n      }\n\n      if (typeof location !== 'undefined') {\n        url = location.href + '';\n      } else {\n        url = '';\n      }\n    }\n\n    if (url === null) {\n      if (_urlSupplied) {\n        throw new TypeError('null is not a valid argument for URI');\n      }\n    }\n\n    this.href(url);\n\n    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor\n    if (base !== undefined) {\n      return this.absoluteTo(base);\n    }\n\n    return this;\n  }\n\n  function isInteger(value) {\n    return /^[0-9]+$/.test(value);\n  }\n\n  URI.version = '1.19.1';\n\n  var p = URI.prototype;\n  var hasOwn = Object.prototype.hasOwnProperty;\n\n  function escapeRegEx(string) {\n    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963\n    return string.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  }\n\n  function getType(value) {\n    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value\n    if (value === undefined) {\n      return 'Undefined';\n    }\n\n    return String(Object.prototype.toString.call(value)).slice(8, -1);\n  }\n\n  function isArray(obj) {\n    return getType(obj) === 'Array';\n  }\n\n  function filterArrayValues(data, value) {\n    var lookup = {};\n    var i, length;\n\n    if (getType(value) === 'RegExp') {\n      lookup = null;\n    } else if (isArray(value)) {\n      for (i = 0, length = value.length; i < length; i++) {\n        lookup[value[i]] = true;\n      }\n    } else {\n      lookup[value] = true;\n    }\n\n    for (i = 0, length = data.length; i < length; i++) {\n      /*jshint laxbreak: true */\n      var _match = lookup && lookup[data[i]] !== undefined\n        || !lookup && value.test(data[i]);\n      /*jshint laxbreak: false */\n      if (_match) {\n        data.splice(i, 1);\n        length--;\n        i--;\n      }\n    }\n\n    return data;\n  }\n\n  function arrayContains(list, value) {\n    var i, length;\n\n    // value may be string, number, array, regexp\n    if (isArray(value)) {\n      // Note: this can be optimized to O(n) (instead of current O(m * n))\n      for (i = 0, length = value.length; i < length; i++) {\n        if (!arrayContains(list, value[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    var _type = getType(value);\n    for (i = 0, length = list.length; i < length; i++) {\n      if (_type === 'RegExp') {\n        if (typeof list[i] === 'string' && list[i].match(value)) {\n          return true;\n        }\n      } else if (list[i] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function arraysEqual(one, two) {\n    if (!isArray(one) || !isArray(two)) {\n      return false;\n    }\n\n    // arrays can't be equal if they have different amount of content\n    if (one.length !== two.length) {\n      return false;\n    }\n\n    one.sort();\n    two.sort();\n\n    for (var i = 0, l = one.length; i < l; i++) {\n      if (one[i] !== two[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function trimSlashes(text) {\n    var trim_expression = /^\\/+|\\/+$/g;\n    return text.replace(trim_expression, '');\n  }\n\n  URI._parts = function() {\n    return {\n      protocol: null,\n      username: null,\n      password: null,\n      hostname: null,\n      urn: null,\n      port: null,\n      path: null,\n      query: null,\n      fragment: null,\n      // state\n      preventInvalidHostname: URI.preventInvalidHostname,\n      duplicateQueryParameters: URI.duplicateQueryParameters,\n      escapeQuerySpace: URI.escapeQuerySpace\n    };\n  };\n  // state: throw on invalid hostname\n  // see https://github.com/medialize/URI.js/pull/345\n  // and https://github.com/medialize/URI.js/issues/354\n  URI.preventInvalidHostname = false;\n  // state: allow duplicate query parameters (a=1&a=1)\n  URI.duplicateQueryParameters = false;\n  // state: replaces + with %20 (space in query strings)\n  URI.escapeQuerySpace = true;\n  // static properties\n  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;\n  URI.idn_expression = /[^a-z0-9\\._-]/i;\n  URI.punycode_expression = /(xn--)/i;\n  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?\n  URI.ip4_expression = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  // credits to Rich Brown\n  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096\n  // specification: http://www.ietf.org/rfc/rfc4291.txt\n  URI.ip6_expression = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/;\n  // expression used is \"gruber revised\" (@gruber v2) determined to be the\n  // best solution in a regex-golf we did a couple of ages ago at\n  // * http://mathiasbynens.be/demo/url-regex\n  // * http://rodneyrehm.de/t/url-regex.html\n  URI.find_uri_expression = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/ig;\n  URI.findUri = {\n    // valid \"scheme://\" or \"www.\"\n    start: /\\b(?:([a-z][a-z0-9.+-]*:\\/\\/)|www\\.)/gi,\n    // everything up to the next whitespace\n    end: /[\\s\\r\\n]|$/,\n    // trim trailing punctuation captured by end RegExp\n    trim: /[`!()\\[\\]{};:'\".,<>?«»“”„‘’]+$/,\n    // balanced parens inclusion (), [], {}, <>\n    parens: /(\\([^\\)]*\\)|\\[[^\\]]*\\]|\\{[^}]*\\}|<[^>]*>)/g,\n  };\n  // http://www.iana.org/assignments/uri-schemes.html\n  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports\n  URI.defaultPorts = {\n    http: '80',\n    https: '443',\n    ftp: '21',\n    gopher: '70',\n    ws: '80',\n    wss: '443'\n  };\n  // list of protocols which always require a hostname\n  URI.hostProtocols = [\n    'http',\n    'https'\n  ];\n\n  // allowed hostname characters according to RFC 3986\n  // ALPHA DIGIT \"-\" \".\" \"_\" \"~\" \"!\" \"$\" \"&\" \"'\" \"(\" \")\" \"*\" \"+\" \",\" \";\" \"=\" %encoded\n  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _\n  URI.invalid_hostname_characters = /[^a-zA-Z0-9\\.\\-:_]/;\n  // map DOM Elements to their URI attribute\n  URI.domAttributes = {\n    'a': 'href',\n    'blockquote': 'cite',\n    'link': 'href',\n    'base': 'href',\n    'script': 'src',\n    'form': 'action',\n    'img': 'src',\n    'area': 'href',\n    'iframe': 'src',\n    'embed': 'src',\n    'source': 'src',\n    'track': 'src',\n    'input': 'src', // but only if type=\"image\"\n    'audio': 'src',\n    'video': 'src'\n  };\n  URI.getDomAttribute = function(node) {\n    if (!node || !node.nodeName) {\n      return undefined;\n    }\n\n    var nodeName = node.nodeName.toLowerCase();\n    // <input> should only expose src for type=\"image\"\n    if (nodeName === 'input' && node.type !== 'image') {\n      return undefined;\n    }\n\n    return URI.domAttributes[nodeName];\n  };\n\n  function escapeForDumbFirefox36(value) {\n    // https://github.com/medialize/URI.js/issues/91\n    return escape(value);\n  }\n\n  // encoding / decoding according to RFC3986\n  function strictEncodeURIComponent(string) {\n    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\n    return encodeURIComponent(string)\n      .replace(/[!'()*]/g, escapeForDumbFirefox36)\n      .replace(/\\*/g, '%2A');\n  }\n  URI.encode = strictEncodeURIComponent;\n  URI.decode = decodeURIComponent;\n  URI.iso8859 = function() {\n    URI.encode = escape;\n    URI.decode = unescape;\n  };\n  URI.unicode = function() {\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = decodeURIComponent;\n  };\n  URI.characters = {\n    pathname: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,\n        map: {\n          // -._~!'()*\n          '%24': '$',\n          '%26': '&',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%3A': ':',\n          '%40': '@'\n        }\n      },\n      decode: {\n        expression: /[\\/\\?#]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23'\n        }\n      }\n    },\n    reserved: {\n      encode: {\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\n        // use uppercase hexadecimal digits for all percent-encodings.\n        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,\n        map: {\n          // gen-delims\n          '%3A': ':',\n          '%2F': '/',\n          '%3F': '?',\n          '%23': '#',\n          '%5B': '[',\n          '%5D': ']',\n          '%40': '@',\n          // sub-delims\n          '%21': '!',\n          '%24': '$',\n          '%26': '&',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '='\n        }\n      }\n    },\n    urnpath: {\n      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable\n      // for usage in a URN. RFC2141 also calls out \"-\", \".\", and \"_\" as acceptable characters, but\n      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also\n      // note that the colon character is not featured in the encoding map; this is because URI.js\n      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it\n      // should not appear unencoded in a segment itself.\n      // See also the note above about RFC3986 and capitalalized hex digits.\n      encode: {\n        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,\n        map: {\n          '%21': '!',\n          '%24': '$',\n          '%27': '\\'',\n          '%28': '(',\n          '%29': ')',\n          '%2A': '*',\n          '%2B': '+',\n          '%2C': ',',\n          '%3B': ';',\n          '%3D': '=',\n          '%40': '@'\n        }\n      },\n      // These characters are the characters called out by RFC2141 as \"reserved\" characters that\n      // should never appear in a URN, plus the colon character (see note above).\n      decode: {\n        expression: /[\\/\\?#:]/g,\n        map: {\n          '/': '%2F',\n          '?': '%3F',\n          '#': '%23',\n          ':': '%3A'\n        }\n      }\n    }\n  };\n  URI.encodeQuery = function(string, escapeQuerySpace) {\n    var escaped = URI.encode(string + '');\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;\n  };\n  URI.decodeQuery = function(string, escapeQuerySpace) {\n    string += '';\n    if (escapeQuerySpace === undefined) {\n      escapeQuerySpace = URI.escapeQuerySpace;\n    }\n\n    try {\n      return URI.decode(escapeQuerySpace ? string.replace(/\\+/g, '%20') : string);\n    } catch(e) {\n      // we're not going to mess with weird encodings,\n      // give up and return the undecoded original string\n      // see https://github.com/medialize/URI.js/issues/87\n      // see https://github.com/medialize/URI.js/issues/92\n      return string;\n    }\n  };\n  // generate encode/decode path functions\n  var _parts = {'encode':'encode', 'decode':'decode'};\n  var _part;\n  var generateAccessor = function(_group, _part) {\n    return function(string) {\n      try {\n        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {\n          return URI.characters[_group][_part].map[c];\n        });\n      } catch (e) {\n        // we're not going to mess with weird encodings,\n        // give up and return the undecoded original string\n        // see https://github.com/medialize/URI.js/issues/87\n        // see https://github.com/medialize/URI.js/issues/92\n        return string;\n      }\n    };\n  };\n\n  for (_part in _parts) {\n    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);\n    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);\n  }\n\n  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {\n    return function(string) {\n      // Why pass in names of functions, rather than the function objects themselves? The\n      // definitions of some functions (but in particular, URI.decode) will occasionally change due\n      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure\n      // that the functions we use here are \"fresh\".\n      var actualCodingFunc;\n      if (!_innerCodingFuncName) {\n        actualCodingFunc = URI[_codingFuncName];\n      } else {\n        actualCodingFunc = function(string) {\n          return URI[_codingFuncName](URI[_innerCodingFuncName](string));\n        };\n      }\n\n      var segments = (string + '').split(_sep);\n\n      for (var i = 0, length = segments.length; i < length; i++) {\n        segments[i] = actualCodingFunc(segments[i]);\n      }\n\n      return segments.join(_sep);\n    };\n  };\n\n  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.\n  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');\n  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');\n  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');\n  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');\n\n  URI.encodeReserved = generateAccessor('reserved', 'encode');\n\n  URI.parse = function(string, parts) {\n    var pos;\n    if (!parts) {\n      parts = {\n        preventInvalidHostname: URI.preventInvalidHostname\n      };\n    }\n    // [protocol\"://\"[username[\":\"password]\"@\"]hostname[\":\"port]\"/\"?][path][\"?\"querystring][\"#\"fragment]\n\n    // extract fragment\n    pos = string.indexOf('#');\n    if (pos > -1) {\n      // escaping?\n      parts.fragment = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract query\n    pos = string.indexOf('?');\n    if (pos > -1) {\n      // escaping?\n      parts.query = string.substring(pos + 1) || null;\n      string = string.substring(0, pos);\n    }\n\n    // extract protocol\n    if (string.substring(0, 2) === '//') {\n      // relative-scheme\n      parts.protocol = null;\n      string = string.substring(2);\n      // extract \"user:pass@host:port\"\n      string = URI.parseAuthority(string, parts);\n    } else {\n      pos = string.indexOf(':');\n      if (pos > -1) {\n        parts.protocol = string.substring(0, pos) || null;\n        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {\n          // : may be within the path\n          parts.protocol = undefined;\n        } else if (string.substring(pos + 1, pos + 3) === '//') {\n          string = string.substring(pos + 3);\n\n          // extract \"user:pass@host:port\"\n          string = URI.parseAuthority(string, parts);\n        } else {\n          string = string.substring(pos + 1);\n          parts.urn = true;\n        }\n      }\n    }\n\n    // what's left must be the path\n    parts.path = string;\n\n    // and we're done\n    return parts;\n  };\n  URI.parseHost = function(string, parts) {\n    if (!string) {\n      string = '';\n    }\n\n    // Copy chrome, IE, opera backslash-handling behavior.\n    // Back slashes before the query string get converted to forward slashes\n    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\n    // https://github.com/medialize/URI.js/pull/233\n    string = string.replace(/\\\\/g, '/');\n\n    // extract host:port\n    var pos = string.indexOf('/');\n    var bracketPos;\n    var t;\n\n    if (pos === -1) {\n      pos = string.length;\n    }\n\n    if (string.charAt(0) === '[') {\n      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6\n      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts\n      // IPv6+port in the format [2001:db8::1]:80 (for the time being)\n      bracketPos = string.indexOf(']');\n      parts.hostname = string.substring(1, bracketPos) || null;\n      parts.port = string.substring(bracketPos + 2, pos) || null;\n      if (parts.port === '/') {\n        parts.port = null;\n      }\n    } else {\n      var firstColon = string.indexOf(':');\n      var firstSlash = string.indexOf('/');\n      var nextColon = string.indexOf(':', firstColon + 1);\n      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {\n        // IPv6 host contains multiple colons - but no port\n        // this notation is actually not allowed by RFC 3986, but we're a liberal parser\n        parts.hostname = string.substring(0, pos) || null;\n        parts.port = null;\n      } else {\n        t = string.substring(0, pos).split(':');\n        parts.hostname = t[0] || null;\n        parts.port = t[1] || null;\n      }\n    }\n\n    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {\n      pos++;\n      string = '/' + string;\n    }\n\n    if (parts.preventInvalidHostname) {\n      URI.ensureValidHostname(parts.hostname, parts.protocol);\n    }\n\n    if (parts.port) {\n      URI.ensureValidPort(parts.port);\n    }\n\n    return string.substring(pos) || '/';\n  };\n  URI.parseAuthority = function(string, parts) {\n    string = URI.parseUserinfo(string, parts);\n    return URI.parseHost(string, parts);\n  };\n  URI.parseUserinfo = function(string, parts) {\n    // extract username:password\n    var firstSlash = string.indexOf('/');\n    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);\n    var t;\n\n    // authority@ must come before /path\n    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {\n      t = string.substring(0, pos).split(':');\n      parts.username = t[0] ? URI.decode(t[0]) : null;\n      t.shift();\n      parts.password = t[0] ? URI.decode(t.join(':')) : null;\n      string = string.substring(pos + 1);\n    } else {\n      parts.username = null;\n      parts.password = null;\n    }\n\n    return string;\n  };\n  URI.parseQuery = function(string, escapeQuerySpace) {\n    if (!string) {\n      return {};\n    }\n\n    // throw out the funky business - \"?\"[name\"=\"value\"&\"]+\n    string = string.replace(/&+/g, '&').replace(/^\\?*&*|&+$/g, '');\n\n    if (!string) {\n      return {};\n    }\n\n    var items = {};\n    var splits = string.split('&');\n    var length = splits.length;\n    var v, name, value;\n\n    for (var i = 0; i < length; i++) {\n      v = splits[i].split('=');\n      name = URI.decodeQuery(v.shift(), escapeQuerySpace);\n      // no \"=\" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters\n      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;\n\n      if (hasOwn.call(items, name)) {\n        if (typeof items[name] === 'string' || items[name] === null) {\n          items[name] = [items[name]];\n        }\n\n        items[name].push(value);\n      } else {\n        items[name] = value;\n      }\n    }\n\n    return items;\n  };\n\n  URI.build = function(parts) {\n    var t = '';\n\n    if (parts.protocol) {\n      t += parts.protocol + ':';\n    }\n\n    if (!parts.urn && (t || parts.hostname)) {\n      t += '//';\n    }\n\n    t += (URI.buildAuthority(parts) || '');\n\n    if (typeof parts.path === 'string') {\n      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {\n        t += '/';\n      }\n\n      t += parts.path;\n    }\n\n    if (typeof parts.query === 'string' && parts.query) {\n      t += '?' + parts.query;\n    }\n\n    if (typeof parts.fragment === 'string' && parts.fragment) {\n      t += '#' + parts.fragment;\n    }\n    return t;\n  };\n  URI.buildHost = function(parts) {\n    var t = '';\n\n    if (!parts.hostname) {\n      return '';\n    } else if (URI.ip6_expression.test(parts.hostname)) {\n      t += '[' + parts.hostname + ']';\n    } else {\n      t += parts.hostname;\n    }\n\n    if (parts.port) {\n      t += ':' + parts.port;\n    }\n\n    return t;\n  };\n  URI.buildAuthority = function(parts) {\n    return URI.buildUserinfo(parts) + URI.buildHost(parts);\n  };\n  URI.buildUserinfo = function(parts) {\n    var t = '';\n\n    if (parts.username) {\n      t += URI.encode(parts.username);\n    }\n\n    if (parts.password) {\n      t += ':' + URI.encode(parts.password);\n    }\n\n    if (t) {\n      t += '@';\n    }\n\n    return t;\n  };\n  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {\n    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html\n    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed\n    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!\n    // URI.js treats the query string as being application/x-www-form-urlencoded\n    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type\n\n    var t = '';\n    var unique, key, i, length;\n    for (key in data) {\n      if (hasOwn.call(data, key) && key) {\n        if (isArray(data[key])) {\n          unique = {};\n          for (i = 0, length = data[key].length; i < length; i++) {\n            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {\n              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);\n              if (duplicateQueryParameters !== true) {\n                unique[data[key][i] + ''] = true;\n              }\n            }\n          }\n        } else if (data[key] !== undefined) {\n          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);\n        }\n      }\n    }\n\n    return t.substring(1);\n  };\n  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {\n    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded\n    // don't append \"=\" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization\n    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');\n  };\n\n  URI.addQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.addQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (data[name] === undefined) {\n        data[name] = value;\n        return;\n      } else if (typeof data[name] === 'string') {\n        data[name] = [data[name]];\n      }\n\n      if (!isArray(value)) {\n        value = [value];\n      }\n\n      data[name] = (data[name] || []).concat(value);\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.setQuery = function(data, name, value) {\n    if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.setQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      data[name] = value === undefined ? null : value;\n    } else {\n      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');\n    }\n  };\n\n  URI.removeQuery = function(data, name, value) {\n    var i, length, key;\n\n    if (isArray(name)) {\n      for (i = 0, length = name.length; i < length; i++) {\n        data[name[i]] = undefined;\n      }\n    } else if (getType(name) === 'RegExp') {\n      for (key in data) {\n        if (name.test(key)) {\n          data[key] = undefined;\n        }\n      }\n    } else if (typeof name === 'object') {\n      for (key in name) {\n        if (hasOwn.call(name, key)) {\n          URI.removeQuery(data, key, name[key]);\n        }\n      }\n    } else if (typeof name === 'string') {\n      if (value !== undefined) {\n        if (getType(value) === 'RegExp') {\n          if (!isArray(data[name]) && value.test(data[name])) {\n            data[name] = undefined;\n          } else {\n            data[name] = filterArrayValues(data[name], value);\n          }\n        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {\n          data[name] = undefined;\n        } else if (isArray(data[name])) {\n          data[name] = filterArrayValues(data[name], value);\n        }\n      } else {\n        data[name] = undefined;\n      }\n    } else {\n      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');\n    }\n  };\n  URI.hasQuery = function(data, name, value, withinArray) {\n    switch (getType(name)) {\n      case 'String':\n        // Nothing to do here\n        break;\n\n      case 'RegExp':\n        for (var key in data) {\n          if (hasOwn.call(data, key)) {\n            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n\n      case 'Object':\n        for (var _key in name) {\n          if (hasOwn.call(name, _key)) {\n            if (!URI.hasQuery(data, _key, name[_key])) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');\n    }\n\n    switch (getType(value)) {\n      case 'Undefined':\n        // true if exists (but may be empty)\n        return name in data; // data[name] !== undefined;\n\n      case 'Boolean':\n        // true if exists and non-empty\n        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);\n        return value === _booly;\n\n      case 'Function':\n        // allow complex comparison\n        return !!value(data[name], name, data);\n\n      case 'Array':\n        if (!isArray(data[name])) {\n          return false;\n        }\n\n        var op = withinArray ? arrayContains : arraysEqual;\n        return op(data[name], value);\n\n      case 'RegExp':\n        if (!isArray(data[name])) {\n          return Boolean(data[name] && data[name].match(value));\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      case 'Number':\n        value = String(value);\n        /* falls through */\n      case 'String':\n        if (!isArray(data[name])) {\n          return data[name] === value;\n        }\n\n        if (!withinArray) {\n          return false;\n        }\n\n        return arrayContains(data[name], value);\n\n      default:\n        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');\n    }\n  };\n\n\n  URI.joinPaths = function() {\n    var input = [];\n    var segments = [];\n    var nonEmptySegments = 0;\n\n    for (var i = 0; i < arguments.length; i++) {\n      var url = new URI(arguments[i]);\n      input.push(url);\n      var _segments = url.segment();\n      for (var s = 0; s < _segments.length; s++) {\n        if (typeof _segments[s] === 'string') {\n          segments.push(_segments[s]);\n        }\n\n        if (_segments[s]) {\n          nonEmptySegments++;\n        }\n      }\n    }\n\n    if (!segments.length || !nonEmptySegments) {\n      return new URI('');\n    }\n\n    var uri = new URI('').segment(segments);\n\n    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {\n      uri.path('/' + uri.path());\n    }\n\n    return uri.normalize();\n  };\n\n  URI.commonPath = function(one, two) {\n    var length = Math.min(one.length, two.length);\n    var pos;\n\n    // find first non-matching character\n    for (pos = 0; pos < length; pos++) {\n      if (one.charAt(pos) !== two.charAt(pos)) {\n        pos--;\n        break;\n      }\n    }\n\n    if (pos < 1) {\n      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';\n    }\n\n    // revert to last /\n    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {\n      pos = one.substring(0, pos).lastIndexOf('/');\n    }\n\n    return one.substring(0, pos + 1);\n  };\n\n  URI.withinString = function(string, callback, options) {\n    options || (options = {});\n    var _start = options.start || URI.findUri.start;\n    var _end = options.end || URI.findUri.end;\n    var _trim = options.trim || URI.findUri.trim;\n    var _parens = options.parens || URI.findUri.parens;\n    var _attributeOpen = /[a-z0-9-]=[\"']?$/i;\n\n    _start.lastIndex = 0;\n    while (true) {\n      var match = _start.exec(string);\n      if (!match) {\n        break;\n      }\n\n      var start = match.index;\n      if (options.ignoreHtml) {\n        // attribut(e=[\"']?$)\n        var attributeOpen = string.slice(Math.max(start - 3, 0), start);\n        if (attributeOpen && _attributeOpen.test(attributeOpen)) {\n          continue;\n        }\n      }\n\n      var end = start + string.slice(start).search(_end);\n      var slice = string.slice(start, end);\n      // make sure we include well balanced parens\n      var parensEnd = -1;\n      while (true) {\n        var parensMatch = _parens.exec(slice);\n        if (!parensMatch) {\n          break;\n        }\n\n        var parensMatchEnd = parensMatch.index + parensMatch[0].length;\n        parensEnd = Math.max(parensEnd, parensMatchEnd);\n      }\n\n      if (parensEnd > -1) {\n        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');\n      } else {\n        slice = slice.replace(_trim, '');\n      }\n\n      if (slice.length <= match[0].length) {\n        // the extract only contains the starting marker of a URI,\n        // e.g. \"www\" or \"http://\"\n        continue;\n      }\n\n      if (options.ignore && options.ignore.test(slice)) {\n        continue;\n      }\n\n      end = start + slice.length;\n      var result = callback(slice, start, end, string);\n      if (result === undefined) {\n        _start.lastIndex = end;\n        continue;\n      }\n\n      result = String(result);\n      string = string.slice(0, start) + result + string.slice(end);\n      _start.lastIndex = start + result.length;\n    }\n\n    _start.lastIndex = 0;\n    return string;\n  };\n\n  URI.ensureValidHostname = function(v, protocol) {\n    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)\n    // they are not part of DNS and therefore ignored by URI.js\n\n    var hasHostname = !!v; // not null and not an empty string\n    var hasProtocol = !!protocol;\n    var rejectEmptyHostname = false;\n\n    if (hasProtocol) {\n      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);\n    }\n\n    if (rejectEmptyHostname && !hasHostname) {\n      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);\n    } else if (v && v.match(URI.invalid_hostname_characters)) {\n      // test punycode\n      if (!punycode) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');\n      }\n      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-:_]');\n      }\n    }\n  };\n\n  URI.ensureValidPort = function (v) {\n    if (!v) {\n      return;\n    }\n\n    var port = Number(v);\n    if (isInteger(port) && (port > 0) && (port < 65536)) {\n      return;\n    }\n\n    throw new TypeError('Port \"' + v + '\" is not a valid port');\n  };\n\n  // noConflict\n  URI.noConflict = function(removeAll) {\n    if (removeAll) {\n      var unconflicted = {\n        URI: this.noConflict()\n      };\n\n      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {\n        unconflicted.URITemplate = root.URITemplate.noConflict();\n      }\n\n      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {\n        unconflicted.IPv6 = root.IPv6.noConflict();\n      }\n\n      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {\n        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();\n      }\n\n      return unconflicted;\n    } else if (root.URI === this) {\n      root.URI = _URI;\n    }\n\n    return this;\n  };\n\n  p.build = function(deferBuild) {\n    if (deferBuild === true) {\n      this._deferred_build = true;\n    } else if (deferBuild === undefined || this._deferred_build) {\n      this._string = URI.build(this._parts);\n      this._deferred_build = false;\n    }\n\n    return this;\n  };\n\n  p.clone = function() {\n    return new URI(this);\n  };\n\n  p.valueOf = p.toString = function() {\n    return this.build(false)._string;\n  };\n\n\n  function generateSimpleAccessor(_part){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        this._parts[_part] = v || null;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  function generatePrefixAccessor(_part, _key){\n    return function(v, build) {\n      if (v === undefined) {\n        return this._parts[_part] || '';\n      } else {\n        if (v !== null) {\n          v = v + '';\n          if (v.charAt(0) === _key) {\n            v = v.substring(1);\n          }\n        }\n\n        this._parts[_part] = v;\n        this.build(!build);\n        return this;\n      }\n    };\n  }\n\n  p.protocol = generateSimpleAccessor('protocol');\n  p.username = generateSimpleAccessor('username');\n  p.password = generateSimpleAccessor('password');\n  p.hostname = generateSimpleAccessor('hostname');\n  p.port = generateSimpleAccessor('port');\n  p.query = generatePrefixAccessor('query', '?');\n  p.fragment = generatePrefixAccessor('fragment', '#');\n\n  p.search = function(v, build) {\n    var t = this.query(v, build);\n    return typeof t === 'string' && t.length ? ('?' + t) : t;\n  };\n  p.hash = function(v, build) {\n    var t = this.fragment(v, build);\n    return typeof t === 'string' && t.length ? ('#' + t) : t;\n  };\n\n  p.pathname = function(v, build) {\n    if (v === undefined || v === true) {\n      var res = this._parts.path || (this._parts.hostname ? '/' : '');\n      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;\n    } else {\n      if (this._parts.urn) {\n        this._parts.path = v ? URI.recodeUrnPath(v) : '';\n      } else {\n        this._parts.path = v ? URI.recodePath(v) : '/';\n      }\n      this.build(!build);\n      return this;\n    }\n  };\n  p.path = p.pathname;\n  p.href = function(href, build) {\n    var key;\n\n    if (href === undefined) {\n      return this.toString();\n    }\n\n    this._string = '';\n    this._parts = URI._parts();\n\n    var _URI = href instanceof URI;\n    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);\n    if (href.nodeName) {\n      var attribute = URI.getDomAttribute(href);\n      href = href[attribute] || '';\n      _object = false;\n    }\n\n    // window.location is reported to be an object, but it's not the sort\n    // of object we're looking for:\n    // * location.protocol ends with a colon\n    // * location.query != object.search\n    // * location.hash != object.fragment\n    // simply serializing the unknown object should do the trick\n    // (for location, not for everything...)\n    if (!_URI && _object && href.pathname !== undefined) {\n      href = href.toString();\n    }\n\n    if (typeof href === 'string' || href instanceof String) {\n      this._parts = URI.parse(String(href), this._parts);\n    } else if (_URI || _object) {\n      var src = _URI ? href._parts : href;\n      for (key in src) {\n        if (key === 'query') { continue; }\n        if (hasOwn.call(this._parts, key)) {\n          this._parts[key] = src[key];\n        }\n      }\n      if (src.query) {\n        this.query(src.query, false);\n      }\n    } else {\n      throw new TypeError('invalid input');\n    }\n\n    this.build(!build);\n    return this;\n  };\n\n  // identification accessors\n  p.is = function(what) {\n    var ip = false;\n    var ip4 = false;\n    var ip6 = false;\n    var name = false;\n    var sld = false;\n    var idn = false;\n    var punycode = false;\n    var relative = !this._parts.urn;\n\n    if (this._parts.hostname) {\n      relative = false;\n      ip4 = URI.ip4_expression.test(this._parts.hostname);\n      ip6 = URI.ip6_expression.test(this._parts.hostname);\n      ip = ip4 || ip6;\n      name = !ip;\n      sld = name && SLD && SLD.has(this._parts.hostname);\n      idn = name && URI.idn_expression.test(this._parts.hostname);\n      punycode = name && URI.punycode_expression.test(this._parts.hostname);\n    }\n\n    switch (what.toLowerCase()) {\n      case 'relative':\n        return relative;\n\n      case 'absolute':\n        return !relative;\n\n      // hostname identification\n      case 'domain':\n      case 'name':\n        return name;\n\n      case 'sld':\n        return sld;\n\n      case 'ip':\n        return ip;\n\n      case 'ip4':\n      case 'ipv4':\n      case 'inet4':\n        return ip4;\n\n      case 'ip6':\n      case 'ipv6':\n      case 'inet6':\n        return ip6;\n\n      case 'idn':\n        return idn;\n\n      case 'url':\n        return !this._parts.urn;\n\n      case 'urn':\n        return !!this._parts.urn;\n\n      case 'punycode':\n        return punycode;\n    }\n\n    return null;\n  };\n\n  // component specific input validation\n  var _protocol = p.protocol;\n  var _port = p.port;\n  var _hostname = p.hostname;\n\n  p.protocol = function(v, build) {\n    if (v) {\n      // accept trailing ://\n      v = v.replace(/:(\\/\\/)?$/, '');\n\n      if (!v.match(URI.protocol_expression)) {\n        throw new TypeError('Protocol \"' + v + '\" contains characters other than [A-Z0-9.+-] or doesn\\'t start with [A-Z]');\n      }\n    }\n\n    return _protocol.call(this, v, build);\n  };\n  p.scheme = p.protocol;\n  p.port = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      if (v === 0) {\n        v = null;\n      }\n\n      if (v) {\n        v += '';\n        if (v.charAt(0) === ':') {\n          v = v.substring(1);\n        }\n\n        URI.ensureValidPort(v);\n      }\n    }\n    return _port.call(this, v, build);\n  };\n  p.hostname = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v !== undefined) {\n      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };\n      var res = URI.parseHost(v, x);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      v = x.hostname;\n      if (this._parts.preventInvalidHostname) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n    }\n\n    return _hostname.call(this, v, build);\n  };\n\n  // compound accessors\n  p.origin = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var protocol = this.protocol();\n      var authority = this.authority();\n      if (!authority) {\n        return '';\n      }\n\n      return (protocol ? protocol + '://' : '') + this.authority();\n    } else {\n      var origin = URI(v);\n      this\n        .protocol(origin.protocol())\n        .authority(origin.authority())\n        .build(!build);\n      return this;\n    }\n  };\n  p.host = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildHost(this._parts) : '';\n    } else {\n      var res = URI.parseHost(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.authority = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';\n    } else {\n      var res = URI.parseAuthority(v, this._parts);\n      if (res !== '/') {\n        throw new TypeError('Hostname \"' + v + '\" contains characters other than [A-Z0-9.-]');\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.userinfo = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined) {\n      var t = URI.buildUserinfo(this._parts);\n      return t ? t.substring(0, t.length -1) : t;\n    } else {\n      if (v[v.length-1] !== '@') {\n        v += '@';\n      }\n\n      URI.parseUserinfo(v, this._parts);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.resource = function(v, build) {\n    var parts;\n\n    if (v === undefined) {\n      return this.path() + this.search() + this.hash();\n    }\n\n    parts = URI.parse(v);\n    this._parts.path = parts.path;\n    this._parts.query = parts.query;\n    this._parts.fragment = parts.fragment;\n    this.build(!build);\n    return this;\n  };\n\n  // fraction accessors\n  p.subdomain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    // convenience, return \"www\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // grab domain and add another segment\n      var end = this._parts.hostname.length - this.domain().length - 1;\n      return this._parts.hostname.substring(0, end) || '';\n    } else {\n      var e = this._parts.hostname.length - this.domain().length;\n      var sub = this._parts.hostname.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(sub));\n\n      if (v && v.charAt(v.length - 1) !== '.') {\n        v += '.';\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      if (v) {\n        URI.ensureValidHostname(v, this._parts.protocol);\n      }\n\n      this._parts.hostname = this._parts.hostname.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.domain = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // convenience, return \"example.org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      // if hostname consists of 1 or 2 segments, it must be the domain\n      var t = this._parts.hostname.match(/\\./g);\n      if (t && t.length < 2) {\n        return this._parts.hostname;\n      }\n\n      // grab tld and add another segment\n      var end = this._parts.hostname.length - this.tld(build).length - 1;\n      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;\n      return this._parts.hostname.substring(end) || '';\n    } else {\n      if (!v) {\n        throw new TypeError('cannot set domain empty');\n      }\n\n      if (v.indexOf(':') !== -1) {\n        throw new TypeError('Domains cannot contain colons');\n      }\n\n      URI.ensureValidHostname(v, this._parts.protocol);\n\n      if (!this._parts.hostname || this.is('IP')) {\n        this._parts.hostname = v;\n      } else {\n        var replace = new RegExp(escapeRegEx(this.domain()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.tld = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v === 'boolean') {\n      build = v;\n      v = undefined;\n    }\n\n    // return \"org\" from \"www.example.org\"\n    if (v === undefined) {\n      if (!this._parts.hostname || this.is('IP')) {\n        return '';\n      }\n\n      var pos = this._parts.hostname.lastIndexOf('.');\n      var tld = this._parts.hostname.substring(pos + 1);\n\n      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {\n        return SLD.get(this._parts.hostname) || tld;\n      }\n\n      return tld;\n    } else {\n      var replace;\n\n      if (!v) {\n        throw new TypeError('cannot set TLD empty');\n      } else if (v.match(/[^a-zA-Z0-9-]/)) {\n        if (SLD && SLD.is(v)) {\n          replace = new RegExp(escapeRegEx(this.tld()) + '$');\n          this._parts.hostname = this._parts.hostname.replace(replace, v);\n        } else {\n          throw new TypeError('TLD \"' + v + '\" contains characters other than [A-Z0-9]');\n        }\n      } else if (!this._parts.hostname || this.is('IP')) {\n        throw new ReferenceError('cannot set TLD on non-domain host');\n      } else {\n        replace = new RegExp(escapeRegEx(this.tld()) + '$');\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.directory = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path && !this._parts.hostname) {\n        return '';\n      }\n\n      if (this._parts.path === '/') {\n        return '/';\n      }\n\n      var end = this._parts.path.length - this.filename().length - 1;\n      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');\n\n      return v ? URI.decodePath(res) : res;\n\n    } else {\n      var e = this._parts.path.length - this.filename().length;\n      var directory = this._parts.path.substring(0, e);\n      var replace = new RegExp('^' + escapeRegEx(directory));\n\n      // fully qualifier directories begin with a slash\n      if (!this.is('relative')) {\n        if (!v) {\n          v = '/';\n        }\n\n        if (v.charAt(0) !== '/') {\n          v = '/' + v;\n        }\n      }\n\n      // directories always end with a slash\n      if (v && v.charAt(v.length - 1) !== '/') {\n        v += '/';\n      }\n\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n      this.build(!build);\n      return this;\n    }\n  };\n  p.filename = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (typeof v !== 'string') {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var pos = this._parts.path.lastIndexOf('/');\n      var res = this._parts.path.substring(pos+1);\n\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      var mutatedDirectory = false;\n\n      if (v.charAt(0) === '/') {\n        v = v.substring(1);\n      }\n\n      if (v.match(/\\.?\\//)) {\n        mutatedDirectory = true;\n      }\n\n      var replace = new RegExp(escapeRegEx(this.filename()) + '$');\n      v = URI.recodePath(v);\n      this._parts.path = this._parts.path.replace(replace, v);\n\n      if (mutatedDirectory) {\n        this.normalizePath(build);\n      } else {\n        this.build(!build);\n      }\n\n      return this;\n    }\n  };\n  p.suffix = function(v, build) {\n    if (this._parts.urn) {\n      return v === undefined ? '' : this;\n    }\n\n    if (v === undefined || v === true) {\n      if (!this._parts.path || this._parts.path === '/') {\n        return '';\n      }\n\n      var filename = this.filename();\n      var pos = filename.lastIndexOf('.');\n      var s, res;\n\n      if (pos === -1) {\n        return '';\n      }\n\n      // suffix may only contain alnum characters (yup, I made this up.)\n      s = filename.substring(pos+1);\n      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';\n      return v ? URI.decodePathSegment(res) : res;\n    } else {\n      if (v.charAt(0) === '.') {\n        v = v.substring(1);\n      }\n\n      var suffix = this.suffix();\n      var replace;\n\n      if (!suffix) {\n        if (!v) {\n          return this;\n        }\n\n        this._parts.path += '.' + URI.recodePath(v);\n      } else if (!v) {\n        replace = new RegExp(escapeRegEx('.' + suffix) + '$');\n      } else {\n        replace = new RegExp(escapeRegEx(suffix) + '$');\n      }\n\n      if (replace) {\n        v = URI.recodePath(v);\n        this._parts.path = this._parts.path.replace(replace, v);\n      }\n\n      this.build(!build);\n      return this;\n    }\n  };\n  p.segment = function(segment, v, build) {\n    var separator = this._parts.urn ? ':' : '/';\n    var path = this.path();\n    var absolute = path.substring(0, 1) === '/';\n    var segments = path.split(separator);\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (segment !== undefined && typeof segment !== 'number') {\n      throw new Error('Bad segment \"' + segment + '\", must be 0-based integer');\n    }\n\n    if (absolute) {\n      segments.shift();\n    }\n\n    if (segment < 0) {\n      // allow negative indexes to address from the end\n      segment = Math.max(segments.length + segment, 0);\n    }\n\n    if (v === undefined) {\n      /*jshint laxbreak: true */\n      return segment === undefined\n        ? segments\n        : segments[segment];\n      /*jshint laxbreak: false */\n    } else if (segment === null || segments[segment] === undefined) {\n      if (isArray(v)) {\n        segments = [];\n        // collapse empty elements within array\n        for (var i=0, l=v.length; i < l; i++) {\n          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {\n            continue;\n          }\n\n          if (segments.length && !segments[segments.length -1].length) {\n            segments.pop();\n          }\n\n          segments.push(trimSlashes(v[i]));\n        }\n      } else if (v || typeof v === 'string') {\n        v = trimSlashes(v);\n        if (segments[segments.length -1] === '') {\n          // empty trailing elements have to be overwritten\n          // to prevent results such as /foo//bar\n          segments[segments.length -1] = v;\n        } else {\n          segments.push(v);\n        }\n      }\n    } else {\n      if (v) {\n        segments[segment] = trimSlashes(v);\n      } else {\n        segments.splice(segment, 1);\n      }\n    }\n\n    if (absolute) {\n      segments.unshift('');\n    }\n\n    return this.path(segments.join(separator), build);\n  };\n  p.segmentCoded = function(segment, v, build) {\n    var segments, i, l;\n\n    if (typeof segment !== 'number') {\n      build = v;\n      v = segment;\n      segment = undefined;\n    }\n\n    if (v === undefined) {\n      segments = this.segment(segment, v, build);\n      if (!isArray(segments)) {\n        segments = segments !== undefined ? URI.decode(segments) : undefined;\n      } else {\n        for (i = 0, l = segments.length; i < l; i++) {\n          segments[i] = URI.decode(segments[i]);\n        }\n      }\n\n      return segments;\n    }\n\n    if (!isArray(v)) {\n      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;\n    } else {\n      for (i = 0, l = v.length; i < l; i++) {\n        v[i] = URI.encode(v[i]);\n      }\n    }\n\n    return this.segment(segment, v, build);\n  };\n\n  // mutating query string\n  var q = p.query;\n  p.query = function(v, build) {\n    if (v === true) {\n      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    } else if (typeof v === 'function') {\n      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n      var result = v.call(this, data);\n      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else if (v !== undefined && typeof v !== 'string') {\n      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n      this.build(!build);\n      return this;\n    } else {\n      return q.call(this, v, build);\n    }\n  };\n  p.setQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n\n    if (typeof name === 'string' || name instanceof String) {\n      data[name] = value !== undefined ? value : null;\n    } else if (typeof name === 'object') {\n      for (var key in name) {\n        if (hasOwn.call(name, key)) {\n          data[key] = name[key];\n        }\n      }\n    } else {\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\n    }\n\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.addQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.addQuery(data, name, value === undefined ? null : value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.removeQuery = function(name, value, build) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    URI.removeQuery(data, name, value);\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\n    if (typeof name !== 'string') {\n      build = value;\n    }\n\n    this.build(!build);\n    return this;\n  };\n  p.hasQuery = function(name, value, withinArray) {\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\n    return URI.hasQuery(data, name, value, withinArray);\n  };\n  p.setSearch = p.setQuery;\n  p.addSearch = p.addQuery;\n  p.removeSearch = p.removeQuery;\n  p.hasSearch = p.hasQuery;\n\n  // sanitizing URLs\n  p.normalize = function() {\n    if (this._parts.urn) {\n      return this\n        .normalizeProtocol(false)\n        .normalizePath(false)\n        .normalizeQuery(false)\n        .normalizeFragment(false)\n        .build();\n    }\n\n    return this\n      .normalizeProtocol(false)\n      .normalizeHostname(false)\n      .normalizePort(false)\n      .normalizePath(false)\n      .normalizeQuery(false)\n      .normalizeFragment(false)\n      .build();\n  };\n  p.normalizeProtocol = function(build) {\n    if (typeof this._parts.protocol === 'string') {\n      this._parts.protocol = this._parts.protocol.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeHostname = function(build) {\n    if (this._parts.hostname) {\n      if (this.is('IDN') && punycode) {\n        this._parts.hostname = punycode.toASCII(this._parts.hostname);\n      } else if (this.is('IPv6') && IPv6) {\n        this._parts.hostname = IPv6.best(this._parts.hostname);\n      }\n\n      this._parts.hostname = this._parts.hostname.toLowerCase();\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePort = function(build) {\n    // remove port of it's the protocol's default\n    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {\n      this._parts.port = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizePath = function(build) {\n    var _path = this._parts.path;\n    if (!_path) {\n      return this;\n    }\n\n    if (this._parts.urn) {\n      this._parts.path = URI.recodeUrnPath(this._parts.path);\n      this.build(!build);\n      return this;\n    }\n\n    if (this._parts.path === '/') {\n      return this;\n    }\n\n    _path = URI.recodePath(_path);\n\n    var _was_relative;\n    var _leadingParents = '';\n    var _parent, _pos;\n\n    // handle relative paths\n    if (_path.charAt(0) !== '/') {\n      _was_relative = true;\n      _path = '/' + _path;\n    }\n\n    // handle relative files (as opposed to directories)\n    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {\n      _path += '/';\n    }\n\n    // resolve simples\n    _path = _path\n      .replace(/(\\/(\\.\\/)+)|(\\/\\.$)/g, '/')\n      .replace(/\\/{2,}/g, '/');\n\n    // remember leading parents\n    if (_was_relative) {\n      _leadingParents = _path.substring(1).match(/^(\\.\\.\\/)+/) || '';\n      if (_leadingParents) {\n        _leadingParents = _leadingParents[0];\n      }\n    }\n\n    // resolve parents\n    while (true) {\n      _parent = _path.search(/\\/\\.\\.(\\/|$)/);\n      if (_parent === -1) {\n        // no more ../ to resolve\n        break;\n      } else if (_parent === 0) {\n        // top level cannot be relative, skip it\n        _path = _path.substring(3);\n        continue;\n      }\n\n      _pos = _path.substring(0, _parent).lastIndexOf('/');\n      if (_pos === -1) {\n        _pos = _parent;\n      }\n      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);\n    }\n\n    // revert to relative\n    if (_was_relative && this.is('relative')) {\n      _path = _leadingParents + _path.substring(1);\n    }\n\n    this._parts.path = _path;\n    this.build(!build);\n    return this;\n  };\n  p.normalizePathname = p.normalizePath;\n  p.normalizeQuery = function(build) {\n    if (typeof this._parts.query === 'string') {\n      if (!this._parts.query.length) {\n        this._parts.query = null;\n      } else {\n        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));\n      }\n\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeFragment = function(build) {\n    if (!this._parts.fragment) {\n      this._parts.fragment = null;\n      this.build(!build);\n    }\n\n    return this;\n  };\n  p.normalizeSearch = p.normalizeQuery;\n  p.normalizeHash = p.normalizeFragment;\n\n  p.iso8859 = function() {\n    // expect unicode input, iso8859 output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = escape;\n    URI.decode = decodeURIComponent;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.unicode = function() {\n    // expect iso8859 input, unicode output\n    var e = URI.encode;\n    var d = URI.decode;\n\n    URI.encode = strictEncodeURIComponent;\n    URI.decode = unescape;\n    try {\n      this.normalize();\n    } finally {\n      URI.encode = e;\n      URI.decode = d;\n    }\n    return this;\n  };\n\n  p.readable = function() {\n    var uri = this.clone();\n    // removing username, password, because they shouldn't be displayed according to RFC 3986\n    uri.username('').password('').normalize();\n    var t = '';\n    if (uri._parts.protocol) {\n      t += uri._parts.protocol + '://';\n    }\n\n    if (uri._parts.hostname) {\n      if (uri.is('punycode') && punycode) {\n        t += punycode.toUnicode(uri._parts.hostname);\n        if (uri._parts.port) {\n          t += ':' + uri._parts.port;\n        }\n      } else {\n        t += uri.host();\n      }\n    }\n\n    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {\n      t += '/';\n    }\n\n    t += uri.path(true);\n    if (uri._parts.query) {\n      var q = '';\n      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {\n        var kv = (qp[i] || '').split('=');\n        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)\n          .replace(/&/g, '%26');\n\n        if (kv[1] !== undefined) {\n          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)\n            .replace(/&/g, '%26');\n        }\n      }\n      t += '?' + q.substring(1);\n    }\n\n    t += URI.decodeQuery(uri.hash(), true);\n    return t;\n  };\n\n  // resolving relative and absolute URLs\n  p.absoluteTo = function(base) {\n    var resolved = this.clone();\n    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];\n    var basedir, i, p;\n\n    if (this._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    if (!(base instanceof URI)) {\n      base = new URI(base);\n    }\n\n    if (resolved._parts.protocol) {\n      // Directly returns even if this._parts.hostname is empty.\n      return resolved;\n    } else {\n      resolved._parts.protocol = base._parts.protocol;\n    }\n\n    if (this._parts.hostname) {\n      return resolved;\n    }\n\n    for (i = 0; (p = properties[i]); i++) {\n      resolved._parts[p] = base._parts[p];\n    }\n\n    if (!resolved._parts.path) {\n      resolved._parts.path = base._parts.path;\n      if (!resolved._parts.query) {\n        resolved._parts.query = base._parts.query;\n      }\n    } else {\n      if (resolved._parts.path.substring(-2) === '..') {\n        resolved._parts.path += '/';\n      }\n\n      if (resolved.path().charAt(0) !== '/') {\n        basedir = base.directory();\n        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';\n        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;\n        resolved.normalizePath();\n      }\n    }\n\n    resolved.build();\n    return resolved;\n  };\n  p.relativeTo = function(base) {\n    var relative = this.clone().normalize();\n    var relativeParts, baseParts, common, relativePath, basePath;\n\n    if (relative._parts.urn) {\n      throw new Error('URNs do not have any generally defined hierarchical components');\n    }\n\n    base = new URI(base).normalize();\n    relativeParts = relative._parts;\n    baseParts = base._parts;\n    relativePath = relative.path();\n    basePath = base.path();\n\n    if (relativePath.charAt(0) !== '/') {\n      throw new Error('URI is already relative');\n    }\n\n    if (basePath.charAt(0) !== '/') {\n      throw new Error('Cannot calculate a URI relative to another relative URI');\n    }\n\n    if (relativeParts.protocol === baseParts.protocol) {\n      relativeParts.protocol = null;\n    }\n\n    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {\n      return relative.build();\n    }\n\n    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {\n      return relative.build();\n    }\n\n    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {\n      relativeParts.hostname = null;\n      relativeParts.port = null;\n    } else {\n      return relative.build();\n    }\n\n    if (relativePath === basePath) {\n      relativeParts.path = '';\n      return relative.build();\n    }\n\n    // determine common sub path\n    common = URI.commonPath(relativePath, basePath);\n\n    // If the paths have nothing in common, return a relative URL with the absolute path.\n    if (!common) {\n      return relative.build();\n    }\n\n    var parents = baseParts.path\n      .substring(common.length)\n      .replace(/[^\\/]*$/, '')\n      .replace(/.*?\\//g, '../');\n\n    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';\n\n    return relative.build();\n  };\n\n  // comparing URIs\n  p.equals = function(uri) {\n    var one = this.clone();\n    var two = new URI(uri);\n    var one_map = {};\n    var two_map = {};\n    var checked = {};\n    var one_query, two_query, key;\n\n    one.normalize();\n    two.normalize();\n\n    // exact match\n    if (one.toString() === two.toString()) {\n      return true;\n    }\n\n    // extract query string\n    one_query = one.query();\n    two_query = two.query();\n    one.query('');\n    two.query('');\n\n    // definitely not equal if not even non-query parts match\n    if (one.toString() !== two.toString()) {\n      return false;\n    }\n\n    // query parameters have the same length, even if they're permuted\n    if (one_query.length !== two_query.length) {\n      return false;\n    }\n\n    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);\n    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);\n\n    for (key in one_map) {\n      if (hasOwn.call(one_map, key)) {\n        if (!isArray(one_map[key])) {\n          if (one_map[key] !== two_map[key]) {\n            return false;\n          }\n        } else if (!arraysEqual(one_map[key], two_map[key])) {\n          return false;\n        }\n\n        checked[key] = true;\n      }\n    }\n\n    for (key in two_map) {\n      if (hasOwn.call(two_map, key)) {\n        if (!checked[key]) {\n          // two contains a parameter not present in one\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  // state\n  p.preventInvalidHostname = function(v) {\n    this._parts.preventInvalidHostname = !!v;\n    return this;\n  };\n\n  p.duplicateQueryParameters = function(v) {\n    this._parts.duplicateQueryParameters = !!v;\n    return this;\n  };\n\n  p.escapeQuerySpace = function(v) {\n    this._parts.escapeQuerySpace = !!v;\n    return this;\n  };\n\n  return URI;\n}));\n","/*! https://mths.be/punycode v1.4.0 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","/**\n * Copyright 2016 PT Inovação e Sistemas SA\n * Copyright 2016 INESC-ID\n * Copyright 2016 QUOBIS NETWORKS SL\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n * Copyright 2016 ORANGE SA\n * Copyright 2016 Deutsche Telekom AG\n * Copyright 2016 Apizee\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\nconst methods = {GET: 'get', POST: 'post'}\n/**\n * @typedef {Object} Request\n * @desc Bridge to make HTTP requests\n * @property {function(url:string, options:Object):string} get\n * @property {function(url:string, options:Object):string} post\n */\n\n/**\n * Bridge to make HTTP requests\n */\nclass Request {\n\n\tconstructor() {\n\t\tlet _this = this\n\n\t\tObject.keys(methods).forEach(function(method) {\n\t\t\t_this[methods[method]] = function(url, options) {\n\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\t_this._makeLocalRequest(methods[method].toUpperCase(), url, options).then(function(result) {\n\t\t\t\t\t\tresolve(result)\n\t\t\t\t\t}).catch(function(reason) {\n\t\t\t\t\t\treject(reason)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\t_makeLocalRequest(method, url, options) {\n\t\tlet _this = this\n\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\turl = _this._mapProtocol(url)\n\t\t\tlet xhr = new XMLHttpRequest()\n\n\t\t\txhr.open(method, url, true)\n\n\t\t\txhr.onreadystatechange = function(event) {\n\t\t\t\tlet xhr = event.currentTarget\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\tif (xhr.status >= 200 || xhr.status <= 299) {\n\t\t\t\t\t\tresolve(xhr.responseText)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(xhr.responseText)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(options && options.headers) {\n\t\t\t\tfor(let prop in options.headers) {\n\t\t\t\t\txhr.setRequestHeader(prop, options.headers[prop])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txhr.send(options?options.body:null)\n\t\t})\n\n\t}\n\n\t_mapProtocol(url) {\n\t\tlet protocolmap = {\n\t\t\t'localhost://': 'https://',\n\t\t\t'undefined://': 'https://',\n\t\t\t'hyperty-catalogue://': 'https://',\n\t\t\t'https://': 'https://',\n\t\t\t'http://': 'http://'\n\t\t}\n\n\t\tlet foundProtocol = false\n\t\tfor (let protocol in protocolmap) {\n\t\t\tif (url.slice(0, protocol.length) === protocol) {\n\t\t\t\turl = protocolmap[protocol] + url.slice(protocol.length, url.length)\n\t\t\t\tfoundProtocol = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (!foundProtocol) {\n\t\t\tthrow new Error('Invalid protocol of url: ' + url)\n\t\t}\n\n\t\treturn url\n\t}\n}\n\nexport default Request\n","// TODO: import and extend the class of the service-framework\n// service-framework/dist/RuntimeCapabilities;\n\nclass RuntimeCapabilities {\n\n  constructor(storageManager) {\n    if (!storageManager) throw new Error('The Runtime Capabilities need the storageManager');\n\n    this.storageManager = storageManager;\n  }\n\n  /**\n   * Returns as a promise RuntimeCapabilities json object with all available capabilities of the runtime.\n   * If it was not yet persisted in the Storage Manager it collects all required info from the platform and saves in the storage manager.\n   * @returns {Promise<object>}\n   */\n  getRuntimeCapabilities() {\n\n    return new Promise((resolve, reject) => {\n\n      Promise.all([this._getEnvironment(), this._getMediaDevices()]).then((result) => {\n        let capabilities = {};\n        result.forEach((capability) => {\n          Object.assign(capabilities, capability);\n        });\n\n        this.storageManager.set('capabilities', '1', capabilities);\n\n        resolve(capabilities);\n      }).catch((error) => {\n        reject(error);\n      });\n\n    });\n\n  }\n\n  /**\n   * returns as a promise a boolean according to available capabilities.\n   * @returns {Promise<boolean>}\n   */\n  isAvailable(capability) {\n    return new Promise((resolve) => {\n\n      this.storageManager.get('capabilities').then((capabilities) => {\n\n        console.log('Capability ' + capability + ' is available? ', capabilities.hasOwnProperty(capability) && capabilities[capability]);\n        if (capabilities.hasOwnProperty(capability) && capabilities[capability]) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      });\n\n    });\n  }\n\n  /**\n   * it refreshes previously collected capabilities and updates the storage manager\n   */\n  update() {\n    return new Promise((resolve, reject) => {\n      this.getRuntimeCapabilities().then(resolve).catch(reject);\n    });\n  }\n\n  // TODO: organize the code in separated files\n  _getEnvironment() {\n\n    // TODO: this should be more effective and check the environment\n    return {\n      browser: !!(window && navigator),\n      node: !!!(window && navigator)\n    };\n  }\n\n  // TODO: organize the code in separated files\n  _getMediaDevices() {\n    return new Promise((resolve) => {\n\n      let capability = {};\n\n      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n        console.log('enumerateDevices() not supported.');\n        resolve(capability);\n        return;\n      }\n\n      // List cameras and microphones.\n      navigator.mediaDevices.enumerateDevices()\n      .then((devices) => {\n        devices.forEach((device) => {\n          // console.log('Devices:', device.kind, device.label, device.deviceId);\n          if (device.kind === 'audioinput') {\n            capability.mic = true;\n          }\n\n          if (device.kind === 'videoinput') {\n            capability.camera = true;\n\t    capability.windowSandbox = true;\n          }\n        });\n        resolve(capability);\n      })\n      .catch((err) => {\n        resolve(capability);\n        console.log(err.name + ': ' + err.message);\n      });\n    });\n  }\n\n}\n\nexport default RuntimeCapabilities;\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport PersistenceManager from 'service-framework/dist/PersistenceManager';\nimport { createSandbox } from './Sandboxes';\nimport SandboxApp from './SandboxApp';\nimport Request from './Request';\nimport RuntimeCapabilities from './RuntimeCapabilities';\nimport StorageManager from 'service-framework/dist/StorageManager';\nimport Dexie from 'dexie';\nimport { RuntimeCatalogue } from 'service-framework/dist/RuntimeCatalogue';\n\n/**\n * Is a bridge to isolate the runtime from the specific platform\n * @typedef {Object} RuntimeFactory\n * @property {function():Sandbox} createSandbox Creates a new Sandbox\n * @property {function():SandboxApp} createAppSandbox Creates a new SandboxApp\n * @property {function():Request} createHttpRequest Creates a new Request object\n * @property {function():RuntimeCatalogue} createRuntimeCatalogue Creates a new RuntimeCatalogue\n * @property {function(Encoded data: string):string} atob Returns the string decoded\n * @property {function():PersistenceManager} persistenceManager Returns a new PersistenceManager\n * @property {function():StorageManager} storageManager Returns a new StorageManager\n * @property {function():RuntimeCapabilities} runtimeCapabilities Returns a new RuntimeCapabilities\n */\nexport default {\n  createSandbox(constraints) {\n    return createSandbox(constraints);\n  },\n\n  createAppSandbox() {\n    return new SandboxApp();\n  },\n\n  createHttpRequest() {\n    let request = new Request();\n    return request;\n  },\n\n  createRuntimeCatalogue() {\n    if (!this.catalogue) { this.catalogue = new RuntimeCatalogue(this); }\n\n    return this.catalogue;\n  },\n\n  atob(b64) {\n    return atob(b64);\n  },\n\n  persistenceManager() {\n    let localStorage = window.localStorage;\n    return new PersistenceManager(localStorage);\n  },\n  storageManager(name, schemas) {\n\n    if (!this.databases) { this.databases = {}; }\n    if (!this.storeManager) { this.storeManager = {}; }\n\n    // To make the storage persitent and now allow the system clear the storage when is under pressure;\n    if (navigator && navigator.storage && navigator.storage.persist) {\n      navigator.storage.persist().then(function(persistent) {\n        if (persistent) { console.log('Storage will not be cleared except by explicit user action'); } else { console.log('Storage may be cleared by the UA under storage pressure.'); }\n      });\n    }\n\n    // Using the implementation of Service Framework\n    // Dexie is the IndexDB Wrapper\n    if (!this.databases.hasOwnProperty(name)) {\n      this.databases[name] = new Dexie(name);\n    }\n\n    if (!this.storeManager.hasOwnProperty(name)) {\n      this.storeManager[name] = new StorageManager(this.databases[name], name, schemas);\n    }\n\n    return this.storeManager[name];\n  },\n\n  runtimeCapabilities() {\n\n    if (!this.capabilitiesManager) {\n      let storageManager = this.storageManager('capabilities');\n      this.capabilitiesManager = new RuntimeCapabilities(storageManager);\n    }\n\n    return this.capabilitiesManager;\n  }\n};\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport { Sandbox, SandboxType } from 'runtime-core/dist/sandbox';\nimport MiniBus from 'runtime-core/dist/minibus';\n\n/**\n * Proxy for the Application context\n * */\nexport default class SandboxApp extends Sandbox {\n  constructor() {\n    super();\n\n    /**\n\t\t * @type {runtime-core/dist/sandbox/SandboxType}\n\t\t */\n    this.type = SandboxType.NORMAL;\n    window.addEventListener('message', function(e) {\n      if (!this.origin) {\n        /**\n\t\t\t\t * @type {Window}\n\t\t\t\t */\n        this.origin = e.source;\n      }\n\n      if (typeof e.data === 'string') {\n        return;\n      }\n\n      if (e.data.hasOwnProperty('to') && e.data.to.startsWith('core:')) { return; }\n\n      // this._onMessage(JSON.parse(JSON.stringify(e.data)));\n      this._onMessage(e.data);\n    }.bind(this));\n\n    window.addEventListener('error', function(error) {\n      console.error('[SANDBOX APP] - Error', error);\n      throw error;\n    }.bind(this));\n\n  }\n\n  _onPostMessage(msg) {\n    this.origin.postMessage(msg, '*');\n  }\n}\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport { Sandbox, SandboxType } from 'runtime-core/dist/sandbox';\nimport MiniBus from 'runtime-core/dist/minibus';\nimport RuntimeFactory from './RuntimeFactory';\n\n/**\n * Proxy for a WebWorker\n * */\nexport class SandboxWorker extends Sandbox {\n  static capabilities() {\n    return RuntimeFactory.runtimeCapabilities().getRuntimeCapabilities()\n      .then(capabilities =>Object.assign(capabilities, { mic: false, camera: false, windowSandbox: false }));\n  }\n\n  static new(capabilities) {\n    return new SandboxWorker(capabilities, './context-service.js');\n  }\n\n  /**\n\t * @param {string} script - Script that will be loaded in the web worker\n\t */\n  constructor(capabilities, script) {\n    super(capabilities);\n\n    /**\n\t\t * @type {runtime-core/dist/sandbox/SandboxType}\n\t\t */\n    this.type = SandboxType.NORMAL;\n    if (Worker) {\n      this._worker = new Worker(script);\n      this._worker.addEventListener('message', function(e) {\n        this._onMessage(e.data);\n      }.bind(this));\n\n      this._worker.addEventListener('error', function(error) {\n        console.log('[Sandbox Worker] - Error: ', error);\n        throw JSON.stringify(error);\n      }.bind(this));\n\n      this._worker.postMessage('');\n    } else {\n      throw new Error('Your environment does not support worker \\n');\n    }\n  }\n\n  _onPostMessage(msg) {\n    this._worker.postMessage(msg);\n  }\n}\n\nexport class SandboxWindow extends Sandbox {\n  static capabilities() {\n    return RuntimeFactory.runtimeCapabilities().getRuntimeCapabilities();\n  }\n\n  static new(capabilities) {\n    return new SandboxWindow(capabilities);\n  }\n\n  constructor(capabilities) {\n    super(capabilities);\n\n    this.type = SandboxType.WINDOW;\n    this.channel = new MessageChannel();\n\n    this.channel.port1.onmessage = function(e) {\n      this._onMessage(e.data);\n    }.bind(this);\n\n    parent.postMessage({ to: 'runtime:createSandboxWindow' }, '*', [this.channel.port2]);\n  }\n\n  _onPostMessage(msg) {\n    this.channel.port1.postMessage(msg);\n  }\n}\n\nexport function createSandbox(constraints) {\n  const sandboxes = [SandboxWorker, SandboxWindow];\n  let diff = (a, b) => Object.keys(a).filter(x => a[x] !== b[x]);\n\n  return Promise.all(sandboxes.map(s => s.capabilities().then(c=>{ return {capabilities: c, sandbox: s}; })))\n    .then(sbs => {\n      let i = 0;\n      while (i < sbs.length) {\n        if (diff(constraints, sbs[i].capabilities).length === 0) {\n          let capabilities = sbs[i].capabilities;\n          let sandbox = sbs[i].sandbox.new(capabilities);\n          return sandbox;\n        }\n\n        i++;\n      }\n      throw new Error('None of supported sandboxes match your constraints');\n    });\n}\n","// jshint browser:true, jquery: true\n\nclass IdentitiesGUI {\n\n  constructor(guiURL, idmURL, messageBus) {\n    console.log('IdentitiesGUI', this);\n    //if (!identityModule) throw Error('Identity Module not set!');\n    if (!messageBus) throw Error('Message Bus not set!');\n    let _this = this;\n    _this._guiURL = guiURL;\n    _this._idmURL = idmURL;\n    _this._messageBus = messageBus;\n    _this._alreadyReLogin = false;\n    _this._alreadyLogin = false;\n\n    this.callIdentityModuleFunc('deployGUI', {}).then((result) => {\n      return this._buildDrawer();\n    }).then((result) => {\n      console.log('READY:', result);\n    });\n\n    this.isLogged = false;\n\n    const drawerEl = document.querySelector('.mdc-temporary-drawer');\n    const MDCTemporaryDrawer = mdc.drawer.MDCTemporaryDrawer;\n    const drawer = new MDCTemporaryDrawer(drawerEl);\n\n    this._drawerEl = drawerEl;\n    this._drawer = drawer;\n\n    document.querySelector('.settings-btn').addEventListener('click', function() {\n      drawer.open = true;\n    });\n\n    drawerEl.addEventListener('MDCTemporaryDrawer:open', () => {\n      console.log('Received MDCTemporaryDrawer:open');\n      this._isDrawerOpen = true;\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n    });\n\n    drawerEl.addEventListener('MDCTemporaryDrawer:close', () => {\n      console.log('Received MDCTemporaryDrawer:close');\n      this._isDrawerOpen = false;\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n    });\n\n  }\n\n  logOut() {\n    let _this = this;\n    console.log('IdentitiesGUI: logging out');\n    return new Promise((resolve, reject) => {\n\n      console.log('Building drawer');\n      _this._buildDrawer();\n\n      resolve('Gui reset');\n\n\n    });\n  }\n\n  _buildDrawer() {\n\n    const guiURL = this._guiURL;\n\n    this._messageBus.addListener(guiURL, msg => {\n\n      const funcName = msg.body.method;\n\n      if (msg.type !== 'response') {\n\n\n        if (!this.isLogged) {\n\n          const clickClose = new MouseEvent('click');\n          document.querySelector('.settings-btn').dispatchEvent(clickClose);\n\n        }\n\n      }\n\n      if (funcName === 'openPopup') {\n\n        this.openPopup().then(() => {\n\n          let urlreceived = msg.body.params.urlreceived;\n          this.openPopup(urlreceived).then((returnedValue) => {\n            let value = {type: 'execute', value: returnedValue, code: 200};\n            let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n            this._messageBus.postMessage(replyMsg);\n          });\n\n        });\n\n        return;\n\n      }\n\n      const callback = (identityInfo) => {\n\n        this.isLogged = true;\n\n        this._buildMessage(msg, identityInfo);\n\n      };\n\n      this.callback = callback;\n\n      this._getIdentities(callback, true);\n\n    });\n\n    this._getIdentities();\n\n  }\n\n  _buildMessage(msg, identityInfo) {\n    let replyMsg;\n    let value;\n\n    const from = msg ? msg.from : this._guiURL;\n    const to = msg ? msg.to : this._idmURL;\n\n    console.log('chosen identity: ', identityInfo);\n\n    switch (identityInfo.type) {\n      case 'idp':\n        value = { type: 'idp', value: identityInfo.value, code: 200 };\n        break;\n\n      case 'identity':\n        value = { type: 'identity', value: identityInfo.value, code: 200 };\n        break;\n\n      default:\n        value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n    }\n\n    replyMsg = {id: msg.id, type: 'response', to: from, from: to, body: value };\n\n    this._messageBus.postMessage(replyMsg);\n  }\n\n  _getIdentities(callback, oPenDrawer) {\n\n    return this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((resultObject) => {\n      if (callback) {\n        return Promise.all([this.showIdps(resultObject.idps, callback), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject, callback, oPenDrawer)]);\n      } else {\n        return Promise.all([this.showIdps(resultObject.idps), this.showDefaultIdentity(resultObject.defaultIdentity), this.showIdentities(resultObject)]);\n      }\n    });\n\n  }\n\n  // _openDrawer() {\n\n  //   let _this = this;\n  //   const guiURL = _this._guiURL;\n\n  //   _this.resultURL  = undefined;\n\n  //   _this._messageBus.addListener(guiURL, msg => {\n  //     let identityInfo = msg.body.value;\n  //     let funcName = msg.body.method;\n  //     let value;\n  //     console.log('[IdentitiesGUI] received msg: ', msg);\n\n  //     _this.showIdentitiesGUI(msg.body.value).then((identityInfo) => {\n\n  //       let replyMsg;\n  //       console.log('[IdentitiesGUI] identityInfo from GUI: ', identityInfo);\n\n  //       //hide config page with the identity GUI\n  //       parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n  //       $('.admin-page').addClass('hide');\n\n  //       // document.getElementsByTagName('body')[0].style = 'background-color:transparent';\n  //       $('.identities-section').addClass('hide');\n  //       $('.policies-section').addClass('hide');\n\n  //       switch (identityInfo.type) {\n  //         case 'idp':\n  //           value = { type: 'idp', value: identityInfo.value, code: 200 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //           break;\n\n  //         case 'identity':\n  //           value = { type: 'identity', value: identityInfo.value, code: 200 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //           break;\n\n  //         default:\n  //           value = { type: 'error', value: 'Error on identity GUI', code: 400 };\n  //           replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n  //           _this._messageBus.postMessage(replyMsg);\n  //       }\n  //     });\n\n  //     if (funcName === 'openPopup') {\n  //       let urlreceived = msg.body.params.urlreceived;\n  //       _this.openPopup(urlreceived).then((returnedValue) => {\n  //         let value = {type: 'execute', value: returnedValue, code: 200};\n  //         let replyMsg = {id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value};\n  //         _this._messageBus.postMessage(replyMsg);\n  //       });\n  //       return; // this avoids getting stuck in the identities page\n  //     }\n\n  //     // unhide the config page with the identity GUI\n  //     // document.getElementsByTagName('body')[0].style = 'background-color:white;';\n  //     parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n\n  //     const clickOpen = new MouseEvent('click');\n  //     document.querySelector('.settings-btn').dispatchEvent(clickOpen);\n\n  //     $('.admin-page').removeClass('hide');\n\n  //   });\n  // }\n\n  callIdentityModuleFunc(methodName, parameters) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      const message = { type: 'execute', to: _this._idmURL, from: _this._guiURL,\n        body: { resource: 'identity', method: methodName, params: parameters }};\n\n      this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n\n    });\n  }\n\n  openPopup(urlreceived) {\n\n    \n\n    return new Promise((resolve, reject) => {\n\n      function wait(ms) {\n        var start = new Date().getTime();\n        var end = start;\n        while (end < start + ms) {\n          end = new Date().getTime();\n        }\n      }\n\n      let win;\n      if (!urlreceived) {\n        win = window.open('', 'openIDrequest', 'location=1,status=1');\n        this.win = win;\n        resolve();\n      } else {\n        wait(1000);  \n        win = this.win;\n        win.location.href = urlreceived;\n      }\n\n      // let win = window.open(urlreceived, 'openIDrequest', 'location=1,status=1,scrollbars=1');\n      if (window.cordova) {\n        win.addEventListener('loadstart', function(e) {\n          let url = e.url;\n          let code = /\\&code=(.+)$/.exec(url);\n          let error = /\\&error=(.+)$/.exec(url);\n\n          if (code || error) {\n            win.close();\n            return resolve(url);\n          } else {\n            return reject('openPopup error 1 - should not happen');\n          }\n        });\n      } else {\n\n        let pollTimer = setInterval(function() {\n          try {\n            if (win.closed) {\n              clearInterval(pollTimer);\n\n              // return reject('Some error occured when trying to get identity.');\n            }\n\n            if ((win.document.URL.indexOf('access_token') !== -1 || win.document.URL.indexOf('code') !== -1) && win.document.URL.indexOf(location.origin) !== -1) {\n              window.clearInterval(pollTimer);\n              let url =   win.document.URL;\n\n              resolve(url);\n              return win.close();\n            }\n          } catch (e) {\n            //return reject('openPopup error 2 - should not happen');\n            // console.log(e);\n          }\n\n        }, 500);\n      }\n\n    });\n  }\n\n  // showIdentitiesGUI(receivedInfo) {\n  //   let _this = this;\n\n  //   return new Promise((resolve, reject) => {\n  //     console.log('[IdentitiesGUI.showIdentitiesGUI] receivedInfo: ', receivedInfo);\n\n  //     let identityInfo;\n  //     let toRemoveID;\n\n  //     let callback = (value) => {\n  //       console.log('chosen identity: ', value);\n\n  //       const clickClose = new MouseEvent('click');\n  //       document.querySelector('.settings-btn').dispatchEvent(clickClose);\n\n  //       resolve({type: 'identity', value: value});\n  //     };\n\n  //     _this._checkReceivedInfo(receivedInfo).then((resultObject) => {\n  //       identityInfo = resultObject.identityInfo;\n  //       toRemoveID = resultObject.toRemoveID;\n\n  //       $('.policies-section').addClass('hide');\n  //       $('.identities-section').removeClass('hide');\n\n  //       _this.showIdps(receivedInfo.idps, callback);\n\n  //       _this.showIdentities(identityInfo.identities, toRemoveID).then((identity) => {\n  //         console.log('chosen identity: ', identity);\n  //         resolve({type: 'identity', value: identity});\n  //       });\n\n  //       let idps = [];\n  //       let idpsObjects = identityInfo.idps;\n\n  //       idpsObjects.forEach(function(entry) {\n  //         if(entry.type && entry.type == 'idToken') {\n  //           idps.push(entry.domain);\n  //         }\n  //       });\n\n  //       $('#idproviders').html(_this._getList(idps));\n  //       $('#idproviders').off();\n  //       // $('#idproviders').on('click', (event) => _this.obtainNewIdentity(event, callback, toRemoveID));\n  //       //$('.back').on('click', (event) => _this.goHome());\n  //       $('.identities-reset').off();\n  //       // $('.identities-reset').on('click', (event) => _this._resetIdentities(callback));\n  //     });\n  //   });\n  // }\n\n  _checkReceivedInfo(receivedInfo) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n\n      let identityInfo;\n      let toRemoveID;\n\n      if (receivedInfo) {\n        identityInfo = receivedInfo;\n        toRemoveID = false;\n        resolve({identityInfo: identityInfo, toRemoveID: toRemoveID});\n      } else {\n        toRemoveID = true;\n        _this.callIdentityModuleFunc('getIdentitiesToChoose', {}).then((result) => {\n          resolve({identityInfo: result, toRemoveID: toRemoveID});\n        });\n      }\n    });\n  }\n\n  showIdps(idps) {\n\n    console.log('[IdentitiesGUI.showIdps] : ', idps);\n\n    let idpsListEl = document.getElementById('idps-list');\n\n    const clickEvent = (event) => {\n      const el = event.currentTarget;\n      const idp = el.getAttribute('data-idp');\n\n      this.loginWithIDP(idp).then((result) => {\n        // console.log('value here: ', result.value);\n        // result.value = result.value.userURL\n\n        if (this.callback) {\n          this.callback(result);\n        }\n\n      });\n    };\n\n    idps.forEach((key) => {\n\n      let linkEl = document.getElementById('link-' + key.domain);\n\n      if (!linkEl) {\n        linkEl = document.createElement('a');\n        linkEl.setAttribute('id', 'link-' + key.domain);\n        linkEl.setAttribute('data-idp', key.domain);\n        linkEl.classList = 'mdc-list-item link-' + key.domain;\n        linkEl.href = '#';\n\n        const linkElText = document.createTextNode(key.domain);\n\n        let name = key.domain;\n        if (name.indexOf('.') !== -1) {\n          name = name.substring(0, name.indexOf('.'));\n        } else {\n          name = 'question';\n        }\n\n        const imgEl = document.createElement('img');\n        imgEl.classList = 'mdc-list-item__start-detail';\n        imgEl.src = './assets/' + name + '.svg';\n        imgEl.width = 30;\n        imgEl.height = 30;\n\n        imgEl.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\n\n        linkEl.appendChild(imgEl);\n        linkEl.appendChild(linkElText);\n\n        idpsListEl.appendChild(linkEl);\n      } else {\n        linkEl.removeEventListener('click', clickEvent);\n      }\n\n      linkEl.addEventListener('click', clickEvent);\n\n    });\n\n  }\n\n  showDefaultIdentity(identity) {\n\n    if (identity) {\n\n      this.isLogged = true;\n\n      const header = document.querySelector('.mdc-list--avatar-list');\n\n      let itemEl = document.getElementById('item-' + identity.userProfile.userURL);\n\n      if (!itemEl) {\n\n        itemEl = document.createElement('li');\n        itemEl.id = 'item-' + identity.userProfile.userURL;\n        itemEl.classList = 'mdc-list-item item-' + identity.userProfile.userURL;\n        itemEl.setAttribute('data-userURL', identity.userProfile.userURL);\n\n        const profileImage = document.createElement('img');\n        profileImage.classList = 'mdc-list-item__start-detail';\n        profileImage.width = 56;\n        profileImage.height = 56;\n        profileImage.alt = identity.userProfile.name;\n        profileImage.src = identity.userProfile.picture;\n        itemEl.appendChild(profileImage);\n\n        const text1 = document.createElement('span');\n        text1.classList = 'name mdc-list-item__text';\n        text1.textContent = identity.userProfile.name;\n\n        const text2 = document.createElement('span');\n        text2.classList = 'email mdc-list-item__secondary-text';\n        text2.textContent = identity.userProfile.email;\n\n        text1.appendChild(text2);\n        itemEl.appendChild(text1);\n        header.appendChild(itemEl);\n\n      }\n\n    }\n\n  }\n\n  showIdentities(iDs, callback, oPenDrawer = false) {\n\n    return new Promise((resolve, reject) => {\n\n      console.log('[IdentitiesGUI.showMyIdentities] : ', iDs.identities, iDs.defaultIdentity);\n\n      const identities = iDs.identities;\n      const current = iDs.defaultIdentity ? iDs.defaultIdentity.userURL : '';\n\n      let activeIdentities = document.getElementById('active-identities');\n\n      Object.keys(identities).forEach((key) => {\n\n        const exist = document.getElementById('link-' + key);\n        if (exist) { return; }\n\n        const linkEl = document.createElement('a');\n        linkEl.href = '#';\n        linkEl.id = 'link-' + key;\n        linkEl.classList = 'mdc-list-item';\n        linkEl.setAttribute('data-userURL', key);\n\n        if (key === current) {\n          linkEl.classList += ' mdc-temporary-drawer--selected';\n        }\n\n        linkEl.addEventListener('click', (event) => {\n\n          event.preventDefault();\n\n          const el = event.currentTarget;\n          const userURL = el.getAttribute('data-userURL');\n\n          console.log('userURL:', userURL, callback, el);\n\n          if (callback) {\n            callback(userURL);\n          }\n\n        });\n\n        const profileImage = document.createElement('img');\n        profileImage.classList = 'mdc-list-item__start-detail';\n        profileImage.width = 40;\n        profileImage.height = 40;\n        profileImage.alt = identities[key].userProfile.name;\n        profileImage.src = identities[key].userProfile.picture;\n        profileImage.onerror = (e) => { e.srcElement.src = './assets/question.svg'; };\n\n        const text1 = document.createElement('span');\n        text1.classList = 'name mdc-list-item__text';\n        text1.textContent = identities[key].userProfile.name;\n\n        const text2 = document.createElement('span');\n        text2.classList = 'email mdc-list-item__secondary-text';\n        text2.textContent = identities[key].userProfile.email;\n\n        text1.appendChild(text2);\n\n        linkEl.appendChild(profileImage);\n        linkEl.appendChild(text1);\n\n        activeIdentities.appendChild(linkEl);\n\n      });\n\n      if (oPenDrawer && (!this._alreadyReLogin)) {\n        this._drawer.open = true\n      }\n\n      if (oPenDrawer && (!this._alreadyReLogin) && (!this._alreadyLogin)) {\n        this._alreadyReLogin = true;\n        parent.postMessage({ body: { method: 'tokenExpired' }, to: 'runtime:gui-manager' }, '*');\n      }\n\n\n\n\n/*\n      if (Object.keys(identities).length === 1) {\n\n        if (callback) {\n          callback({type: 'identity', value: current});\n        }\n\n        return resolve({type: 'identity', value: current});\n      }*/\n\n\n      // let callback = (identity) => {\n      //   resolve(identity);\n      // };\n\n      // if (!toRemoveID) {\n      //   $('.clickable-cell').on('click', (event) => _this.changeID(event, callback));\n      // }\n\n      // $('.remove-id').on('click', (event) => _this.removeID(iDs));\n\n    });\n  }\n\n  removeID(event, emails) {\n    let _this = this;\n    let row = event.target.parentNode.parentNode;\n    let idToRemove = row.children[0].textContent;\n    let domain = row.children[1].textContent;\n\n    _this.callIdentityModuleFunc('unregisterIdentity', { email: idToRemove }).then(() => {\n      let numEmails = emails.length;\n      for (let i = 0; i < numEmails; i++) {\n        if (emails[i].email === idToRemove) {\n          emails.splice(i, 1);\n          break;\n        }\n      }\n\n      // -------------------------------------------------------------------------//\n      _this.showIdentities(emails, true);\n    });\n\n    //_this.identityModule.unregisterIdentity(idToRemove);\n\n  }\n\n  authorise(idp, resource) {\n\n\n    return this.openPopup()\n      .then((res) => {\n        const data = { scope: resource, idpDomain: idp };\n        return this.callIdentityModuleFunc('getAccessTokenAuthorisationEndpoint', data);\n      })\n      .then((value) => {\n        console.log('[IdentitiesGUI.authorise] receivedURL from idp Proxy: ' + value);\n\n        return this.openPopup(value);\n      }).then((result) => {\n\n        console.log('[IdentitiesGUI.authorise.openPopup.result]', result);\n\n        // resource as array\n\n\n        const data = { resources: [resource], idpDomain: idp, login: result };\n        return this.callIdentityModuleFunc('getAccessToken', data);\n      }).then((result) => {\n\n        console.log('[IdentitiesGUI.authorise.getAccessToken.result]', result);\n        return this.callIdentityModuleFunc('addAccessToken', result);\n      }).then((value) => {\n        this._drawer.open = false;\n        return value;\n      });\n\n  }\n\n  loginWithIDP(idp) {\n\n\n    let _publicKey;\n\n    return this.openPopup()\n      .then((result) => {\n        return this.callIdentityModuleFunc('getMyPublicKey', {});\n      }).then((publicKey) => {\n        _publicKey = publicKey;\n        const data = { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idp };\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\n      })\n      .then((value) => {\n        console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n        let url = value.loginUrl;\n        let finalURL;\n\n        //check if the receivedURL contains the redirect field and replace it\n        if (url.indexOf('redirect_uri') !== -1) {\n          let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n          let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n          let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n          //check if the reddirect field is the last field of the URL\n          if (secondPart.indexOf('&') !== -1) {\n            finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n          } else {\n            finalURL = firstPart + 'redirect_uri=' + location.origin;\n          }\n        }\n\n        this.resultURL = finalURL || url;\n\n        console.log('[IdentitiesGUI.openPopup]', this.resultURL);\n        return this.openPopup(this.resultURL);\n      }).then((identity) => {\n\n        console.log('[IdentitiesGUI.openPopup.result]', identity);\n\n        const data = { contents: _publicKey, origin: 'origin', usernameHint: identity, idpDomain: idp };\n        return this.callIdentityModuleFunc('sendGenerateMessage', data);\n      }).then((result) => {\n\n        console.log('[IdentitiesGUI.sendGenerateMessage.result]', result);\n        return this.callIdentityModuleFunc('addAssertion', result);\n      }).then((value) => {\n\n        this._drawer.open = false;\n        const userURL = {type: 'identity', value: value.userProfile.userURL};\n        // const userIdentity = {type: 'identity', value: value.userProfile};\n\n        console.log('[IdentitiesGUI.loginWithIDP final]', value);\n        this._alreadyLogin = true;\n        return userURL;\n        // return userIdentity;\n      });\n\n  }\n\n  // obtainNewIdentity(event, callback, toRemoveID) {\n  //   let _this = this;\n  //   let idProvider = event.target.textContent;\n  //   let idProvider2 = event.target.text;\n\n  //   _this.callIdentityModuleFunc('getMyPublicKey', {}).then((publicKey) => {\n  //     // let publicKey = btoa(keyPair.public);\n\n  //     _this.callIdentityModuleFunc('sendGenerateMessage',\n  //       { contents: publicKey, origin: 'origin', usernameHint: undefined, idpDomain: idProvider, }).then((value) => {\n  //       console.log('[IdentitiesGUI.obtainNewIdentity] receivedURL from idp Proxy: ' + value.loginUrl.substring(0, 20) + '...');\n\n  //       let url = value.loginUrl;\n  //       let finalURL;\n\n  //       //check if the receivedURL contains the redirect field and replace it\n  //       if (url.indexOf('redirect_uri') !== -1) {\n  //         let firstPart = url.substring(0, url.indexOf('redirect_uri'));\n  //         let secondAuxPart = url.substring(url.indexOf('redirect_uri'), url.length);\n\n  //         let secondPart = secondAuxPart.substring(secondAuxPart.indexOf('&'), url.length);\n\n  //         //check if the reddirect field is the last field of the URL\n  //         if (secondPart.indexOf('&') !== -1) {\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin + secondPart;\n  //         } else {\n  //           finalURL = firstPart + 'redirect_uri=' + location.origin;\n  //         }\n  //       }\n\n  //       _this.resultURL = finalURL || url;\n\n  //       $('.login-idp').html('<p>Chosen IDP: ' + idProvider + '</p>');\n  //       $('.login').removeClass('hide');\n  //       $('.login-btn').off();\n  //       $('.login-btn').on('click', (event) => {\n  //         $('.login').addClass('hide');\n  //         // _this._authenticateUser(publicKey, value, 'origin', idProvider).then((email) => {\n  //         //   callback(email);\n  //         //   _this.showIdentitiesGUI();\n  //         // });\n  //       });\n  //     });\n  //   }).catch(err => console.log('obtanin new identity', err));\n\n  // }\n\n  _getList(items) {\n    let list = '';\n    let numItems = items.length;\n\n    for (let i = 0; i < numItems; i++) {\n      list += '<li class=\"divider\"></li>';\n      list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n    }\n\n    return list;\n  }\n\n  _authenticateUser(publicKey, value, origin, idProvider) {\n    let _this = this;\n    let url = _this.resultURL;\n\n    return new Promise((resolve, reject) => {\n\n      _this.openPopup(url).then((identity) => {\n\n        _this.callIdentityModuleFunc('sendGenerateMessage',\n          { contents: publicKey, origin: origin, usernameHint: identity, idpDomain: idProvider }).then((result) => {\n\n          if (result) {\n\n            //_this.identityModule.storeIdentity(result, keyPair).then((value) => {\n            _this.callIdentityModuleFunc('addAssertion', result).then((value) => {\n              resolve(value.userProfile.userURL);\n            }, (err) => {\n              reject(err);\n            });\n\n          } else {\n            reject('error on obtaining identity information');\n          }\n\n        });\n      }, (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  _resetIdentities() {\n    console.log('_resetIdentities');\n  }\n\n\n}\n\nexport default IdentitiesGUI;\n","import PoliciesManager from './PoliciesManager';\n\nclass PoliciesGUI {\n\n  constructor(pepGuiURL, pepURL, messageBus) {\n    let _this = this;\n    _this.policiesManager = new PoliciesManager(pepGuiURL, pepURL, messageBus);\n    // assume prepareAttributes is called after this\n  }\n\n  prepareAttributes() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.policiesManager.prepareAttributes().then(() => {\n        _this.elements = _this._setElements();\n        _this._setListeners();\n        resolve();\n      });\n    });\n  }\n\n  _addMember() {\n    let _this = this;\n    let group = event.target.id;\n    $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n    $('.member-new-modal').openModal();\n    $('.member-new-ok').off();\n    $('.member-new-ok').on('click', (event) => {\n      let member = $('#member-new').val();\n      $('#member-new').val('');\n      _this.policiesManager.addToGroup(group, member).then(() => {\n        $('.member-new-modal').closeModal();\n        _this._manageGroups();\n      });\n    });\n  }\n\n  _createGroup() {\n    let _this = this;\n    $('#group-new-name').val('');\n    $('.group-new-modal').openModal();\n    $('.group-new-ok').on('click', (event) => {\n      let groupName = $('#group-new-name').val();\n      _this.policiesManager.createGroup(groupName).then(() => {\n        _this._manageGroups();\n      });\n    });\n  }\n\n  _addPolicy() {\n    let _this = this;\n    $('#policy-new-title').val('');\n    $('.combining').html('');\n    let algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\n    $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\n    $('.policy-new').openModal();\n\n    $('.policy-new-ok').off();\n    $('.policy-new-ok').on('click', (event) => {\n      let policyTitle = $('#policy-new-title').val();\n      if (!policyTitle) {\n        Materialize.toast('Invalid policy title', 4000);\n      } else {\n        let combiningAlgorithm = $('#comb-algorithm').val();\n        _this.policiesManager.addPolicy(policyTitle, combiningAlgorithm).then(() => {\n          $('.help-menu').addClass('hide');\n          $('.policy-new').closeModal();\n          _this._goHome();\n        });\n      }\n    });\n    $('.help-btn').off();\n    $('.help-btn').on('click', (event) => {\n      $('.help-menu').removeClass('hide');\n    });\n  }\n\n  _decreaseRulePriority() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    _this.policiesManager.getPolicy(policyTitle).then((policy) => {\n      let lastPriority = policy.getLastPriority();\n      if (lastPriority != thisPriority) {\n        let newPriority = parseInt(thisPriority + 1);\n        _this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority).then(() => {\n          _this._goHome();\n        });\n      }\n    });\n  }\n\n  _deleteMember() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split('::');\n    let member = splitId[splitId.length - 1];\n    splitId.pop();\n    let group = splitId.join('::');\n    _this.policiesManager.removeFromGroup(group, member).then(() => {\n      _this._manageGroups();\n    });\n  }\n\n  _deleteGroup() {\n    let _this = this;\n    let groupName = event.target.closest('tr').children[0].id;\n    _this.policiesManager.deleteGroup(groupName).then(() => {\n      _this._manageGroups();\n    });\n  }\n\n  _deletePolicy() {\n    let _this = this;\n    let policyTitle = event.target.closest('tr').id;\n    _this.policiesManager.deletePolicy(policyTitle).then(() => {\n      _this._goHome();\n    });\n  }\n\n  _deleteRule() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let rule = _this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n    _this.policiesManager.deleteRule(policyTitle, rule).then(() => {\n      _this._goHome();\n    });\n  }\n\n  _getActivePolicy() {\n    let _this = this;\n    _this.policiesManager.getActivePolicy().then((activeUserPolicy) => {\n      $('.policy-active').html('');\n      _this.policiesManager.getPoliciesTitles().then((policies) => {\n        policies.push('Deactivate all policies');\n\n        $('.policy-active').append(_this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\n\n        $('#policies-list').on('click', (event) => {\n          let policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\n          if (policyTitle === 'Deactivate all policies') {\n            policyTitle = undefined;\n          }\n          _this.policiesManager.updateActivePolicy(policyTitle);\n        });\n      });\n    });\n  }\n\n  _getGroupOptions(title, keys, scopes, lists) {\n    let list = '<option disabled selected>' + title + '</option>';\n\n    for (let i in keys) {\n      list += '<optgroup label=' + keys[i] + '>';\n      for (let j in lists[i]) {\n        list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n      }\n    }\n\n    return list;\n  }\n\n  _getInfo(variable) {\n    let info;\n\n    switch(variable) {\n      case 'Date':\n        info = $('.config').find('input').val();\n        if (info.indexOf(',') !== -1) { //20 July, 2016\n          let splitInfo = info.split(' '); //['20', 'July,',' '2016']\n          splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n          let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n          info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n        } else { // 2016-07-20\n          let splitInfo = info.split('-');\n          info = splitInfo[2] + '/' + splitInfo[1] + '/' + splitInfo[0];\n        }\n        break;\n      case 'Group of users':\n        info = $('#group').find(\":selected\").text();\n        break;\n      case 'Subscription preferences':\n        if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n          info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n        }\n        break;\n      case 'Weekday':\n        info = $('#weekday').find(\":selected\").text();\n        break;\n      default:\n        info = $('.config').find('input').val();\n        break;\n    }\n\n    return info;\n  }\n\n  _getList(items) {\n      let list = '';\n      let numItems = items.length;\n\n      for (let i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n\n  _getOptions(id, title, list, selected) {\n    let options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n    for (let i in list) {\n      if (selected !== undefined & selected === list[i]) {\n        options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\n      } else {\n        options += '<option id=\"' + id + '\">' + list[i] + '</option>';\n      }\n    }\n    options += '</select>';\n\n    return options;\n  }\n\n  _getPoliciesTable() {\n    let _this = this;\n\n    _this.policiesManager.getFormattedPolicies().then((policies) => {\n      $('.policies-no').addClass('hide');\n      $('.policies-current').html('');\n\n      let policiesTitles = [];\n      let rulesTitles = [];\n      let ids = [];\n\n      for (let i in policies) {\n        policiesTitles.push(policies[i].title);\n        rulesTitles.push(policies[i].rulesTitles);\n        ids.push(policies[i].ids);\n      }\n\n      let table = '<table>';\n      let isEmpty = policiesTitles.length === 0;\n\n      for (let i in policiesTitles) {\n        table += '<thead><tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n\n        for (let j in rulesTitles[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n        table += '<tr id=\"' + policiesTitles[i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.policies-current').append(table);\n      } else {\n        $('.policies-no').removeClass('hide');\n      }\n      $('.rule-add').on('click', (event) => { _this._showVariablesTypes(); });\n      $('.rule-delete').on('click', (event) => { _this._deleteRule(); });\n      $('.rule-show').on('click', (event) => { _this._showRule(); });\n      $('.rule-priority-increase').on('click', (event) => { _this._increaseRulePriority(); });\n      $('.rule-priority-decrease').on('click', (event) => { _this._decreaseRulePriority(); });\n      $('.policy-add').off();\n      $('.policy-add').on('click', (event) => { _this._addPolicy(); });\n      $('.policy-delete').on('click', (event) => { _this._deletePolicy(); });\n    });\n  }\n\n  _goHome() {\n    this._getActivePolicy();\n    this._getPoliciesTable();\n  }\n\n  _increaseRulePriority() {\n    let _this = this;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    if (thisPriority !== 0) {\n      splitId.pop();\n      let policyTitle = splitId.join(':');\n      let newPriority = thisPriority - 1;\n\n      _this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority).then(() => {\n        _this._goHome();\n      });\n    }\n  }\n\n  _manageGroups() {\n    let _this = this;\n    _this.policiesManager.getGroups().then((groupsPE) => {\n      $('.groups-current').html('');\n      let groups = groupsPE.groupsNames;\n      let members = groupsPE.members;\n      let ids = groupsPE.ids;\n\n      let table = '<table>';\n      let isEmpty = groups.length === 0;\n\n      for (let i in groups) {\n        table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n        for (let j in members[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n\n        table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.groups-current').append(table);\n      } else {\n        $('.groups-current').append('<p>There are no groups set.</p>');\n      }\n\n      $('.member-add').off();\n      $('.member-add').on('click', (event) => { _this._addMember(); });\n      $('.member-delete').on('click', (event) => { _this._deleteMember(); });\n      $('.group-add').off();\n      $('.group-add').on('click', (event) => { _this._createGroup(); });\n      $('.group-delete').on('click', (event) => { _this._deleteGroup(); });\n    });\n  }\n\n  _parseFileContent(content) {\n    let parsedContent = JSON.parse(content);\n    for (let i in parsedContent) {\n      this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\n    }\n    $('.policy-new').closeModal();\n  }\n\n  _setElements() {\n    return {\n      date: (params) => { return '<input type=\"date\" class=\"datepicker\">'; },\n      select: (params) => { return this._getOptions(params[0], params[1], params[2]); },\n      form: (params) => { return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>'; }\n    };\n  }\n\n  _showNewConfigurationPanel(policyTitle) {\n    let variable = event.target.text;\n    $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n    $('.scopes').empty().html('');\n\n    let keys = ['Email', 'Hyperty', 'All'];\n    let scopes = ['identity', 'hyperty', 'global'];\n    let lists = [];\n\n    this.policiesManager.getMyEmails().then((emails) => {\n      lists.push(emails);\n      this.policiesManager.getMyHyperties().then((hyperties) => {\n        lists.push(hyperties);\n        lists.push(['All identities and hyperties']);\n        $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n        $('.variable').removeClass('hide');\n      });\n    });\n  }\n\n  _showVariablesTypes(event) {\n    let policyTitle = event.target.closest('tr').id;\n\n    $('#variables-types').empty().html('');\n    let variables = this.policiesManager.getVariables();\n    $('#variables-types').append(this._getList(variables));\n    $('.variable').addClass('hide');\n    $('.rule-new').openModal();\n    $('#variables-types').off();\n    $('#variables-types').on('click', (event) => { this._showNewConfigurationPanel(policyTitle); });\n  }\n\n  _getNewConfiguration(policyTitle, variable) {\n    let _this = this;\n    let info = _this.policiesManager.getVariableInfo(variable);\n    $('.rule-new-title').html(info.title);\n    $('.description').html(info.description);\n    $('.config').html('');\n\n    if (variable === 'Subscription preferences') {\n      $('.subscription-type').removeClass('hide');\n    } else {\n      $('.subscription-type').addClass('hide');\n      let tags = info.input;\n      for (let i in tags) {\n        _this.policiesManager.getGroupsNames().then((groupsNames) => {\n          if (variable === 'Group of users') {\n            tags[i][1].push(groupsNames);\n          }\n          $('.config').append(_this.elements[tags[i][0]](tags[i][1]));\n          if (variable === 'Group of users') {\n            tags[i][1].pop();\n          }\n        });\n      }\n      if (variable ==='date') {\n        $('.datepicker').pickadate({\n          selectMonths: true,\n          selectYears: 15\n        });\n      }\n    }\n    document.getElementById('allow').checked = false;\n    document.getElementById('block').checked = false;\n    $('.ok-btn').off();\n    $('.ok-btn').on('click', (event) => {\n      if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n        let info = _this._getInfo(variable);\n        let decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n        decision = decision === 'allow';\n        let scope = $('.scopes').find(\":selected\")[0].id;\n        let target = $('.scopes').find(\":selected\")[0].textContent;\n        target = (target === 'All identities and hyperties') ? 'global' : target;\n        _this.policiesManager.setInfo(variable, policyTitle, info, decision, scope, target).then(() => {\n          $('.rule-new').closeModal();\n          _this._goHome();\n        });\n      } else {\n        throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n      }\n    });\n  }\n\n  _deleteInfo(resourceType) {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let scope = splitId[0];\n    splitId.shift();\n    let target = splitId.join('');\n    let condition = event.target.closest('tr').children[0].id;\n    this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n    this._goHome();\n  }\n\n  _setListeners() {\n    $('.settings-btn').on('click', (event) => {\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      // document.getElementsByTagName('body')[0].style = 'background-color:white;';\n    });\n\n    $('.policies-page-show').on('click', (event) => {\n      $('.policies-section').removeClass('hide');\n      $('.identities-section').addClass('hide');\n      this._goHome();\n      this._manageGroups();\n    });\n\n    $('.admin-page-exit').on('click', (event) => {\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').addClass('hide');\n      // document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n    });\n\n    $('.exit-btn').on('click', (event) => {\n      $('.subscription-type').addClass('hide');\n      $('.help-menu').addClass('hide');\n    });\n\n    $('#policy-file').on('change', (event) => {\n      let file = event.target.files[0];\n      let reader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n      reader.onload = (event) => {\n        this._parseFileContent(event.target.result);\n        this._goHome();\n      }\n      reader.onerror = (event) => {\n        throw Error(\"Error reading the file\");\n      }\n    });\n  }\n\n  _showRule(event) {\n    let ruleTitle = event.target.textContent;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    this.policiesManager.getRuleOfPolicy(policyTitle, priority).then((rule) => {\n      if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n        $('.authorise-btns').addClass('hide');\n      } else {\n        let element;\n        if (rule.decision) {\n          element = document.getElementById('btn-allow');\n        } else {\n          element = document.getElementById('btn-block');\n        }\n        element.checked = true;\n        $('.authorise-btns').removeClass('hide');\n      }\n      $('.member-add').addClass('hide');\n      $('.member-new-btn').addClass('hide');\n\n      $('.rule-details').openModal();\n      $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n      if (rule.condition.attribute === 'subscription') {\n        $('.subscription-type').removeClass('hide');\n      }\n      $('.subscription-decision').on('click', (event) => { this._updateRule('subscription', policyTitle, rule); });\n      $('.decision').off();\n      $('.decision').on('click', (event) => { this._updateRule('authorisation', policyTitle, rule);});\n    });\n  }\n\n  _updateRule(type, policyTitle, rule) {\n    let _this = this;\n    let title = $('.rule-title').text();\n    let splitTitle = title.split(' ');\n    let index = splitTitle.indexOf('is');\n    if (index === -1) {\n      index = splitTitle.indexOf('are');\n    }\n    switch (type) {\n      case 'authorisation':\n        let newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n\n        if (newDecision === 'btn-allow') {\n          splitTitle[index + 1] = 'allowed';\n          newDecision = true;\n        } else {\n          splitTitle[index + 1] = 'blocked';\n          newDecision = false;\n        }\n        title = splitTitle.join(' ');\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        _this.policiesManager.updatePolicy(policyTitle, rule, newDecision).then(() => {\n          _this._goHome();\n        });\n        break;\n      case 'subscription':\n        let newSubscriptionType = event.target.labels[0].textContent;\n\n        let decision = splitTitle[index + 1];\n        splitTitle = title.split('hyperties are');\n        if (newSubscriptionType === 'All subscribers') {\n          $('.authorise-btns').removeClass('hide');\n          newDecision = rule.decision;\n          newSubscriptionType = '*';\n          title = 'Subscriptions from all hyperties are' + splitTitle[1];\n        } else {\n          $('.authorise-btns').addClass('hide');\n          newDecision = true;\n          newSubscriptionType = 'preauthorised';\n          title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n        }\n\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        _this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType).then(() => {\n          _this._goHome();\n        });\n        break;\n    }\n  }\n}\n\nexport default PoliciesGUI;\n","class PoliciesManager {\n\n  constructor(pepGuiURL, pepURL, messageBus) {\n    let _this = this;\n    _this._guiURL = pepGuiURL;\n    _this._pepURL = pepURL;\n    _this._messageBus = messageBus;\n\n    // assume prepare attributes is called after this\n  }\n\n  callPolicyEngineFunc(methodName, parameters) {\n    let _this = this;\n    let message;\n\n    return new Promise((resolve, reject) => {\n      message = { type: 'execute', to: _this._pepURL, from: _this._guiURL,\n        body: { resource: 'policy', method: methodName, params: parameters }, };\n      _this._messageBus.postMessage(message, (res) => {\n        let result = res.body.value;\n        resolve(result);\n      });\n    });\n  }\n\n  prepareAttributes() {\n    return new Promise((resolve, reject) => {\n      let _this = this;\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n        _this.policies = userPolicies;\n        _this.variables = _this.setVariables();\n        _this.addition = _this.setAdditionMethods();\n        _this.validation = _this.setValidationMethods();\n        resolve();\n      });\n    });\n  }\n\n  addToGroup(groupName, user) {\n    return this.callPolicyEngineFunc('addToGroup', {groupName: groupName, userEmail: user});\n  }\n\n  createGroup(groupName) {\n    return this.callPolicyEngineFunc('createGroup', {groupName: groupName});\n  }\n\n  addPolicy(title, combiningAlgorithm, policy) {\n    if (policy === undefined) {\n      switch (combiningAlgorithm) {\n        case 'Block overrides':\n          combiningAlgorithm = 'blockOverrides';\n          break;\n        case 'Allow overrides':\n          combiningAlgorithm = 'allowOverrides';\n          break;\n        case 'First applicable':\n          combiningAlgorithm = 'firstApplicable';\n          break;\n        default:\n          combiningAlgorithm = undefined;\n      }\n    }\n\n    return this.callPolicyEngineFunc('addPolicy',\n      {source: 'USER', key: title, policy: policy, combiningAlgorithm: combiningAlgorithm});\n  }\n\n  decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    return this.callPolicyEngineFunc('savePolicies', {source: 'USER'});\n  }\n\n  deleteGroup(groupName) {\n    return this.callPolicyEngineFunc('deleteGroup', {groupName: groupName});\n  }\n\n  deletePolicy(title) {\n    return this.callPolicyEngineFunc('removePolicy', {source: 'USER', key: title});\n  }\n\n  deleteRule(policyTitle, rule) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n        userPolicies[policyTitle].deleteRule(rule);\n        _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  getActivePolicy() {\n    return this.callPolicyEngineFunc('activeUserPolicy', {});\n  }\n\n  getPolicy(key) {\n    return this.callPolicyEngineFunc('userPolicy', {key: key});\n  }\n\n  getPoliciesTitles() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policies) => {\n        let titles = [];\n\n        for (let i in policies) {\n          titles.push(i);\n        }\n\n        resolve(titles);\n      });\n    });\n  }\n\n  getTargets(scope) {\n    let targets = [];\n\n    for (let i in this.policies[scope]) {\n      if (targets.indexOf(i) === -1) {\n        targets.push(i);\n      }\n    }\n\n    return targets;\n  }\n\n  increaseRulePriority(policyTitle, thisPriority, newPriority) {\n    let _this = this;\n    _this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    _this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    return _this.callPolicyEngineFunc('savePolicies', {source: 'USER'});\n  }\n\n  setVariables() {\n    return {\n      'Date': {\n        title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Date:</p>',\n        input: [\n          ['date', []]\n        ]\n      },\n      'Domain': {\n        title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Domain:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      'Group of users': {\n        title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Group name:</p>',\n        input: [\n          ['select', ['group', 'Select a group:']]\n        ]\n      },\n      'Subscription preferences': {\n        title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        input: []\n      },\n      'Time of the day': {\n        title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n        description: '<p>Timeslot:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      Weekday: {\n        title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Weekday:</p>',\n        input: [\n          ['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]\n        ]\n      }\n    };\n  }\n\n  setAdditionMethods() {\n    let _this = this;\n    return {\n      Date: (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'date', operator: 'equals', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      Domain: (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'domain', operator: 'equals', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      'Group of users': (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'source', operator: 'in', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      'Subscription preferences': (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            let operator = 'equals';\n            if (params[3] === 'preauthorised') {\n              operator = 'in';\n            }\n\n            // TIAGO: this is giving me an error...\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'subscription', operator: operator, params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n      'Time of the day': (params) => {\n        return new Promise((resolve, reject) => {\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            params[3] = params[3].split(' to ');\n            let start = params[3][0].split(':');\n            start = start.join('');\n            let end = params[3][1].split(':');\n            end = end.join('');\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'time', operator: 'between', params: [start, end] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      },\n\n      Weekday: (params) => {\n        return new Promise((resolve, reject) => {\n          let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          params[3] = weekdays.indexOf(params[3]);\n          let policyTitle = params[0];\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'weekday', operator: 'equals', params: params[3] }, params[1], params[2]);\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\n              resolve();\n            });\n          });\n        });\n      }\n    };\n  }\n\n  setValidationMethods() {\n    return {\n      Date: (scope, info) => { return this.isValidDate(info) & this.isValidScope(scope); },\n      'Group of users': (scope, info) => { return this.isValidString(info) & this.isValidScope(scope); },\n      Domain: (scope, info) => { return this.isValidDomain(info) & this.isValidScope(scope); },\n      Weekday: (scope, info) => { return true & this.isValidScope(scope); },\n      'Subscription preferences': (scope, info) => { return this.isValidSubscriptionType(info) & this.isValidScope(scope); },\n      'Time of the day': (scope, info) => { return this.isValidTimeslot(info) & this.isValidScope(scope); }\n    };\n  }\n\n  updateActivePolicy(title) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('activeUserPolicy', {userPolicy: title}).then(() => {\n        _this.callPolicyEngineFunc('saveActivePolicy', {}).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  isValidEmail(info) {\n    let pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidDomain(info) {\n    let pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidString(info) {\n    let pattern = /[a-z0-9.-]$/;\n    return pattern.test(info);\n  }\n\n  isValidSubscriptionType(info) {\n    return true;\n  }\n\n  isValidDate(info) {\n    let infoSplit = info.split('/');\n    let day = parseInt(infoSplit[0]);\n    let month = parseInt(infoSplit[1]);\n    let year = parseInt(infoSplit[2]);\n\n    let date = new Date(year, month-1, day);\n    let isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n    let formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\n    let now = new Date();\n    let today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n    let isFuture = false;\n    if (date.getFullYear() > now.getFullYear()) {\n      isFuture = true;\n    } else {\n      if (date.getFullYear() == now.getFullYear()) {\n        if ((date.getMonth() + 1) > (now.getMonth() + 1)) {\n          isFuture = true;\n        } else {\n          if ((date.getMonth() + 1) == (now.getMonth() + 1)) {\n            if (date.getDate() >= (now.getDate())) {\n              isFuture = true;\n            }\n          }\n        }\n      }\n    }\n\n    return (isValidFormat && isFuture);\n  }\n\n  isValidScope(scope) {\n    return scope !== '';\n  }\n\n  isValidTimeslot(info) {\n    if (!info) {\n      return false;\n    }\n    let splitInfo = info.split(' to '); // [12:00, 13:00]\n    let twoTimes = splitInfo.length === 2;\n    if (!twoTimes) {\n      return false;\n    }\n    let splitStart = splitInfo[0].split(':'); // [12, 00]\n    let splitEnd = splitInfo[1].split(':'); // [13, 00]\n    if (splitStart.length !== 2 || splitEnd.length !== 2) {\n      return false;\n    }\n    let okSize = (splitStart[0].length === 2) && (splitStart[1].length === 2) && (splitEnd[0].length === 2) && (splitEnd[1].length === 2);\n    let areIntegers = (splitStart[0] == parseInt(splitStart[0], 10)) && (splitStart[1] == parseInt(splitStart[1], 10)) && (splitEnd[0] == parseInt(splitEnd[0], 10)) && (splitEnd[1] == parseInt(splitEnd[1], 10));\n    return twoTimes && okSize && areIntegers;\n  }\n\n  getFormattedPolicies() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policiesPE) => {\n        let policiesGUI = [];\n\n        for (let i in policiesPE) {\n          let policy = {\n            title: policiesPE[i].key,\n            rulesTitles: [],\n            ids: []\n          }\n\n          if (policiesPE[i].rules.length !== 0) {\n            policiesPE[i].rules = policiesPE[i].sortRules();\n            for (let j in policiesPE[i].rules) {\n              let title = _this._getTitle(policiesPE[i].rules[j]);\n              policy.rulesTitles.push(title);\n              policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n            }\n          }\n\n          policiesGUI.push(policy);\n        }\n\n        resolve(policiesGUI);\n      });\n    });\n  }\n\n  getRuleOfPolicy(title, priority) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policies) => {\n        let policy = policies[title];\n        resolve(policy.getRuleByPriority(priority));\n      });\n    });\n  }\n\n  _getTitle(rule) {\n    let condition = rule.condition;\n    let authorise = (rule.decision) ? 'allowed' : 'blocked';\n    let target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n    let attribute = condition.attribute;\n    switch(attribute) {\n      case 'date':\n        return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n      case 'domain':\n        return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n      case 'source':\n        if (condition.operator === 'in') {\n          return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.operator === 'equals') {\n            return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n          }\n        }\n      case 'subscription':\n        if (condition.params === '*') {\n          return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.params === 'preauthorised') {\n            return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n          }\n        }\n      case 'time':\n        let start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n        let end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n        return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n      case 'weekday':\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        let weekdayID = condition.params;\n        return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n      default:\n        return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n    }\n  }\n\n  getVariables() {\n    let variablesTitles = [];\n    for (let i in this.variables) {\n      variablesTitles.push(i);\n    }\n    return variablesTitles;\n  }\n\n  getVariableInfo(variable) {\n    return this.variables[variable];\n  }\n\n  getMyEmails() {\n    return this.callPolicyEngineFunc('getMyEmails', {});\n  }\n\n  getMyHyperties() {\n    return this.callPolicyEngineFunc('getMyHyperties', {});\n  }\n\n  //TODO If there is a problem with the input, show it to the user\n  setInfo(variable, policyTitle, info, authorise, scope, target) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      if (_this.validation[variable](scope, info)) {\n        _this.addition[variable]([policyTitle, scope, target, info, authorise]).then(() => {\n          resolve();\n        });\n      } else {\n        reject('Invalid configuration');\n      }\n    });\n  }\n\n  deleteInfo(variable, scope, target, info) {\n    let params = [scope, target, info];\n    if (variable === 'member') {\n      let conditionSplit = info.split(' ');\n      let groupName = conditionSplit[2];\n      params = [scope, groupName, info];\n    }\n    this.deletion[variable](params);\n  }\n\n  getGroups() {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('groups', {}).then((groups) => {\n        let groupsGUI = {\n          groupsNames: [],\n          members: [],\n          ids: []\n        };\n\n        for (let i in groups) {\n          groupsGUI.groupsNames.push(i);\n          groupsGUI.members.push(groups[i]);\n          let ids = [];\n          for (let j in groups[i]) {\n            ids.push(i + '::' + groups[i][j]);\n          }\n          groupsGUI.ids.push(ids);\n        }\n\n        //console.log('TIAGO groups', groupsGUI)\n        resolve(groupsGUI);\n      });\n    });\n  }\n\n  getGroupsNames() {\n    return this.callPolicyEngineFunc('getGroupsNames', {});\n  }\n\n  removeFromGroup(groupName, user) {\n    return this.callPolicyEngineFunc('removeFromGroup', {groupName: groupName, userEmail: user});\n  }\n\n  updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n    let _this = this;\n    return new Promise((resolve, reject) => {\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\n        userPolicies[policyTitle].deleteRule(rule);\n        if (!newSubscriptionType) {\n          userPolicies[policyTitle].createRule(newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n        } else {\n          let operator = (newSubscriptionType === '*') ? 'equals' : 'in';\n          userPolicies[policyTitle].createRule(newDecision, [{ attribute: 'subscription', opeator: operator, params: newSubscriptionType }], rule.scope, rule.target, rule.priority);\n        }\n\n        _this.callPolicyEngineFunc('saveActivePolicy', {}).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n}\n\nexport default PoliciesManager;\n","/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport URI from 'urijs';\nimport IdentitiesGUI from './admin/IdentitiesGUI';\nimport PoliciesGUI from './admin/PoliciesGUI';\nimport RuntimeFactory from './RuntimeFactory';\n\ntry {\n  window.cordova = parent.cordova !== undefined;\n  if (window.cordova) { window.open = function(url) { return parent.cordova.InAppBrowser.open(url, '_blank', 'location=no,toolbar=no'); }; }\n} catch (err) { console.log('cordova not supported'); }\n\nfunction returnHyperty(source, hyperty) {\n  source.postMessage({to: 'runtime:loadedHyperty', body: hyperty}, '*');\n}\n\nfunction searchHyperty(runtime, descriptor) {\n  let hyperty = undefined;\n  let index = 0;\n  while (!hyperty && index < runtime.registry.hypertiesList.length) {\n    if (runtime.registry.hypertiesList[index].descriptor === descriptor) { hyperty = runtime.registry.hypertiesList[index]; }\n\n    index++;\n  }\n\n  return hyperty;\n}\n\nlet parameters = new URI(window.location).search(true);\nlet runtimeURL = parameters.runtime;\nlet domain = parameters.domain;\nlet development = parameters.development === 'true';\nlet catalogue = RuntimeFactory.createRuntimeCatalogue(development);\nlet runtimeDescriptor;\ncatalogue.getRuntimeDescriptor(runtimeURL)\n  .then(function(descriptor) {\n    runtimeDescriptor = descriptor;\n    let sourcePackageURL = descriptor.sourcePackageURL;\n    if (sourcePackageURL === '/sourcePackage') {\n      return descriptor.sourcePackage;\n    }\n    return catalogue.getSourcePackageFromURL(sourcePackageURL);\n  })\n  .then(function(sourcePackage) {\n    eval.apply(window, [sourcePackage.sourceCode]);\n\n    //let runtime = new Runtime(RuntimeFactory, window.location.host);\n    if (!domain) domain = window.location.host;\n    let runtime = new Runtime(runtimeDescriptor, RuntimeFactory, domain);\n    window.runtime = runtime;\n    runtime.init().then(function(result) {\n\n      // TIAGO\n      if (!runtime.policyEngine) throw Error('Policy Engine is not set!');\n      let pepGuiURL = runtime.policyEngine.context.guiURL;\n      let pepURL = runtime.policyEngine.context.pepURL;\n      let pepGUI = new PoliciesGUI(pepGuiURL, pepURL, runtime.policyEngine.messageBus, runtime.policyEngine);\n\n      pepGUI.prepareAttributes().then(() => {\n        let idmGuiURL = runtime.identityModule._runtimeURL + '/identity-gui';\n        let idmURL = runtime.identityModule._runtimeURL + '/idm';\n        let identitiesGUI = new IdentitiesGUI(idmGuiURL, idmURL, runtime.identityModule.messageBus);\n\n        window.addEventListener('message', function(event) {\n          if (event.data.to === 'core:loadHyperty') {\n            let descriptor = event.data.body.descriptor;\n            let reuseAddress = event.data.body.reuseAddress;\n            let requireHypertyID = event.data.body.id;\n\n            let hyperty = searchHyperty(runtime, descriptor);\n\n            if (hyperty) {\n              returnHyperty(event.source, { runtimeHypertyURL: hyperty.hypertyURL, id: requireHypertyID});\n            } else {\n              runtime.loadHyperty(descriptor, reuseAddress).then(function(hyperty) {\n                hyperty.id = requireHypertyID;\n                returnHyperty(event.source, hyperty);\n              });\n            }\n          } else if (event.data.to === 'core:loadStub') {\n            runtime.loadStub(event.data.body.domain).then((result) => {\n              console.log('Stub Loaded: ', result);\n            }).catch((error) => {\n              console.error('Stub error:', error);\n            });\n          } else if (event.data.to === 'core:close') {\n            runtime.close(event.data.body.logOut).then((result)=>{\n                event.source.postMessage({to: 'runtime:runtimeClosed', body: result}, '*')\n              })\n              .catch((result)=>{\n                event.source.postMessage({to: 'runtime:runtimeClosed', body: result}, '*')\n              });\n\n            //  send logout\n            identitiesGUI.logOut().then((result) => {\n              console.log(result);\n            });\n\n          } else if (event.data.to === 'core:reset') {\n            runtime.reset().then(function(result) {\n                event.source.postMessage({to: 'runtime:runtimeReset', body: result}, '*')\n              });\n\n            //  send logout\n            identitiesGUI.logOut().then((result) => {\n              console.log(result);\n            });\n\n          } else if (event.data.to === 'core:login') {\n            console.log('core: logging with ', event.data.body.idp);\n            identitiesGUI.loginWithIDP(event.data.body.idp).then((result) => {\n              event.source.postMessage({to: 'runtime:loggedIn', body: result}, '*');\n            });\n          } else if (event.data.to === 'core:authorise') {\n            console.log('core:authorise ', event.data.body.idp, event.data.body.scope);\n            identitiesGUI.authorise(event.data.body.idp, event.data.body.scope).then((result) => {\n              event.source.postMessage({ to: 'runtime:authorised', body: JSON.stringify(result) }, '*');\n            });\n          }\n\n\n        }, false);\n\n        window.addEventListener('beforeunload', (e) => {\n          runtime.close();\n        });\n\n        parent.postMessage({to: 'runtime:installed', body: {}}, '*');\n\n      });\n    });\n  });\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}