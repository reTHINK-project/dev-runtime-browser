{"version":3,"sources":["node_modules/browser-pack/_prelude.js","policies-gui.js","src/admin/PoliciesGUI.js","src/admin/PoliciesManager.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","policiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_PoliciesManager","_PoliciesManager2","PoliciesGUI","policyEngine","policiesManager","elements","_setElements","_setListeners","_this","group","event","id","$","html","openModal","off","on","member","val","addToGroup","closeModal","_manageGroups","_this2","groupName","createGroup","_this3","algorithms","append","_getOptions","policyTitle","combiningAlgorithm","addPolicy","addClass","_goHome","removeClass","closest","splitId","split","thisPriority","parseInt","pop","join","lastPriority","getPolicy","getLastPriority","newPriority","decreaseRulePriority","removeFromGroup","children","deleteGroup","deletePolicy","priority","rule","getRuleOfPolicy","deleteRule","_this4","activeUserPolicy","getActivePolicy","policies","getPoliciesTitles","push","find","textContent","undefined","updateActivePolicy","title","keys","scopes","lists","list","j","variable","info","indexOf","splitInfo","substring","months","_splitInfo","text","items","numItems","selected","options","_this5","getFormattedPolicies","policiesTitles","rulesTitles","ids","table","isEmpty","_i","_showVariablesTypes","_deleteRule","_showRule","_increaseRulePriority","_decreaseRulePriority","_addPolicy","_deletePolicy","_getActivePolicy","_getPoliciesTable","increaseRulePriority","_this6","groupsPE","getGroups","groups","groupsNames","members","_addMember","_deleteMember","_createGroup","_deleteGroup","content","parsedContent","JSON","parse","_this7","date","params","select","form","_getNewConfiguration","empty","getMyEmails","getMyHyperties","_getGroupOptions","_this8","variables","getVariables","_getList","_showNewConfigurationPanel","_this9","getVariableInfo","description","tags","input","getGroupsNames","pickadate","selectMonths","selectYears","document","getElementById","checked","_info","_getInfo","decision","scope","setInfo","resourceType","shift","condition","deleteInfo","_this10","parent","postMessage","body","method","to","getElementsByTagName","style","file","files","reader","FileReader","readAsText","onload","_parseFileContent","result","onerror","_this11","ruleTitle","attribute","element","authorise","_updateRule","type","splitTitle","index","newDecision","updatePolicy","newSubscriptionType","labels","./PoliciesManager",2,"PoliciesManager","context","userPolicies","setVariables","addition","setAdditionMethods","validation","setValidationMethods","user","policy","savePolicies","removePolicy","titles","targets","Date","Domain","Group of users","Subscription preferences","Time of the day","Weekday","createRule","operator","start","end","weekdays","isValidDate","isValidScope","isValidString","isValidDomain","isValidSubscriptionType","isValidTimeslot","saveActivePolicy","pattern","test","infoSplit","day","month","year","isValidFormat","getFullYear","getMonth","getDate","now","isFuture","twoTimes","splitStart","splitEnd","okSize","areIntegers","policiesPE","policiesGUI","rules","sortRules","_getTitle","getRuleByPriority","weekdayID","variablesTitles","getList","conditionSplit","deletion","getGroup","groupsGUI"],"mappings":"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","file":"policies-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.policiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PoliciesManager = require('./PoliciesManager');\n\nvar _PoliciesManager2 = _interopRequireDefault(_PoliciesManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesGUI = function () {\n  function PoliciesGUI(policyEngine) {\n    _classCallCheck(this, PoliciesGUI);\n\n    if (!policyEngine) throw Error('Policy Engine is not set!');\n    this.policiesManager = new _PoliciesManager2.default(policyEngine);\n    this.elements = this._setElements();\n    this._setListeners();\n  }\n\n  _createClass(PoliciesGUI, [{\n    key: '_addMember',\n    value: function _addMember() {\n      var _this = this;\n\n      var group = event.target.id;\n      $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n      $('.member-new-modal').openModal();\n      $('.member-new-ok').off();\n      $('.member-new-ok').on('click', function (event) {\n        var member = $('#member-new').val();\n        $('#member-new').val('');\n        _this.policiesManager.addToGroup(group, member);\n        $('.member-new-modal').closeModal();\n        _this._manageGroups();\n      });\n    }\n  }, {\n    key: '_createGroup',\n    value: function _createGroup() {\n      var _this2 = this;\n\n      $('#group-new-name').val('');\n      $('.group-new-modal').openModal();\n      $('.group-new-ok').on('click', function (event) {\n        var groupName = $('#group-new-name').val();\n        _this2.policiesManager.createGroup(groupName);\n        _this2._manageGroups();\n      });\n    }\n  }, {\n    key: '_addPolicy',\n    value: function _addPolicy() {\n      var _this3 = this;\n\n      $('#policy-new-title').val('');\n      $('.combining').html('');\n      var algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\n      $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\n      $('.policy-new').openModal();\n\n      $('.policy-new-ok').off();\n      $('.policy-new-ok').on('click', function (event) {\n        var policyTitle = $('#policy-new-title').val();\n        var combiningAlgorithm = $('#comb-algorithm').val();\n        _this3.policiesManager.addPolicy(policyTitle, combiningAlgorithm);\n        $('.help-menu').addClass('hide');\n        $('.policy-new').closeModal();\n        _this3._goHome();\n      });\n      $('.help-btn').off();\n      $('.help-btn').on('click', function (event) {\n        $('.help-menu').removeClass('hide');\n      });\n    }\n  }, {\n    key: '_decreaseRulePriority',\n    value: function _decreaseRulePriority() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var lastPriority = this.policiesManager.getPolicy(policyTitle).getLastPriority();\n      if (lastPriority != thisPriority) {\n        var newPriority = parseInt(thisPriority + 1);\n        this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority);\n        this._goHome();\n      }\n    }\n  }, {\n    key: '_deleteMember',\n    value: function _deleteMember() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split('::');\n      var member = splitId[splitId.length - 1];\n      splitId.pop();\n      var group = splitId.join('::');\n      this.policiesManager.removeFromGroup(group, member);\n      this._manageGroups();\n    }\n  }, {\n    key: '_deleteGroup',\n    value: function _deleteGroup() {\n      var groupName = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteGroup(groupName);\n      this._manageGroups();\n    }\n  }, {\n    key: '_deletePolicy',\n    value: function _deletePolicy() {\n      var policyTitle = event.target.closest('tr').id;\n      this.policiesManager.deletePolicy(policyTitle);\n      this._goHome();\n    }\n  }, {\n    key: '_deleteRule',\n    value: function _deleteRule() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n      this.policiesManager.deleteRule(policyTitle, rule);\n      this._goHome();\n    }\n  }, {\n    key: '_getActivePolicy',\n    value: function _getActivePolicy() {\n      var _this4 = this;\n\n      $('.policy-active').html('');\n      var activeUserPolicy = this.policiesManager.getActivePolicy();\n      var policies = this.policiesManager.getPoliciesTitles();\n      policies.push('Deactivate all policies');\n\n      $('.policy-active').append(this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\n\n      $('#policies-list').on('click', function (event) {\n        var policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\n        if (policyTitle === 'Deactivate all policies') {\n          policyTitle = undefined;\n        }\n        _this4.policiesManager.updateActivePolicy(policyTitle);\n      });\n    }\n  }, {\n    key: '_getGroupOptions',\n    value: function _getGroupOptions(title, keys, scopes, lists) {\n      var list = '<option disabled selected>' + title + '</option>';\n\n      for (var i in keys) {\n        list += '<optgroup label=' + keys[i] + '>';\n        for (var j in lists[i]) {\n          list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getInfo',\n    value: function _getInfo(variable) {\n      var info = void 0;\n\n      switch (variable) {\n        case 'Date':\n          info = $('.config').find('input').val();\n          if (info.indexOf(',') !== -1) {\n            //20 July, 2016\n            var splitInfo = info.split(' '); //['20', 'July,',' '2016']\n            splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n            info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n          } else {\n            // 2016-07-20\n            var _splitInfo = info.split('-');\n            info = _splitInfo[2] + '/' + _splitInfo[1] + '/' + _splitInfo[0];\n          }\n          break;\n        case 'Group of users':\n          info = $('#group').find(\":selected\").text();\n          break;\n        case 'Subscription preferences':\n          if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n            info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n          }\n          break;\n        case 'Weekday':\n          info = $('#weekday').find(\":selected\").text();\n          break;\n        default:\n          info = $('.config').find('input').val();\n          break;\n      }\n\n      return info;\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getOptions',\n    value: function _getOptions(id, title, list, selected) {\n      var options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n      for (var i in list) {\n        if (selected !== undefined & selected === list[i]) {\n          options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\n        } else {\n          options += '<option id=\"' + id + '\">' + list[i] + '</option>';\n        }\n      }\n      options += '</select>';\n\n      return options;\n    }\n  }, {\n    key: '_getPoliciesTable',\n    value: function _getPoliciesTable() {\n      var _this5 = this;\n\n      $('.policies-no').addClass('hide');\n      $('.policies-current').html('');\n\n      var policies = this.policiesManager.getFormattedPolicies();\n      var policiesTitles = [];\n      var rulesTitles = [];\n      var ids = [];\n\n      for (var i in policies) {\n        policiesTitles.push(policies[i].title);\n        rulesTitles.push(policies[i].rulesTitles);\n        ids.push(policies[i].ids);\n      }\n\n      var table = '<table>';\n      var isEmpty = policiesTitles.length === 0;\n\n      for (var _i in policiesTitles) {\n        table += '<thead><tr id=\"' + policiesTitles[_i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[_i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n\n        for (var j in rulesTitles[_i]) {\n          table += '<tr id=\"' + ids[_i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[_i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n        table += '<tr id=\"' + policiesTitles[_i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.policies-current').append(table);\n      } else {\n        $('.policies-no').removeClass('hide');\n      }\n      $('.rule-add').on('click', function (event) {\n        _this5._showVariablesTypes();\n      });\n      $('.rule-delete').on('click', function (event) {\n        _this5._deleteRule();\n      });\n      $('.rule-show').on('click', function (event) {\n        _this5._showRule();\n      });\n      $('.rule-priority-increase').on('click', function (event) {\n        _this5._increaseRulePriority();\n      });\n      $('.rule-priority-decrease').on('click', function (event) {\n        _this5._decreaseRulePriority();\n      });\n      $('.policy-add').off();\n      $('.policy-add').on('click', function (event) {\n        _this5._addPolicy();\n      });\n      $('.policy-delete').on('click', function (event) {\n        _this5._deletePolicy();\n      });\n    }\n  }, {\n    key: '_goHome',\n    value: function _goHome() {\n      this._getActivePolicy();\n      this._getPoliciesTable();\n    }\n  }, {\n    key: '_increaseRulePriority',\n    value: function _increaseRulePriority() {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      if (thisPriority !== 0) {\n        splitId.pop();\n        var policyTitle = splitId.join(':');\n        var newPriority = thisPriority - 1;\n\n        this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority);\n        this._goHome();\n      }\n    }\n  }, {\n    key: '_manageGroups',\n    value: function _manageGroups() {\n      var _this6 = this;\n\n      $('.groups-current').html('');\n      var groupsPE = this.policiesManager.getGroups();\n      var groups = groupsPE.groupsNames;\n      var members = groupsPE.members;\n      var ids = groupsPE.ids;\n\n      var table = '<table>';\n      var isEmpty = groups.length === 0;\n\n      for (var i in groups) {\n        table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n        for (var j in members[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n\n        table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.groups-current').append(table);\n      } else {\n        $('.groups-current').append('<p>There are no groups set.</p>');\n      }\n\n      $('.member-add').off();\n      $('.member-add').on('click', function (event) {\n        _this6._addMember();\n      });\n      $('.member-delete').on('click', function (event) {\n        _this6._deleteMember();\n      });\n      $('.group-add').off();\n      $('.group-add').on('click', function (event) {\n        _this6._createGroup();\n      });\n      $('.group-delete').on('click', function (event) {\n        _this6._deleteGroup();\n      });\n    }\n  }, {\n    key: '_parseFileContent',\n    value: function _parseFileContent(content) {\n      var parsedContent = JSON.parse(content);\n      for (var i in parsedContent) {\n        this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\n      }\n      $('.policy-new').closeModal();\n    }\n  }, {\n    key: '_setElements',\n    value: function _setElements() {\n      var _this7 = this;\n\n      return {\n        date: function date(params) {\n          return '<input type=\"date\" class=\"datepicker\">';\n        },\n        select: function select(params) {\n          return _this7._getOptions(params[0], params[1], params[2]);\n        },\n        form: function form(params) {\n          return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>';\n        }\n      };\n    }\n  }, {\n    key: '_showNewConfigurationPanel',\n    value: function _showNewConfigurationPanel(policyTitle) {\n      var variable = event.target.text;\n      $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n      $('.scopes').empty().html('');\n\n      var keys = ['Email', 'Hyperty', 'All'];\n      var scopes = ['user', 'hyperty', 'global'];\n      var lists = [];\n\n      lists.push(this.policiesManager.getMyEmails());\n      lists.push(this.policiesManager.getMyHyperties());\n      lists.push(['All identities and hyperties']);\n      $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n      $('.variable').removeClass('hide');\n    }\n  }, {\n    key: '_showVariablesTypes',\n    value: function _showVariablesTypes() {\n      var _this8 = this;\n\n      var policyTitle = event.target.closest('tr').id;\n\n      $('#variables-types').empty().html('');\n      var variables = this.policiesManager.getVariables();\n      $('#variables-types').append(this._getList(variables));\n      $('.variable').addClass('hide');\n      $('.rule-new').openModal();\n      $('#variables-types').off();\n      $('#variables-types').on('click', function (event) {\n        _this8._showNewConfigurationPanel(policyTitle);\n      });\n    }\n  }, {\n    key: '_getNewConfiguration',\n    value: function _getNewConfiguration(policyTitle, variable) {\n      var _this9 = this;\n\n      var info = this.policiesManager.getVariableInfo(variable);\n      $('.rule-new-title').html(info.title);\n      $('.description').html(info.description);\n      $('.config').html('');\n\n      if (variable === 'Subscription preferences') {\n        $('.subscription-type').removeClass('hide');\n      } else {\n        $('.subscription-type').addClass('hide');\n        var tags = info.input;\n        for (var i in tags) {\n          if (variable === 'Group of users') {\n            tags[i][1].push(this.policiesManager.getGroupsNames());\n          }\n          $('.config').append(this.elements[tags[i][0]](tags[i][1]));\n          if (variable === 'Group of users') {\n            tags[i][1].pop();\n          }\n        }\n        if (variable === 'date') {\n          $('.datepicker').pickadate({\n            selectMonths: true,\n            selectYears: 15\n          });\n        }\n      }\n      document.getElementById('allow').checked = false;\n      document.getElementById('block').checked = false;\n      $('.ok-btn').off();\n      $('.ok-btn').on('click', function (event) {\n        if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n          var _info = _this9._getInfo(variable);\n          var decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n          decision = decision === 'allow';\n          var scope = $('.scopes').find(\":selected\")[0].id;\n          var target = $('.scopes').find(\":selected\")[0].textContent;\n          target = target === 'All identities and hyperties' ? 'global' : target;\n          _this9.policiesManager.setInfo(variable, policyTitle, _info, decision, scope, target);\n          $('.rule-new').closeModal();\n          _this9._goHome();\n        } else {\n          throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n        }\n      });\n    }\n  }, {\n    key: '_deleteInfo',\n    value: function _deleteInfo(resourceType) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var scope = splitId[0];\n      splitId.shift();\n      var target = splitId.join('');\n      var condition = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n      this._goHome();\n    }\n  }, {\n    key: '_setListeners',\n    value: function _setListeners() {\n      var _this10 = this;\n\n      $('.settings-btn').on('click', function (event) {\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      });\n\n      $('.policies-page-show').on('click', function (event) {\n        $('.policies-section').removeClass('hide');\n        _this10._goHome();\n        _this10._manageGroups();\n      });\n\n      $('.identities-page-show').on('click', function (event) {\n        $('.policies-section').addClass('hide');\n      });\n\n      $('.admin-page-exit').on('click', function (event) {\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n      });\n\n      $('.exit-btn').on('click', function (event) {\n        $('.subscription-type').addClass('hide');\n        $('.help-menu').addClass('hide');\n      });\n\n      $('#policy-file').on('change', function (event) {\n        var file = event.target.files[0];\n        var reader = new FileReader();\n        reader.readAsText(file, \"UTF-8\");\n        reader.onload = function (event) {\n          _this10._parseFileContent(event.target.result);\n          _this10._goHome();\n        };\n        reader.onerror = function (event) {\n          throw Error(\"Error reading the file\");\n        };\n      });\n    }\n  }, {\n    key: '_showRule',\n    value: function _showRule() {\n      var _this11 = this;\n\n      var ruleTitle = event.target.textContent;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n      if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n        $('.authorise-btns').addClass('hide');\n      } else {\n        var element = void 0;\n        if (rule.authorise) {\n          element = document.getElementById('btn-allow');\n        } else {\n          element = document.getElementById('btn-block');\n        }\n        element.checked = true;\n        $('.authorise-btns').removeClass('hide');\n      }\n      $('.member-add').addClass('hide');\n      $('.member-new-btn').addClass('hide');\n\n      $('.rule-details').openModal();\n      $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n      if (rule.condition.attribute === 'subscription') {\n        $('.subscription-type').removeClass('hide');\n      }\n      $('.subscription-decision').on('click', function (event) {\n        _this11._updateRule('subscription', policyTitle, rule);\n      });\n      $('.decision').off();\n      $('.decision').on('click', function (event) {\n        _this11._updateRule('authorisation', policyTitle, rule);\n      });\n    }\n  }, {\n    key: '_updateRule',\n    value: function _updateRule(type, policyTitle, rule) {\n      var title = $('.rule-title').text();\n      var splitTitle = title.split(' ');\n      var index = splitTitle.indexOf('is');\n      if (index === -1) {\n        index = splitTitle.indexOf('are');\n      }\n      switch (type) {\n        case 'authorisation':\n          var newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n\n          if (newDecision === 'btn-allow') {\n            splitTitle[index + 1] = 'allowed';\n            newDecision = true;\n          } else {\n            splitTitle[index + 1] = 'blocked';\n            newDecision = false;\n          }\n          title = splitTitle.join(' ');\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          this.policiesManager.updatePolicy(policyTitle, rule, newDecision);\n          break;\n        case 'subscription':\n          var newSubscriptionType = event.target.labels[0].textContent;\n\n          var decision = splitTitle[index + 1];\n          splitTitle = title.split('hyperties are');\n          if (newSubscriptionType === 'All subscribers') {\n            $('.authorise-btns').removeClass('hide');\n            newDecision = rule.authorise;\n            newSubscriptionType = '*';\n            title = 'Subscriptions from all hyperties are' + splitTitle[1];\n          } else {\n            $('.authorise-btns').addClass('hide');\n            newDecision = true;\n            newSubscriptionType = 'preauthorised';\n            title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n          }\n\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType);\n          break;\n      }\n      this._goHome();\n    }\n  }]);\n\n  return PoliciesGUI;\n}();\n\nexports.default = PoliciesGUI;\n\n},{\"./PoliciesManager\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesManager = function () {\n  function PoliciesManager(policyEngine) {\n    _classCallCheck(this, PoliciesManager);\n\n    this.policyEngine = policyEngine;\n    this.policies = this.policyEngine.context.userPolicies;\n    this.variables = this.setVariables();\n    this.addition = this.setAdditionMethods();\n    this.validation = this.setValidationMethods();\n  }\n\n  _createClass(PoliciesManager, [{\n    key: 'addToGroup',\n    value: function addToGroup(groupName, user) {\n      this.policyEngine.context.addToGroup(groupName, user);\n    }\n  }, {\n    key: 'createGroup',\n    value: function createGroup(groupName) {\n      this.policyEngine.context.createGroup(groupName);\n    }\n  }, {\n    key: 'addPolicy',\n    value: function addPolicy(title, combiningAlgorithm, policy) {\n      if (policy === undefined) {\n        switch (combiningAlgorithm) {\n          case 'Block overrides':\n            combiningAlgorithm = 'blockOverrides';\n            break;\n          case 'Allow overrides':\n            combiningAlgorithm = 'allowOverrides';\n            break;\n          case 'First applicable':\n            combiningAlgorithm = 'firstApplicable';\n            break;\n          default:\n            combiningAlgorithm = undefined;\n        }\n      }\n\n      this.policyEngine.addPolicy('USER', title, policy, combiningAlgorithm);\n    }\n  }, {\n    key: 'decreaseRulePriority',\n    value: function decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'deleteGroup',\n    value: function deleteGroup(groupName) {\n      this.policyEngine.context.deleteGroup(groupName);\n    }\n  }, {\n    key: 'deletePolicy',\n    value: function deletePolicy(title) {\n      this.policyEngine.removePolicy('USER', title);\n    }\n  }, {\n    key: 'deleteRule',\n    value: function deleteRule(policyTitle, rule) {\n      var userPolicies = this.policyEngine.context.userPolicies;\n      userPolicies[policyTitle].deleteRule(rule);\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'getActivePolicy',\n    value: function getActivePolicy() {\n      return this.policyEngine.context.activeUserPolicy;\n    }\n  }, {\n    key: 'getPolicy',\n    value: function getPolicy(key) {\n      return this.policyEngine.context.userPolicies[key];\n    }\n  }, {\n    key: 'getPoliciesTitles',\n    value: function getPoliciesTitles() {\n      var policies = this.policyEngine.context.userPolicies;\n      var titles = [];\n\n      for (var i in policies) {\n        titles.push(i);\n      }\n\n      return titles;\n    }\n  }, {\n    key: 'getTargets',\n    value: function getTargets(scope) {\n      var targets = [];\n\n      for (var i in this.policies[scope]) {\n        if (targets.indexOf(i) === -1) {\n          targets.push(i);\n        }\n      }\n\n      return targets;\n    }\n  }, {\n    key: 'increaseRulePriority',\n    value: function increaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'setVariables',\n    value: function setVariables() {\n      return {\n        'Date': {\n          title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Date:</p>',\n          input: [['date', []]]\n        },\n        'Domain': {\n          title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Domain:</p>',\n          input: [['form', []]]\n        },\n        'Group of users': {\n          title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Group name:</p>',\n          input: [['select', ['group', 'Select a group:']]]\n        },\n        'Subscription preferences': {\n          title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          input: []\n        },\n        'Time of the day': {\n          title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n          description: '<p>Timeslot:</p>',\n          input: [['form', []]]\n        },\n        Weekday: {\n          title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Weekday:</p>',\n          input: [['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]]\n        }\n      };\n    }\n  }, {\n    key: 'setAdditionMethods',\n    value: function setAdditionMethods() {\n      var _this = this;\n\n      return {\n        Date: function Date(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['date', 'equals', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        Domain: function Domain(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['domain', 'equals', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Group of users': function GroupOfUsers(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['source', 'in', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Subscription preferences': function SubscriptionPreferences(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          var operator = 'equals';\n          if (params[3] === 'preauthorised') {\n            operator = 'in';\n          }\n          userPolicies[policyTitle].createRule('subscription', params[4], ['subscription', operator, params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Time of the day': function TimeOfTheDay(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          params[3] = params[3].split(' to ');\n          var start = params[3][0].split(':');\n          start = start.join('');\n          var end = params[3][1].split(':');\n          end = end.join('');\n          userPolicies[policyTitle].createRule('simple', params[4], ['time', 'between', [start, end]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        Weekday: function Weekday(params) {\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          params[3] = weekdays.indexOf(params[3]);\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule('simple', params[4], ['weekday', 'equals', params[3]], params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        }\n      };\n    }\n  }, {\n    key: 'setValidationMethods',\n    value: function setValidationMethods() {\n      var _this2 = this;\n\n      return {\n        Date: function Date(scope, info) {\n          return _this2.isValidDate(info) & _this2.isValidScope(scope);\n        },\n        'Group of users': function GroupOfUsers(scope, info) {\n          return _this2.isValidString(info) & _this2.isValidScope(scope);\n        },\n        Domain: function Domain(scope, info) {\n          return _this2.isValidDomain(info) & _this2.isValidScope(scope);\n        },\n        Weekday: function Weekday(scope, info) {\n          return true & _this2.isValidScope(scope);\n        },\n        'Subscription preferences': function SubscriptionPreferences(scope, info) {\n          return _this2.isValidSubscriptionType(info) & _this2.isValidScope(scope);\n        },\n        'Time of the day': function TimeOfTheDay(scope, info) {\n          return _this2.isValidTimeslot(info) & _this2.isValidScope(scope);\n        }\n      };\n    }\n  }, {\n    key: 'updateActivePolicy',\n    value: function updateActivePolicy(title) {\n      this.policyEngine.context.activeUserPolicy = title;\n      this.policyEngine.context.saveActivePolicy();\n    }\n  }, {\n    key: 'isValidEmail',\n    value: function isValidEmail(info) {\n      var pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidDomain',\n    value: function isValidDomain(info) {\n      var pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidString',\n    value: function isValidString(info) {\n      var pattern = /[a-z0-9.-]$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidSubscriptionType',\n    value: function isValidSubscriptionType(info) {\n      return true;\n    }\n  }, {\n    key: 'isValidDate',\n    value: function isValidDate(info) {\n      var infoSplit = info.split('/');\n      var day = parseInt(infoSplit[0]);\n      var month = parseInt(infoSplit[1]);\n      var year = parseInt(infoSplit[2]);\n\n      var date = new Date(year, month - 1, day);\n      var isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n      var formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n      var now = new Date();\n      var today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n      var isFuture = false;\n      if (date.getFullYear() > now.getFullYear()) {\n        isFuture = true;\n      } else {\n        if (date.getFullYear() == now.getFullYear()) {\n          if (date.getMonth() + 1 > now.getMonth() + 1) {\n            isFuture = true;\n          } else {\n            if (date.getMonth() + 1 == now.getMonth() + 1) {\n              if (date.getDate() >= now.getDate()) {\n                isFuture = true;\n              }\n            }\n          }\n        }\n      }\n\n      return isValidFormat && isFuture;\n    }\n  }, {\n    key: 'isValidScope',\n    value: function isValidScope(scope) {\n      return scope !== '';\n    }\n  }, {\n    key: 'isValidTimeslot',\n    value: function isValidTimeslot(info) {\n      if (!info) {\n        return false;\n      }\n      var splitInfo = info.split(' to '); // [12:00, 13:00]\n      var twoTimes = splitInfo.length === 2;\n      if (!twoTimes) {\n        return false;\n      }\n      var splitStart = splitInfo[0].split(':'); // [12, 00]\n      var splitEnd = splitInfo[1].split(':'); // [13, 00]\n      if (splitStart.length !== 2 || splitEnd.length !== 2) {\n        return false;\n      }\n      var okSize = splitStart[0].length === 2 && splitStart[1].length === 2 && splitEnd[0].length === 2 && splitEnd[1].length === 2;\n      var areIntegers = splitStart[0] == parseInt(splitStart[0], 10) && splitStart[1] == parseInt(splitStart[1], 10) && splitEnd[0] == parseInt(splitEnd[0], 10) && splitEnd[1] == parseInt(splitEnd[1], 10);\n      return twoTimes && okSize && areIntegers;\n    }\n  }, {\n    key: 'getFormattedPolicies',\n    value: function getFormattedPolicies() {\n      var policiesPE = this.policyEngine.context.userPolicies;\n\n      var policiesGUI = [];\n\n      for (var i in policiesPE) {\n        var policy = {\n          title: policiesPE[i].key,\n          rulesTitles: [],\n          ids: []\n        };\n\n        if (policiesPE[i].rules.length !== 0) {\n          policiesPE[i].rules = policiesPE[i].sortRules();\n          for (var j in policiesPE[i].rules) {\n            var title = this._getTitle(policiesPE[i].rules[j]);\n            policy.rulesTitles.push(title);\n            policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n          }\n        }\n\n        policiesGUI.push(policy);\n      }\n\n      return policiesGUI;\n    }\n  }, {\n    key: 'getRuleOfPolicy',\n    value: function getRuleOfPolicy(title, priority) {\n      var policies = this.policyEngine.context.userPolicies;\n      var policy = policies[title];\n      return policy.getRuleByPriority(priority);\n    }\n  }, {\n    key: '_getTitle',\n    value: function _getTitle(rule) {\n      var condition = rule.condition;\n      var authorise = rule.authorise ? 'allowed' : 'blocked';\n      var target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n      var attribute = condition.attribute;\n      switch (attribute) {\n        case 'date':\n          return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n        case 'domain':\n          return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        case 'source':\n          if (condition.operator === 'in') {\n            return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.operator === 'equals') {\n              return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n            }\n          }\n        case 'subscription':\n          if (condition.params === '*') {\n            return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.params === 'preauthorised') {\n              return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n            }\n          }\n        case 'time':\n          var start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n          var end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n          return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n        case 'weekday':\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          var weekdayID = condition.params;\n          return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n        default:\n          return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n      }\n    }\n  }, {\n    key: 'getVariables',\n    value: function getVariables() {\n      var variablesTitles = [];\n      for (var i in this.variables) {\n        variablesTitles.push(i);\n      }\n      return variablesTitles;\n    }\n  }, {\n    key: 'getVariableInfo',\n    value: function getVariableInfo(variable) {\n      return this.variables[variable];\n    }\n  }, {\n    key: 'getMyEmails',\n    value: function getMyEmails() {\n      return this.policyEngine.context.getMyEmails();\n    }\n  }, {\n    key: 'getMyHyperties',\n    value: function getMyHyperties() {\n      return this.policyEngine.context.getMyHyperties();\n    }\n\n    //TODO If there is a problem with the input, show it to the user\n\n  }, {\n    key: 'setInfo',\n    value: function setInfo(variable, policyTitle, info, authorise, scope, target) {\n      if (this.validation[variable](scope, info)) {\n        this.addition[variable]([policyTitle, scope, target, info, authorise]);\n      } else {\n        throw Error('Invalid configuration');\n      }\n    }\n  }, {\n    key: 'getInfo',\n    value: function getInfo(scope, title) {\n      var policies = this.policies[scope];\n      var policy = {};\n      for (var i in policies) {\n        if (policies[i].condition === title) {\n          policy = policies[i];\n        }\n      }\n      if (policy !== {}) {\n        var condition = policy.condition.split(' ');\n        return this.policyEngine.getList(scope, condition[2]);\n      } else {\n        throw Error('Policy <' + title + '> not found!');\n      }\n    }\n  }, {\n    key: 'deleteInfo',\n    value: function deleteInfo(variable, scope, target, info) {\n      var params = [scope, target, info];\n      if (variable === 'member') {\n        var conditionSplit = info.split(' ');\n        var groupName = conditionSplit[2];\n        params = [scope, groupName, info];\n      }\n      this.deletion[variable](params);\n    }\n  }, {\n    key: 'getGroup',\n    value: function getGroup(scope, target, groupName) {\n      return this.policyEngine.context.getGroup(scope, target, groupName);\n    }\n  }, {\n    key: 'getGroups',\n    value: function getGroups() {\n      var groups = this.policyEngine.context.groups;\n      var groupsGUI = {\n        groupsNames: [],\n        members: [],\n        ids: []\n      };\n\n      for (var i in groups) {\n        groupsGUI.groupsNames.push(i);\n        groupsGUI.members.push(groups[i]);\n        var ids = [];\n        for (var j in groups[i]) {\n          ids.push(i + '::' + groups[i][j]);\n        }\n        groupsGUI.ids.push(ids);\n      }\n\n      return groupsGUI;\n    }\n  }, {\n    key: 'getGroupsNames',\n    value: function getGroupsNames() {\n      return this.policyEngine.context.getGroupsNames();\n    }\n  }, {\n    key: 'removeFromGroup',\n    value: function removeFromGroup(groupName, user) {\n      this.policyEngine.context.removeFromGroup(groupName, user);\n    }\n  }, {\n    key: 'updatePolicy',\n    value: function updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n      var userPolicies = this.policyEngine.context.userPolicies;\n      userPolicies[policyTitle].deleteRule(rule);\n      if (!newSubscriptionType) {\n        var type = void 0;\n\n        if (rule.condition.attribute === undefined) {\n          type = 'advanced';\n        } else {\n          if (rule.condition.attribute === 'subscription') {\n            type = 'subscription';\n          } else {\n            type = 'simple';\n          }\n        }\n        userPolicies[policyTitle].createRule(type, newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n      } else {\n        var operator = newSubscriptionType === '*' ? 'equals' : 'in';\n        userPolicies[policyTitle].createRule('subscription', newDecision, ['subscription', operator, newSubscriptionType], rule.scope, rule.target, rule.priority);\n      }\n\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }]);\n\n  return PoliciesManager;\n}();\n\nexports.default = PoliciesManager;\n\n},{}]},{},[1])(1)\n});\n\n","import PoliciesManager from './PoliciesManager';\n\nclass PoliciesGUI {\n\n  constructor(policyEngine) {\n    if (!policyEngine) throw Error('Policy Engine is not set!');\n    this.policiesManager = new PoliciesManager(policyEngine);\n    this.elements = this._setElements();\n    this._setListeners();\n  }\n\n  _addMember() {\n    let group = event.target.id;\n    $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n    $('.member-new-modal').openModal();\n    $('.member-new-ok').off();\n    $('.member-new-ok').on('click', (event) => {\n      let member = $('#member-new').val();\n      $('#member-new').val('');\n      this.policiesManager.addToGroup(group, member);\n      $('.member-new-modal').closeModal();\n      this._manageGroups();\n    });\n  }\n\n  _createGroup() {\n    $('#group-new-name').val('');\n    $('.group-new-modal').openModal();\n    $('.group-new-ok').on('click', (event) => {\n      let groupName = $('#group-new-name').val();\n      this.policiesManager.createGroup(groupName);\n      this._manageGroups();\n    });\n  }\n\n  _addPolicy() {\n    $('#policy-new-title').val('');\n    $('.combining').html('');\n    let algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\n    $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\n    $('.policy-new').openModal();\n\n    $('.policy-new-ok').off();\n    $('.policy-new-ok').on('click', (event) => {\n      let policyTitle = $('#policy-new-title').val();\n      let combiningAlgorithm = $('#comb-algorithm').val();\n      this.policiesManager.addPolicy(policyTitle, combiningAlgorithm);\n      $('.help-menu').addClass('hide');\n      $('.policy-new').closeModal();\n      this._goHome();\n    });\n    $('.help-btn').off();\n    $('.help-btn').on('click', (event) => {\n      $('.help-menu').removeClass('hide');\n    });\n  }\n\n  _decreaseRulePriority() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let lastPriority = this.policiesManager.getPolicy(policyTitle).getLastPriority();\n    if (lastPriority != thisPriority) {\n      let newPriority = parseInt(thisPriority + 1);\n      this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority);\n      this._goHome();\n    }\n  }\n\n  _deleteMember() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split('::');\n    let member = splitId[splitId.length - 1];\n    splitId.pop();\n    let group = splitId.join('::');\n    this.policiesManager.removeFromGroup(group, member);\n    this._manageGroups();\n  }\n\n  _deleteGroup() {\n    let groupName = event.target.closest('tr').children[0].id;\n    this.policiesManager.deleteGroup(groupName);\n    this._manageGroups();\n  }\n\n  _deletePolicy() {\n    let policyTitle = event.target.closest('tr').id;\n    this.policiesManager.deletePolicy(policyTitle);\n    this._goHome();\n  }\n\n  _deleteRule() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n    this.policiesManager.deleteRule(policyTitle, rule);\n    this._goHome();\n  }\n\n  _getActivePolicy() {\n    $('.policy-active').html('');\n    let activeUserPolicy = this.policiesManager.getActivePolicy();\n    let policies = this.policiesManager.getPoliciesTitles();\n    policies.push('Deactivate all policies');\n\n    $('.policy-active').append(this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\n\n    $('#policies-list').on('click', (event) => {\n      let policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\n      if (policyTitle === 'Deactivate all policies') {\n        policyTitle = undefined;\n      }\n      this.policiesManager.updateActivePolicy(policyTitle);\n    });\n  }\n\n  _getGroupOptions(title, keys, scopes, lists) {\n    let list = '<option disabled selected>' + title + '</option>';\n\n    for (let i in keys) {\n      list += '<optgroup label=' + keys[i] + '>';\n      for (let j in lists[i]) {\n        list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n      }\n    }\n\n    return list;\n  }\n\n  _getInfo(variable) {\n    let info;\n\n    switch(variable) {\n      case 'Date':\n        info = $('.config').find('input').val();\n        if (info.indexOf(',') !== -1) { //20 July, 2016\n          let splitInfo = info.split(' '); //['20', 'July,',' '2016']\n          splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n          let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n          info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n        } else { // 2016-07-20\n          let splitInfo = info.split('-');\n          info = splitInfo[2] + '/' + splitInfo[1] + '/' + splitInfo[0];\n        }\n        break;\n      case 'Group of users':\n        info = $('#group').find(\":selected\").text();\n        break;\n      case 'Subscription preferences':\n        if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n          info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n        }\n        break;\n      case 'Weekday':\n        info = $('#weekday').find(\":selected\").text();\n        break;\n      default:\n        info = $('.config').find('input').val();\n        break;\n    }\n\n    return info;\n  }\n\n  _getList(items) {\n      let list = '';\n      let numItems = items.length;\n\n      for (let i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n\n  _getOptions(id, title, list, selected) {\n    let options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n    for (let i in list) {\n      if (selected !== undefined & selected === list[i]) {\n        options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\n      } else {\n        options += '<option id=\"' + id + '\">' + list[i] + '</option>';\n      }\n    }\n    options += '</select>';\n\n    return options;\n  }\n\n  _getPoliciesTable() {\n    $('.policies-no').addClass('hide');\n    $('.policies-current').html('');\n\n    let policies = this.policiesManager.getFormattedPolicies();\n    let policiesTitles = [];\n    let rulesTitles = [];\n    let ids = [];\n\n    for (let i in policies) {\n      policiesTitles.push(policies[i].title);\n      rulesTitles.push(policies[i].rulesTitles);\n      ids.push(policies[i].ids);\n    }\n\n    let table = '<table>';\n    let isEmpty = policiesTitles.length === 0;\n\n    for (let i in policiesTitles) {\n      table += '<thead><tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n\n      for (let j in rulesTitles[i]) {\n        table += '<tr id=\"' + ids[i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n      }\n      table += '<tr id=\"' + policiesTitles[i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n    }\n    if (!isEmpty) {\n      table += '</tbody></table>';\n      $('.policies-current').append(table);\n    } else {\n      $('.policies-no').removeClass('hide');\n    }\n    $('.rule-add').on('click', (event) => { this._showVariablesTypes(); });\n    $('.rule-delete').on('click', (event) => { this._deleteRule(); });\n    $('.rule-show').on('click', (event) => { this._showRule(); });\n    $('.rule-priority-increase').on('click', (event) => { this._increaseRulePriority(); });\n    $('.rule-priority-decrease').on('click', (event) => { this._decreaseRulePriority(); });\n    $('.policy-add').off();\n    $('.policy-add').on('click', (event) => { this._addPolicy(); });\n    $('.policy-delete').on('click', (event) => { this._deletePolicy(); });\n  }\n\n  _goHome() {\n    this._getActivePolicy();\n    this._getPoliciesTable();\n  }\n\n  _increaseRulePriority() {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\n    if (thisPriority !== 0) {\n      splitId.pop();\n      let policyTitle = splitId.join(':');\n      let newPriority = thisPriority - 1;\n\n      this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority);\n      this._goHome();\n    }\n  }\n\n  _manageGroups() {\n    $('.groups-current').html('');\n    let groupsPE = this.policiesManager.getGroups();\n    let groups = groupsPE.groupsNames;\n    let members = groupsPE.members;\n    let ids = groupsPE.ids;\n\n    let table = '<table>';\n    let isEmpty = groups.length === 0;\n\n    for (let i in groups) {\n      table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n      for (let j in members[i]) {\n        table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n      }\n\n      table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n    }\n\n    if (!isEmpty) {\n      table += '</tbody></table>';\n      $('.groups-current').append(table);\n    } else {\n      $('.groups-current').append('<p>There are no groups set.</p>');\n    }\n\n    $('.member-add').off();\n    $('.member-add').on('click', (event) => { this._addMember(); });\n    $('.member-delete').on('click', (event) => { this._deleteMember(); });\n    $('.group-add').off();\n    $('.group-add').on('click', (event) => { this._createGroup(); });\n    $('.group-delete').on('click', (event) => { this._deleteGroup(); });\n  }\n\n  _parseFileContent(content) {\n    let parsedContent = JSON.parse(content);\n    for (let i in parsedContent) {\n      this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\n    }\n    $('.policy-new').closeModal();\n  }\n\n  _setElements() {\n    return {\n      date: (params) => { return '<input type=\"date\" class=\"datepicker\">'; },\n      select: (params) => { return this._getOptions(params[0], params[1], params[2]); },\n      form: (params) => { return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>'; }\n    };\n  }\n\n  _showNewConfigurationPanel(policyTitle) {\n    let variable = event.target.text;\n    $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n    $('.scopes').empty().html('');\n\n    let keys = ['Email', 'Hyperty', 'All'];\n    let scopes = ['user', 'hyperty', 'global'];\n    let lists = [];\n\n    lists.push(this.policiesManager.getMyEmails());\n    lists.push(this.policiesManager.getMyHyperties());\n    lists.push(['All identities and hyperties']);\n    $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n    $('.variable').removeClass('hide');\n  }\n\n  _showVariablesTypes() {\n    let policyTitle = event.target.closest('tr').id;\n\n    $('#variables-types').empty().html('');\n    let variables = this.policiesManager.getVariables();\n    $('#variables-types').append(this._getList(variables));\n    $('.variable').addClass('hide');\n    $('.rule-new').openModal();\n    $('#variables-types').off();\n    $('#variables-types').on('click', (event) => { this._showNewConfigurationPanel(policyTitle); });\n  }\n\n  _getNewConfiguration(policyTitle, variable) {\n    let info = this.policiesManager.getVariableInfo(variable);\n    $('.rule-new-title').html(info.title);\n    $('.description').html(info.description);\n    $('.config').html('');\n\n    if (variable === 'Subscription preferences') {\n      $('.subscription-type').removeClass('hide');\n    } else {\n      $('.subscription-type').addClass('hide');\n      let tags = info.input;\n      for (let i in tags) {\n        if (variable === 'Group of users') {\n          tags[i][1].push(this.policiesManager.getGroupsNames());\n        }\n        $('.config').append(this.elements[tags[i][0]](tags[i][1]));\n        if (variable === 'Group of users') {\n          tags[i][1].pop();\n        }\n      }\n      if (variable ==='date') {\n        $('.datepicker').pickadate({\n          selectMonths: true,\n          selectYears: 15\n        });\n      }\n    }\n    document.getElementById('allow').checked = false;\n    document.getElementById('block').checked = false;\n    $('.ok-btn').off();\n    $('.ok-btn').on('click', (event) => {\n      if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n        let info = this._getInfo(variable);\n        let decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n        decision = decision === 'allow';\n        let scope = $('.scopes').find(\":selected\")[0].id;\n        let target = $('.scopes').find(\":selected\")[0].textContent;\n        target = (target === 'All identities and hyperties') ? 'global' : target;\n        this.policiesManager.setInfo(variable, policyTitle, info, decision, scope, target);\n        $('.rule-new').closeModal();\n        this._goHome();\n      } else {\n        throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n      }\n    });\n  }\n\n  _deleteInfo(resourceType) {\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let scope = splitId[0];\n    splitId.shift();\n    let target = splitId.join('');\n    let condition = event.target.closest('tr').children[0].id;\n    this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n    this._goHome();\n  }\n\n  _setListeners() {\n    $('.settings-btn').on('click', (event) => {\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').removeClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\n    });\n\n    $('.policies-page-show').on('click', (event) => {\n      $('.policies-section').removeClass('hide');\n      this._goHome();\n      this._manageGroups();\n    });\n\n    $('.identities-page-show').on('click', (event) => {\n      $('.policies-section').addClass('hide');\n    });\n\n    $('.admin-page-exit').on('click', (event) => {\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n      $('.admin-page').addClass('hide');\n      document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n    });\n\n    $('.exit-btn').on('click', (event) => {\n      $('.subscription-type').addClass('hide');\n      $('.help-menu').addClass('hide');\n    });\n\n    $('#policy-file').on('change', (event) => {\n      let file = event.target.files[0];\n      let reader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n      reader.onload = (event) => {\n        this._parseFileContent(event.target.result);\n        this._goHome();\n      }\n      reader.onerror = (event) => {\n        throw Error(\"Error reading the file\");\n      }\n    });\n  }\n\n  _showRule() {\n    let ruleTitle = event.target.textContent;\n    let id = event.target.closest('tr').id;\n    let splitId = id.split(':');\n    let priority = splitId[splitId.length - 1];\n    splitId.pop();\n    let policyTitle = splitId.join(':');\n    let rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n    if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n      $('.authorise-btns').addClass('hide');\n    } else {\n      let element;\n      if (rule.authorise) {\n        element = document.getElementById('btn-allow');\n      } else {\n        element = document.getElementById('btn-block');\n      }\n      element.checked = true;\n      $('.authorise-btns').removeClass('hide');\n    }\n    $('.member-add').addClass('hide');\n    $('.member-new-btn').addClass('hide');\n\n    $('.rule-details').openModal();\n    $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n    if (rule.condition.attribute === 'subscription') {\n      $('.subscription-type').removeClass('hide');\n    }\n    $('.subscription-decision').on('click', (event) => { this._updateRule('subscription', policyTitle, rule); });\n    $('.decision').off();\n    $('.decision').on('click', (event) => { this._updateRule('authorisation', policyTitle, rule);});\n  }\n\n  _updateRule(type, policyTitle, rule) {\n    let title = $('.rule-title').text();\n    let splitTitle = title.split(' ');\n    let index = splitTitle.indexOf('is');\n    if (index === -1) {\n      index = splitTitle.indexOf('are');\n    }\n    switch (type) {\n      case 'authorisation':\n        let newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n\n        if (newDecision === 'btn-allow') {\n          splitTitle[index + 1] = 'allowed';\n          newDecision = true;\n        } else {\n          splitTitle[index + 1] = 'blocked';\n          newDecision = false;\n        }\n        title = splitTitle.join(' ');\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        this.policiesManager.updatePolicy(policyTitle, rule, newDecision);\n        break;\n      case 'subscription':\n        let newSubscriptionType = event.target.labels[0].textContent;\n\n        let decision = splitTitle[index + 1];\n        splitTitle = title.split('hyperties are');\n        if (newSubscriptionType === 'All subscribers') {\n          $('.authorise-btns').removeClass('hide');\n          newDecision = rule.authorise;\n          newSubscriptionType = '*';\n          title = 'Subscriptions from all hyperties are' + splitTitle[1];\n        } else {\n          $('.authorise-btns').addClass('hide');\n          newDecision = true;\n          newSubscriptionType = 'preauthorised';\n          title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n        }\n\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n        this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType);\n        break;\n    }\n    this._goHome();\n  }\n}\n\nexport default PoliciesGUI;\n","class PoliciesManager {\n\n  constructor(policyEngine) {\n    this.policyEngine = policyEngine;\n    this.policies = this.policyEngine.context.userPolicies;\n    this.variables = this.setVariables();\n    this.addition = this.setAdditionMethods();\n    this.validation = this.setValidationMethods();\n  }\n\n  addToGroup(groupName, user) {\n    this.policyEngine.context.addToGroup(groupName, user);\n  }\n\n  createGroup(groupName) {\n    this.policyEngine.context.createGroup(groupName);\n  }\n\n  addPolicy(title, combiningAlgorithm, policy) {\n    if (policy === undefined) {\n      switch (combiningAlgorithm) {\n        case 'Block overrides':\n          combiningAlgorithm = 'blockOverrides';\n          break;\n        case 'Allow overrides':\n          combiningAlgorithm = 'allowOverrides';\n          break;\n        case 'First applicable':\n          combiningAlgorithm = 'firstApplicable';\n          break;\n        default:\n          combiningAlgorithm = undefined;\n      }\n    }\n\n    this.policyEngine.addPolicy('USER', title, policy, combiningAlgorithm);\n  }\n\n  decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  deleteGroup(groupName) {\n    this.policyEngine.context.deleteGroup(groupName);\n  }\n\n  deletePolicy(title) {\n    this.policyEngine.removePolicy('USER', title);\n  }\n\n  deleteRule(policyTitle, rule) {\n    let userPolicies = this.policyEngine.context.userPolicies;\n    userPolicies[policyTitle].deleteRule(rule);\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  getActivePolicy() {\n    return this.policyEngine.context.activeUserPolicy;\n  }\n\n  getPolicy(key) {\n    return this.policyEngine.context.userPolicies[key];\n  }\n\n  getPoliciesTitles() {\n    let policies = this.policyEngine.context.userPolicies;\n    let titles = [];\n\n    for (let i in policies) {\n      titles.push(i);\n    }\n\n    return titles;\n  }\n\n  getTargets(scope) {\n    let targets = [];\n\n    for (let i in this.policies[scope]) {\n      if (targets.indexOf(i) === -1) {\n        targets.push(i);\n      }\n    }\n\n    return targets;\n  }\n\n  increaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  setVariables() {\n    return {\n      'Date': {\n        title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Date:</p>',\n        input: [\n          ['date', []]\n        ]\n      },\n      'Domain': {\n        title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Domain:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      'Group of users': {\n        title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Group name:</p>',\n        input: [\n          ['select', ['group', 'Select a group:']]\n        ]\n      },\n      'Subscription preferences': {\n        title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        input: []\n      },\n      'Time of the day': {\n        title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n        description: '<p>Timeslot:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      Weekday: {\n        title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Weekday:</p>',\n        input: [\n          ['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]\n        ]\n      }\n    };\n  }\n\n  setAdditionMethods() {\n    return {\n      Date: (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['date', 'equals', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      Domain: (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['domain', 'equals', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Group of users': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['source', 'in', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Subscription preferences': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        let operator = 'equals';\n        if (params[3] === 'preauthorised') {\n          operator = 'in';\n        }\n        userPolicies[policyTitle].createRule('subscription', params[4], ['subscription', operator, params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Time of the day': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        params[3] = params[3].split(' to ');\n        let start = params[3][0].split(':');\n        start = start.join('');\n        let end = params[3][1].split(':');\n        end = end.join('');\n        userPolicies[policyTitle].createRule('simple', params[4], ['time', 'between', [start, end]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      Weekday: (params) => {\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        params[3] = weekdays.indexOf(params[3]);\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule('simple', params[4], ['weekday', 'equals', params[3]], params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      }\n    };\n  }\n\n  setValidationMethods() {\n    return {\n      Date: (scope, info) => { return this.isValidDate(info) & this.isValidScope(scope); },\n      'Group of users': (scope, info) => { return this.isValidString(info) & this.isValidScope(scope); },\n      Domain: (scope, info) => { return this.isValidDomain(info) & this.isValidScope(scope); },\n      Weekday: (scope, info) => { return true & this.isValidScope(scope); },\n      'Subscription preferences': (scope, info) => { return this.isValidSubscriptionType(info) & this.isValidScope(scope); },\n      'Time of the day': (scope, info) => { return this.isValidTimeslot(info) & this.isValidScope(scope); }\n    };\n  }\n\n  updateActivePolicy(title) {\n    this.policyEngine.context.activeUserPolicy = title;\n    this.policyEngine.context.saveActivePolicy();\n  }\n\n  isValidEmail(info) {\n    let pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidDomain(info) {\n    let pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidString(info) {\n    let pattern = /[a-z0-9.-]$/;\n    return pattern.test(info);\n  }\n\n  isValidSubscriptionType(info) {\n    return true;\n  }\n\n  isValidDate(info) {\n    let infoSplit = info.split('/');\n    let day = parseInt(infoSplit[0]);\n    let month = parseInt(infoSplit[1]);\n    let year = parseInt(infoSplit[2]);\n\n    let date = new Date(year, month-1, day);\n    let isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n    let formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\n    let now = new Date();\n    let today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n    let isFuture = false;\n    if (date.getFullYear() > now.getFullYear()) {\n      isFuture = true;\n    } else {\n      if (date.getFullYear() == now.getFullYear()) {\n        if ((date.getMonth() + 1) > (now.getMonth() + 1)) {\n          isFuture = true;\n        } else {\n          if ((date.getMonth() + 1) == (now.getMonth() + 1)) {\n            if (date.getDate() >= (now.getDate())) {\n              isFuture = true;\n            }\n          }\n        }\n      }\n    }\n\n    return (isValidFormat && isFuture);\n  }\n\n  isValidScope(scope) {\n    return scope !== '';\n  }\n\n  isValidTimeslot(info) {\n    if (!info) {\n      return false;\n    }\n    let splitInfo = info.split(' to '); // [12:00, 13:00]\n    let twoTimes = splitInfo.length === 2;\n    if (!twoTimes) {\n      return false;\n    }\n    let splitStart = splitInfo[0].split(':'); // [12, 00]\n    let splitEnd = splitInfo[1].split(':'); // [13, 00]\n    if (splitStart.length !== 2 || splitEnd.length !== 2) {\n      return false;\n    }\n    let okSize = (splitStart[0].length === 2) && (splitStart[1].length === 2) && (splitEnd[0].length === 2) && (splitEnd[1].length === 2);\n    let areIntegers = (splitStart[0] == parseInt(splitStart[0], 10)) && (splitStart[1] == parseInt(splitStart[1], 10)) && (splitEnd[0] == parseInt(splitEnd[0], 10)) && (splitEnd[1] == parseInt(splitEnd[1], 10));\n    return twoTimes && okSize && areIntegers;\n  }\n\n  getFormattedPolicies() {\n    let policiesPE = this.policyEngine.context.userPolicies;\n\n    let policiesGUI = [];\n\n    for (let i in policiesPE) {\n      let policy = {\n        title: policiesPE[i].key,\n        rulesTitles: [],\n        ids: []\n      }\n\n      if (policiesPE[i].rules.length !== 0) {\n        policiesPE[i].rules = policiesPE[i].sortRules();\n        for (let j in policiesPE[i].rules) {\n          let title = this._getTitle(policiesPE[i].rules[j]);\n          policy.rulesTitles.push(title);\n          policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n        }\n      }\n\n      policiesGUI.push(policy);\n    }\n\n    return policiesGUI;\n  }\n\n  getRuleOfPolicy(title, priority) {\n    let policies = this.policyEngine.context.userPolicies;\n    let policy = policies[title];\n    return policy.getRuleByPriority(priority);\n  }\n\n  _getTitle(rule) {\n    let condition = rule.condition;\n    let authorise = (rule.authorise) ? 'allowed' : 'blocked';\n    let target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n    let attribute = condition.attribute;\n    switch(attribute) {\n      case 'date':\n        return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n      case 'domain':\n        return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n      case 'source':\n        if (condition.operator === 'in') {\n          return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.operator === 'equals') {\n            return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n          }\n        }\n      case 'subscription':\n        if (condition.params === '*') {\n          return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.params === 'preauthorised') {\n            return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n          }\n        }\n      case 'time':\n        let start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n        let end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n        return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n      case 'weekday':\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        let weekdayID = condition.params;\n        return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n      default:\n        return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n    }\n  }\n\n  getVariables() {\n    let variablesTitles = [];\n    for (let i in this.variables) {\n      variablesTitles.push(i);\n    }\n    return variablesTitles;\n  }\n\n  getVariableInfo(variable) {\n    return this.variables[variable];\n  }\n\n  getMyEmails() {\n    return this.policyEngine.context.getMyEmails();\n  }\n\n  getMyHyperties() {\n    return this.policyEngine.context.getMyHyperties();\n  }\n\n  //TODO If there is a problem with the input, show it to the user\n  setInfo(variable, policyTitle, info, authorise, scope, target) {\n    if (this.validation[variable](scope, info)) {\n      this.addition[variable]([policyTitle, scope, target, info, authorise]);\n    } else {\n      throw Error('Invalid configuration');\n    }\n  }\n\n  getInfo(scope, title) {\n    let policies = this.policies[scope];\n    let policy = {};\n    for (let i in policies) {\n      if (policies[i].condition === title) {\n        policy = policies[i];\n      }\n    }\n    if (policy !== {}) {\n      let condition = policy.condition.split(' ');\n      return this.policyEngine.getList(scope, condition[2]);\n    } else {\n      throw Error('Policy <' + title + '> not found!');\n    }\n  }\n\n  deleteInfo(variable, scope, target, info) {\n    let params = [scope, target, info];\n    if (variable === 'member') {\n      let conditionSplit = info.split(' ');\n      let groupName = conditionSplit[2];\n      params = [scope, groupName, info];\n    }\n    this.deletion[variable](params);\n  }\n\n  getGroup(scope, target, groupName) {\n    return this.policyEngine.context.getGroup(scope, target, groupName);\n  }\n\n  getGroups() {\n    let groups = this.policyEngine.context.groups;\n    let groupsGUI = {\n      groupsNames: [],\n      members: [],\n      ids: []\n    };\n\n    for (let i in groups) {\n      groupsGUI.groupsNames.push(i);\n      groupsGUI.members.push(groups[i]);\n      let ids = [];\n      for (let j in groups[i]) {\n        ids.push(i + '::' + groups[i][j]);\n      }\n      groupsGUI.ids.push(ids);\n    }\n\n    return groupsGUI;\n  }\n\n  getGroupsNames() {\n    return this.policyEngine.context.getGroupsNames();\n  }\n\n  removeFromGroup(groupName, user) {\n    this.policyEngine.context.removeFromGroup(groupName, user);\n  }\n\n  updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n    let userPolicies = this.policyEngine.context.userPolicies;\n    userPolicies[policyTitle].deleteRule(rule);\n    if (!newSubscriptionType) {\n      let type;\n\n      if (rule.condition.attribute === undefined) {\n        type = 'advanced';\n      } else {\n        if (rule.condition.attribute === 'subscription') {\n          type = 'subscription';\n        } else {\n          type = 'simple';\n        }\n      }\n      userPolicies[policyTitle].createRule(type, newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n    } else {\n      let operator = (newSubscriptionType === '*') ? 'equals' : 'in';\n      userPolicies[policyTitle].createRule('subscription', newDecision, ['subscription', operator, newSubscriptionType], rule.scope, rule.target, rule.priority);\n    }\n\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n}\n\nexport default PoliciesManager;\n"],"sourceRoot":"/source/"}