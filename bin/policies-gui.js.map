{"version":3,"sources":["node_modules/browser-pack/_prelude.js","policies-gui.js","src/admin/PoliciesGUI.js","src/admin/PoliciesManager.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","policiesGui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_PoliciesManager","_PoliciesManager2","PoliciesGUI","policyEngine","policiesManager","elements","_setElements","_setListeners","event","_this","group","id","$","html","openModal","off","on","member","val","addToGroup","closeModal","_manageGroups","_this2","groupName","createGroup","_this3","algorithms","append","_getOptions","policyTitle","combiningAlgorithm","addPolicy","addClass","_goHome","Materialize","toast","removeClass","closest","splitId","split","thisPriority","parseInt","pop","join","lastPriority","getPolicy","getLastPriority","newPriority","decreaseRulePriority","removeFromGroup","children","deleteGroup","deletePolicy","priority","rule","getRuleOfPolicy","deleteRule","_this4","activeUserPolicy","getActivePolicy","policies","getPoliciesTitles","push","find","textContent","undefined","updateActivePolicy","title","keys","scopes","lists","list","j","variable","info","indexOf","splitInfo","substring","months","_splitInfo","text","items","numItems","selected","options","_this5","getFormattedPolicies","policiesTitles","rulesTitles","ids","table","isEmpty","_i","_showVariablesTypes","_deleteRule","_showRule","_increaseRulePriority","_decreaseRulePriority","_addPolicy","_deletePolicy","_getActivePolicy","_getPoliciesTable","increaseRulePriority","_this6","groupsPE","getGroups","groups","groupsNames","members","_addMember","_deleteMember","_createGroup","_deleteGroup","content","parsedContent","JSON","parse","_this7","date","params","select","form","_getNewConfiguration","empty","getMyEmails","getMyHyperties","_getGroupOptions","_this8","variables","getVariables","_getList","_showNewConfigurationPanel","_this9","getVariableInfo","description","tags","input","getGroupsNames","pickadate","selectMonths","selectYears","document","getElementById","checked","_info","_getInfo","decision","scope","setInfo","resourceType","shift","condition","deleteInfo","_this10","parent","postMessage","body","method","to","getElementsByTagName","style","file","files","reader","FileReader","readAsText","onload","_parseFileContent","result","onerror","_this11","ruleTitle","attribute","element","_updateRule","type","splitTitle","index","newDecision","updatePolicy","newSubscriptionType","labels","./PoliciesManager","2","PoliciesManager","context","userPolicies","setVariables","addition","setAdditionMethods","validation","setValidationMethods","user","policy","savePolicies","removePolicy","titles","targets","Date","Domain","Group of users","Subscription preferences","Time of the day","Weekday","createRule","operator","thisOperator","start","end","weekdays","isValidDate","isValidScope","isValidString","isValidDomain","isValidSubscriptionType","isValidTimeslot","saveActivePolicy","pattern","test","infoSplit","day","month","year","isValidFormat","getFullYear","getMonth","getDate","now","isFuture","twoTimes","splitStart","splitEnd","okSize","areIntegers","policiesPE","policiesGUI","rules","sortRules","_getTitle","getRuleByPriority","authorise","weekdayID","variablesTitles","getList","conditionSplit","deletion","getGroup","groupsGUI","opeator"],"mappings":"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","file":"policies-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.policiesGui = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PoliciesManager = require('./PoliciesManager');\n\nvar _PoliciesManager2 = _interopRequireDefault(_PoliciesManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesGUI = function () {\n  function PoliciesGUI(policyEngine) {\n    _classCallCheck(this, PoliciesGUI);\n\n    if (!policyEngine) throw Error('Policy Engine is not set!');\n    this.policiesManager = new _PoliciesManager2.default(policyEngine);\n    this.elements = this._setElements();\n    this._setListeners();\n  }\n\n  _createClass(PoliciesGUI, [{\n    key: '_addMember',\n    value: function _addMember(event) {\n      var _this = this;\n\n      var group = event.target.id;\n      $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\n      $('.member-new-modal').openModal();\n      $('.member-new-ok').off();\n      $('.member-new-ok').on('click', function (event) {\n        var member = $('#member-new').val();\n        $('#member-new').val('');\n        _this.policiesManager.addToGroup(group, member);\n        $('.member-new-modal').closeModal();\n        _this._manageGroups();\n      });\n    }\n  }, {\n    key: '_createGroup',\n    value: function _createGroup(event) {\n      var _this2 = this;\n\n      $('#group-new-name').val('');\n      $('.group-new-modal').openModal();\n      $('.group-new-ok').on('click', function (event) {\n        var groupName = $('#group-new-name').val();\n        _this2.policiesManager.createGroup(groupName);\n        _this2._manageGroups();\n      });\n    }\n  }, {\n    key: '_addPolicy',\n    value: function _addPolicy() {\n      var _this3 = this;\n\n      $('#policy-new-title').val('');\n      $('.combining').html('');\n      var algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\n      $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\n      $('.policy-new').openModal();\n\n      $('.policy-new-ok').off();\n      $('.policy-new-ok').on('click', function (event) {\n        var policyTitle = $('#policy-new-title').val();\n        if (!policyTitle) {\n          Materialize.toast('Invalid policy title', 4000);\n        } else {\n          var combiningAlgorithm = $('#comb-algorithm').val();\n          _this3.policiesManager.addPolicy(policyTitle, combiningAlgorithm);\n          $('.help-menu').addClass('hide');\n          $('.policy-new').closeModal();\n          _this3._goHome();\n        }\n      });\n      $('.help-btn').off();\n      $('.help-btn').on('click', function (event) {\n        $('.help-menu').removeClass('hide');\n      });\n    }\n  }, {\n    key: '_decreaseRulePriority',\n    value: function _decreaseRulePriority(event) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var lastPriority = this.policiesManager.getPolicy(policyTitle).getLastPriority();\n      if (lastPriority != thisPriority) {\n        var newPriority = parseInt(thisPriority + 1);\n        this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority);\n        this._goHome();\n      }\n    }\n  }, {\n    key: '_deleteMember',\n    value: function _deleteMember(event) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split('::');\n      var member = splitId[splitId.length - 1];\n      splitId.pop();\n      var group = splitId.join('::');\n      this.policiesManager.removeFromGroup(group, member);\n      this._manageGroups();\n    }\n  }, {\n    key: '_deleteGroup',\n    value: function _deleteGroup(event) {\n      var groupName = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteGroup(groupName);\n      this._manageGroups();\n    }\n  }, {\n    key: '_deletePolicy',\n    value: function _deletePolicy(event) {\n      var policyTitle = event.target.closest('tr').id;\n      this.policiesManager.deletePolicy(policyTitle);\n      this._goHome();\n    }\n  }, {\n    key: '_deleteRule',\n    value: function _deleteRule(event) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n\n      this.policiesManager.deleteRule(policyTitle, rule);\n      this._goHome();\n    }\n  }, {\n    key: '_getActivePolicy',\n    value: function _getActivePolicy() {\n      var _this4 = this;\n\n      $('.policy-active').html('');\n      var activeUserPolicy = this.policiesManager.getActivePolicy();\n      var policies = this.policiesManager.getPoliciesTitles();\n      policies.push('Deactivate all policies');\n\n      $('.policy-active').append(this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\n\n      $('#policies-list').on('click', function (event) {\n        var policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\n        if (policyTitle === 'Deactivate all policies') {\n          policyTitle = undefined;\n        }\n        _this4.policiesManager.updateActivePolicy(policyTitle);\n      });\n    }\n  }, {\n    key: '_getGroupOptions',\n    value: function _getGroupOptions(title, keys, scopes, lists) {\n      var list = '<option disabled selected>' + title + '</option>';\n\n      for (var i in keys) {\n        list += '<optgroup label=' + keys[i] + '>';\n        for (var j in lists[i]) {\n          list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getInfo',\n    value: function _getInfo(variable) {\n      var info = void 0;\n\n      switch (variable) {\n        case 'Date':\n          info = $('.config').find('input').val();\n          if (info.indexOf(',') !== -1) {\n            //20 July, 2016\n            var splitInfo = info.split(' '); //['20', 'July,',' '2016']\n            splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\n            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n            info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\n          } else {\n            // 2016-07-20\n            var _splitInfo = info.split('-');\n            info = _splitInfo[2] + '/' + _splitInfo[1] + '/' + _splitInfo[0];\n          }\n          break;\n        case 'Group of users':\n          info = $('#group').find(\":selected\").text();\n          break;\n        case 'Subscription preferences':\n          if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\n            info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\n          }\n          break;\n        case 'Weekday':\n          info = $('#weekday').find(\":selected\").text();\n          break;\n        default:\n          info = $('.config').find('input').val();\n          break;\n      }\n\n      return info;\n    }\n  }, {\n    key: '_getList',\n    value: function _getList(items) {\n      var list = '';\n      var numItems = items.length;\n\n      for (var i = 0; i < numItems; i++) {\n        list += '<li class=\"divider\"></li>';\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\n      }\n\n      return list;\n    }\n  }, {\n    key: '_getOptions',\n    value: function _getOptions(id, title, list, selected) {\n      var options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\n      for (var i in list) {\n        if (selected !== undefined & selected === list[i]) {\n          options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\n        } else {\n          options += '<option id=\"' + id + '\">' + list[i] + '</option>';\n        }\n      }\n      options += '</select>';\n\n      return options;\n    }\n  }, {\n    key: '_getPoliciesTable',\n    value: function _getPoliciesTable() {\n      var _this5 = this;\n\n      $('.policies-no').addClass('hide');\n      $('.policies-current').html('');\n\n      var policies = this.policiesManager.getFormattedPolicies();\n      var policiesTitles = [];\n      var rulesTitles = [];\n      var ids = [];\n\n      for (var i in policies) {\n        policiesTitles.push(policies[i].title);\n        rulesTitles.push(policies[i].rulesTitles);\n        ids.push(policies[i].ids);\n      }\n\n      var table = '<table>';\n      var isEmpty = policiesTitles.length === 0;\n\n      for (var _i in policiesTitles) {\n        table += '<thead><tr id=\"' + policiesTitles[_i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[_i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n\n        for (var j in rulesTitles[_i]) {\n          table += '<tr id=\"' + ids[_i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[_i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n        table += '<tr id=\"' + policiesTitles[_i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.policies-current').append(table);\n      } else {\n        $('.policies-no').removeClass('hide');\n      }\n      $('.rule-add').on('click', function (event) {\n        _this5._showVariablesTypes(event);\n      });\n      $('.rule-delete').on('click', function (event) {\n        _this5._deleteRule(event);\n      });\n      $('.rule-show').on('click', function (event) {\n        _this5._showRule(event);\n      });\n      $('.rule-priority-increase').on('click', function (event) {\n        _this5._increaseRulePriority(event);\n      });\n      $('.rule-priority-decrease').on('click', function (event) {\n        _this5._decreaseRulePriority(event);\n      });\n      $('.policy-add').off();\n      $('.policy-add').on('click', function (event) {\n        _this5._addPolicy(event);\n      });\n      $('.policy-delete').on('click', function (event) {\n        _this5._deletePolicy(event);\n      });\n    }\n  }, {\n    key: '_goHome',\n    value: function _goHome() {\n      this._getActivePolicy();\n      this._getPoliciesTable();\n    }\n  }, {\n    key: '_increaseRulePriority',\n    value: function _increaseRulePriority(event) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var thisPriority = parseInt(splitId[splitId.length - 1]);\n      if (thisPriority !== 0) {\n        splitId.pop();\n        var policyTitle = splitId.join(':');\n        var newPriority = thisPriority - 1;\n\n        this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority);\n        this._goHome();\n      }\n    }\n  }, {\n    key: '_manageGroups',\n    value: function _manageGroups() {\n      var _this6 = this;\n\n      $('.groups-current').html('');\n      var groupsPE = this.policiesManager.getGroups();\n      var groups = groupsPE.groupsNames;\n      var members = groupsPE.members;\n      var ids = groupsPE.ids;\n\n      var table = '<table>';\n      var isEmpty = groups.length === 0;\n\n      for (var i in groups) {\n        table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\n        for (var j in members[i]) {\n          table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\n        }\n\n        table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\n      }\n\n      if (!isEmpty) {\n        table += '</tbody></table>';\n        $('.groups-current').append(table);\n      } else {\n        $('.groups-current').append('<p>There are no groups set.</p>');\n      }\n\n      $('.member-add').off();\n      $('.member-add').on('click', function (event) {\n        _this6._addMember(event);\n      });\n      $('.member-delete').on('click', function (event) {\n        _this6._deleteMember(event);\n      });\n      $('.group-add').off();\n      $('.group-add').on('click', function (event) {\n        _this6._createGroup(event);\n      });\n      $('.group-delete').on('click', function (event) {\n        _this6._deleteGroup(event);\n      });\n    }\n  }, {\n    key: '_parseFileContent',\n    value: function _parseFileContent(content) {\n      var parsedContent = JSON.parse(content);\n      for (var i in parsedContent) {\n        this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\n      }\n      $('.policy-new').closeModal();\n    }\n  }, {\n    key: '_setElements',\n    value: function _setElements() {\n      var _this7 = this;\n\n      return {\n        date: function date(params) {\n          return '<input type=\"date\" class=\"datepicker\">';\n        },\n        select: function select(params) {\n          return _this7._getOptions(params[0], params[1], params[2]);\n        },\n        form: function form(params) {\n          return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>';\n        }\n      };\n    }\n  }, {\n    key: '_showNewConfigurationPanel',\n    value: function _showNewConfigurationPanel(policyTitle) {\n      var variable = event.target.text;\n      $('.variable').html(this._getNewConfiguration(policyTitle, variable));\n      $('.scopes').empty().html('');\n\n      var keys = ['Email', 'Hyperty', 'All'];\n      var scopes = ['identity', 'hyperty', 'global'];\n      var lists = [];\n\n      lists.push(this.policiesManager.getMyEmails());\n      lists.push(this.policiesManager.getMyHyperties());\n      lists.push(['All identities and hyperties']);\n      $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\n      $('.variable').removeClass('hide');\n    }\n  }, {\n    key: '_showVariablesTypes',\n    value: function _showVariablesTypes(event) {\n      var _this8 = this;\n\n      var policyTitle = event.target.closest('tr').id;\n\n      $('#variables-types').empty().html('');\n      var variables = this.policiesManager.getVariables();\n      $('#variables-types').append(this._getList(variables));\n      $('.variable').addClass('hide');\n      $('.rule-new').openModal();\n      $('#variables-types').off();\n      $('#variables-types').on('click', function (event) {\n        _this8._showNewConfigurationPanel(policyTitle);\n      });\n    }\n  }, {\n    key: '_getNewConfiguration',\n    value: function _getNewConfiguration(policyTitle, variable) {\n      var _this9 = this;\n\n      var info = this.policiesManager.getVariableInfo(variable);\n      $('.rule-new-title').html(info.title);\n      $('.description').html(info.description);\n      $('.config').html('');\n\n      if (variable === 'Subscription preferences') {\n        $('.subscription-type').removeClass('hide');\n      } else {\n        $('.subscription-type').addClass('hide');\n        var tags = info.input;\n        for (var i in tags) {\n          if (variable === 'Group of users') {\n            tags[i][1].push(this.policiesManager.getGroupsNames());\n          }\n          $('.config').append(this.elements[tags[i][0]](tags[i][1]));\n          if (variable === 'Group of users') {\n            tags[i][1].pop();\n          }\n        }\n        if (variable === 'date') {\n          $('.datepicker').pickadate({\n            selectMonths: true,\n            selectYears: 15\n          });\n        }\n      }\n      document.getElementById('allow').checked = false;\n      document.getElementById('block').checked = false;\n      $('.ok-btn').off();\n      $('.ok-btn').on('click', function (event) {\n        if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\n          var _info = _this9._getInfo(variable);\n          var decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\n          decision = decision === 'allow';\n          var scope = $('.scopes').find(\":selected\")[0].id;\n          var target = $('.scopes').find(\":selected\")[0].textContent;\n          target = target === 'All identities and hyperties' ? 'global' : target;\n          _this9.policiesManager.setInfo(variable, policyTitle, _info, decision, scope, target);\n          $('.rule-new').closeModal();\n          _this9._goHome();\n        } else {\n          throw Error('INFORMATION MISSING: please specify an authorisation decision.');\n        }\n      });\n    }\n  }, {\n    key: '_deleteInfo',\n    value: function _deleteInfo(resourceType) {\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var scope = splitId[0];\n      splitId.shift();\n      var target = splitId.join('');\n      var condition = event.target.closest('tr').children[0].id;\n      this.policiesManager.deleteInfo(resourceType, scope, target, condition);\n      this._goHome();\n    }\n  }, {\n    key: '_setListeners',\n    value: function _setListeners() {\n      var _this10 = this;\n\n      $('.settings-btn').on('click', function (event) {\n        parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').removeClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:white;';\n      });\n\n      $('.policies-page-show').on('click', function (event) {\n        $('.policies-section').removeClass('hide');\n        $('.identities-section').addClass('hide');\n        $('.graphConnector-section').addClass('hide');\n        _this10._goHome();\n        _this10._manageGroups();\n      });\n\n      $('.admin-page-exit').on('click', function (event) {\n        parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\n        $('.admin-page').addClass('hide');\n        document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\n      });\n\n      $('.exit-btn').on('click', function (event) {\n        $('.subscription-type').addClass('hide');\n        $('.help-menu').addClass('hide');\n      });\n\n      $('#policy-file').on('change', function (event) {\n        var file = event.target.files[0];\n        var reader = new FileReader();\n        reader.readAsText(file, \"UTF-8\");\n        reader.onload = function (event) {\n          _this10._parseFileContent(event.target.result);\n          _this10._goHome();\n        };\n        reader.onerror = function (event) {\n          throw Error(\"Error reading the file\");\n        };\n      });\n    }\n  }, {\n    key: '_showRule',\n    value: function _showRule(event) {\n      var _this11 = this;\n\n      var ruleTitle = event.target.textContent;\n      var id = event.target.closest('tr').id;\n      var splitId = id.split(':');\n      var priority = splitId[splitId.length - 1];\n      splitId.pop();\n      var policyTitle = splitId.join(':');\n      var rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\n      if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\n        $('.authorise-btns').addClass('hide');\n      } else {\n        var element = void 0;\n        if (rule.decision) {\n          element = document.getElementById('btn-allow');\n        } else {\n          element = document.getElementById('btn-block');\n        }\n        element.checked = true;\n        $('.authorise-btns').removeClass('hide');\n      }\n      $('.member-add').addClass('hide');\n      $('.member-new-btn').addClass('hide');\n\n      $('.rule-details').openModal();\n      $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\n      if (rule.condition.attribute === 'subscription') {\n        $('.subscription-type').removeClass('hide');\n      }\n      $('.subscription-decision').on('click', function (event) {\n        _this11._updateRule(event, 'subscription', policyTitle, rule);\n      });\n      $('.decision').off();\n      $('.decision').on('click', function (event) {\n        _this11._updateRule('authorisation', policyTitle, rule);\n      });\n    }\n  }, {\n    key: '_updateRule',\n    value: function _updateRule(event, type, policyTitle, rule) {\n      var title = $('.rule-title').text();\n      var splitTitle = title.split(' ');\n      var index = splitTitle.indexOf('is');\n      if (index === -1) {\n        index = splitTitle.indexOf('are');\n      }\n      switch (type) {\n        case 'authorisation':\n          var newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\n\n          if (newDecision === 'btn-allow') {\n            splitTitle[index + 1] = 'allowed';\n            newDecision = true;\n          } else {\n            splitTitle[index + 1] = 'blocked';\n            newDecision = false;\n          }\n          title = splitTitle.join(' ');\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          this.policiesManager.updatePolicy(policyTitle, rule, newDecision);\n          break;\n        case 'subscription':\n          var newSubscriptionType = event.target.labels[0].textContent;\n\n          var decision = splitTitle[index + 1];\n          splitTitle = title.split('hyperties are');\n          if (newSubscriptionType === 'All subscribers') {\n            $('.authorise-btns').removeClass('hide');\n            newDecision = rule.decision;\n            newSubscriptionType = '*';\n            title = 'Subscriptions from all hyperties are' + splitTitle[1];\n          } else {\n            $('.authorise-btns').addClass('hide');\n            newDecision = true;\n            newSubscriptionType = 'preauthorised';\n            title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\n          }\n\n          $('.rule-title').html('<h5><b>' + title + '</b></h5>');\n          this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType);\n          break;\n      }\n      this._goHome();\n    }\n  }]);\n\n  return PoliciesGUI;\n}();\n\nexports.default = PoliciesGUI;\n\n},{\"./PoliciesManager\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PoliciesManager = function () {\n  function PoliciesManager(policyEngine) {\n    _classCallCheck(this, PoliciesManager);\n\n    this.policyEngine = policyEngine;\n    this.policies = this.policyEngine.context.userPolicies;\n    this.variables = this.setVariables();\n    this.addition = this.setAdditionMethods();\n    this.validation = this.setValidationMethods();\n  }\n\n  _createClass(PoliciesManager, [{\n    key: 'addToGroup',\n    value: function addToGroup(groupName, user) {\n      this.policyEngine.context.addToGroup(groupName, user);\n    }\n  }, {\n    key: 'createGroup',\n    value: function createGroup(groupName) {\n      this.policyEngine.context.createGroup(groupName);\n    }\n  }, {\n    key: 'addPolicy',\n    value: function addPolicy(title, combiningAlgorithm, policy) {\n      if (policy === undefined) {\n        switch (combiningAlgorithm) {\n          case 'Block overrides':\n            combiningAlgorithm = 'blockOverrides';\n            break;\n          case 'Allow overrides':\n            combiningAlgorithm = 'allowOverrides';\n            break;\n          case 'First applicable':\n            combiningAlgorithm = 'firstApplicable';\n            break;\n          default:\n            combiningAlgorithm = undefined;\n        }\n      }\n\n      this.policyEngine.addPolicy('USER', title, policy, combiningAlgorithm);\n    }\n  }, {\n    key: 'decreaseRulePriority',\n    value: function decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'deleteGroup',\n    value: function deleteGroup(groupName) {\n      this.policyEngine.context.deleteGroup(groupName);\n    }\n  }, {\n    key: 'deletePolicy',\n    value: function deletePolicy(title) {\n      this.policyEngine.removePolicy('USER', title);\n    }\n  }, {\n    key: 'deleteRule',\n    value: function deleteRule(policyTitle, rule) {\n      var userPolicies = this.policyEngine.context.userPolicies;\n      userPolicies[policyTitle].deleteRule(rule);\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'getActivePolicy',\n    value: function getActivePolicy() {\n      return this.policyEngine.context.activeUserPolicy;\n    }\n  }, {\n    key: 'getPolicy',\n    value: function getPolicy(key) {\n      return this.policyEngine.context.userPolicies[key];\n    }\n  }, {\n    key: 'getPoliciesTitles',\n    value: function getPoliciesTitles() {\n      var policies = this.policyEngine.context.userPolicies;\n      var titles = [];\n\n      for (var i in policies) {\n        titles.push(i);\n      }\n\n      return titles;\n    }\n  }, {\n    key: 'getTargets',\n    value: function getTargets(scope) {\n      var targets = [];\n\n      for (var i in this.policies[scope]) {\n        if (targets.indexOf(i) === -1) {\n          targets.push(i);\n        }\n      }\n\n      return targets;\n    }\n  }, {\n    key: 'increaseRulePriority',\n    value: function increaseRulePriority(policyTitle, thisPriority, newPriority) {\n      this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n      this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }, {\n    key: 'setVariables',\n    value: function setVariables() {\n      return {\n        'Date': {\n          title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Date:</p>',\n          input: [['date', []]]\n        },\n        'Domain': {\n          title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Domain:</p>',\n          input: [['form', []]]\n        },\n        'Group of users': {\n          title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Group name:</p>',\n          input: [['select', ['group', 'Select a group:']]]\n        },\n        'Subscription preferences': {\n          title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          input: []\n        },\n        'Time of the day': {\n          title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n          description: '<p>Timeslot:</p>',\n          input: [['form', []]]\n        },\n        Weekday: {\n          title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n          description: '<p>Weekday:</p>',\n          input: [['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]]\n        }\n      };\n    }\n  }, {\n    key: 'setAdditionMethods',\n    value: function setAdditionMethods() {\n      var _this = this;\n\n      return {\n        Date: function Date(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule(params[4], { attribute: 'date', operator: 'equals', params: params[3] }, params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        Domain: function Domain(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule(params[4], { attribute: 'domain', operator: 'equals', params: params[3] }, params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Group of users': function GroupOfUsers(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule(params[4], { attribute: 'source', operator: 'in', params: params[3] }, params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Subscription preferences': function SubscriptionPreferences(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          var operator = 'equals';\n          if (params[3] === 'preauthorised') {\n            operator = 'in';\n          }\n          userPolicies[policyTitle].createRule(params[4], { attribute: 'subscription', operator: thisOperator, params: params[3] }, params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n        'Time of the day': function TimeOfTheDay(params) {\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          params[3] = params[3].split(' to ');\n          var start = params[3][0].split(':');\n          start = start.join('');\n          var end = params[3][1].split(':');\n          end = end.join('');\n          userPolicies[policyTitle].createRule(params[4], { attribute: 'time', operator: 'between', params: [start, end] }, params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        },\n\n        Weekday: function Weekday(params) {\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          params[3] = weekdays.indexOf(params[3]);\n          var policyTitle = params[0];\n          var userPolicies = _this.policyEngine.context.userPolicies;\n          userPolicies[policyTitle].createRule(params[4], { attribute: 'weekday', operator: 'equals', params: params[3] }, params[1], params[2]);\n          _this.policyEngine.context.savePolicies('USER');\n        }\n      };\n    }\n  }, {\n    key: 'setValidationMethods',\n    value: function setValidationMethods() {\n      var _this2 = this;\n\n      return {\n        Date: function Date(scope, info) {\n          return _this2.isValidDate(info) & _this2.isValidScope(scope);\n        },\n        'Group of users': function GroupOfUsers(scope, info) {\n          return _this2.isValidString(info) & _this2.isValidScope(scope);\n        },\n        Domain: function Domain(scope, info) {\n          return _this2.isValidDomain(info) & _this2.isValidScope(scope);\n        },\n        Weekday: function Weekday(scope, info) {\n          return true & _this2.isValidScope(scope);\n        },\n        'Subscription preferences': function SubscriptionPreferences(scope, info) {\n          return _this2.isValidSubscriptionType(info) & _this2.isValidScope(scope);\n        },\n        'Time of the day': function TimeOfTheDay(scope, info) {\n          return _this2.isValidTimeslot(info) & _this2.isValidScope(scope);\n        }\n      };\n    }\n  }, {\n    key: 'updateActivePolicy',\n    value: function updateActivePolicy(title) {\n      this.policyEngine.context.activeUserPolicy = title;\n      this.policyEngine.context.saveActivePolicy();\n    }\n  }, {\n    key: 'isValidEmail',\n    value: function isValidEmail(info) {\n      var pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidDomain',\n    value: function isValidDomain(info) {\n      var pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidString',\n    value: function isValidString(info) {\n      var pattern = /[a-z0-9.-]$/;\n      return pattern.test(info);\n    }\n  }, {\n    key: 'isValidSubscriptionType',\n    value: function isValidSubscriptionType(info) {\n      return true;\n    }\n  }, {\n    key: 'isValidDate',\n    value: function isValidDate(info) {\n      var infoSplit = info.split('/');\n      var day = parseInt(infoSplit[0]);\n      var month = parseInt(infoSplit[1]);\n      var year = parseInt(infoSplit[2]);\n\n      var date = new Date(year, month - 1, day);\n      var isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n      var formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\n      var now = new Date();\n      var today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n      var isFuture = false;\n      if (date.getFullYear() > now.getFullYear()) {\n        isFuture = true;\n      } else {\n        if (date.getFullYear() == now.getFullYear()) {\n          if (date.getMonth() + 1 > now.getMonth() + 1) {\n            isFuture = true;\n          } else {\n            if (date.getMonth() + 1 == now.getMonth() + 1) {\n              if (date.getDate() >= now.getDate()) {\n                isFuture = true;\n              }\n            }\n          }\n        }\n      }\n\n      return isValidFormat && isFuture;\n    }\n  }, {\n    key: 'isValidScope',\n    value: function isValidScope(scope) {\n      return scope !== '';\n    }\n  }, {\n    key: 'isValidTimeslot',\n    value: function isValidTimeslot(info) {\n      if (!info) {\n        return false;\n      }\n      var splitInfo = info.split(' to '); // [12:00, 13:00]\n      var twoTimes = splitInfo.length === 2;\n      if (!twoTimes) {\n        return false;\n      }\n      var splitStart = splitInfo[0].split(':'); // [12, 00]\n      var splitEnd = splitInfo[1].split(':'); // [13, 00]\n      if (splitStart.length !== 2 || splitEnd.length !== 2) {\n        return false;\n      }\n      var okSize = splitStart[0].length === 2 && splitStart[1].length === 2 && splitEnd[0].length === 2 && splitEnd[1].length === 2;\n      var areIntegers = splitStart[0] == parseInt(splitStart[0], 10) && splitStart[1] == parseInt(splitStart[1], 10) && splitEnd[0] == parseInt(splitEnd[0], 10) && splitEnd[1] == parseInt(splitEnd[1], 10);\n      return twoTimes && okSize && areIntegers;\n    }\n  }, {\n    key: 'getFormattedPolicies',\n    value: function getFormattedPolicies() {\n      var policiesPE = this.policyEngine.context.userPolicies;\n      var policiesGUI = [];\n\n      for (var i in policiesPE) {\n        var policy = {\n          title: policiesPE[i].key,\n          rulesTitles: [],\n          ids: []\n        };\n\n        if (policiesPE[i].rules.length !== 0) {\n          policiesPE[i].rules = policiesPE[i].sortRules();\n          for (var j in policiesPE[i].rules) {\n            var title = this._getTitle(policiesPE[i].rules[j]);\n            policy.rulesTitles.push(title);\n            policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n          }\n        }\n\n        policiesGUI.push(policy);\n      }\n\n      return policiesGUI;\n    }\n  }, {\n    key: 'getRuleOfPolicy',\n    value: function getRuleOfPolicy(title, priority) {\n      var policies = this.policyEngine.context.userPolicies;\n      var policy = policies[title];\n      return policy.getRuleByPriority(priority);\n    }\n  }, {\n    key: '_getTitle',\n    value: function _getTitle(rule) {\n      var condition = rule.condition;\n      var authorise = rule.decision ? 'allowed' : 'blocked';\n      var target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n      var attribute = condition.attribute;\n      switch (attribute) {\n        case 'date':\n          return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n        case 'domain':\n          return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        case 'source':\n          if (condition.operator === 'in') {\n            return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.operator === 'equals') {\n              return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n            }\n          }\n        case 'subscription':\n          if (condition.params === '*') {\n            return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n          } else {\n            if (condition.params === 'preauthorised') {\n              return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n            }\n          }\n        case 'time':\n          var start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n          var end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n          return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n        case 'weekday':\n          var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n          var weekdayID = condition.params;\n          return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n        default:\n          return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n      }\n    }\n  }, {\n    key: 'getVariables',\n    value: function getVariables() {\n      var variablesTitles = [];\n      for (var i in this.variables) {\n        variablesTitles.push(i);\n      }\n      return variablesTitles;\n    }\n  }, {\n    key: 'getVariableInfo',\n    value: function getVariableInfo(variable) {\n      return this.variables[variable];\n    }\n  }, {\n    key: 'getMyEmails',\n    value: function getMyEmails() {\n      return this.policyEngine.context.getMyEmails();\n    }\n  }, {\n    key: 'getMyHyperties',\n    value: function getMyHyperties() {\n      return this.policyEngine.context.getMyHyperties();\n    }\n\n    //TODO If there is a problem with the input, show it to the user\n\n  }, {\n    key: 'setInfo',\n    value: function setInfo(variable, policyTitle, info, authorise, scope, target) {\n      if (this.validation[variable](scope, info)) {\n        this.addition[variable]([policyTitle, scope, target, info, authorise]);\n      } else {\n        throw Error('Invalid configuration');\n      }\n    }\n  }, {\n    key: 'getInfo',\n    value: function getInfo(scope, title) {\n      var policies = this.policies[scope];\n      var policy = {};\n      for (var i in policies) {\n        if (policies[i].condition === title) {\n          policy = policies[i];\n        }\n      }\n      if (policy !== {}) {\n        var condition = policy.condition.split(' ');\n        return this.policyEngine.getList(scope, condition[2]);\n      } else {\n        throw Error('Policy <' + title + '> not found!');\n      }\n    }\n  }, {\n    key: 'deleteInfo',\n    value: function deleteInfo(variable, scope, target, info) {\n      var params = [scope, target, info];\n      if (variable === 'member') {\n        var conditionSplit = info.split(' ');\n        var groupName = conditionSplit[2];\n        params = [scope, groupName, info];\n      }\n      this.deletion[variable](params);\n    }\n  }, {\n    key: 'getGroup',\n    value: function getGroup(scope, target, groupName) {\n      return this.policyEngine.context.getGroup(scope, target, groupName);\n    }\n  }, {\n    key: 'getGroups',\n    value: function getGroups() {\n      var groups = this.policyEngine.context.groups;\n      var groupsGUI = {\n        groupsNames: [],\n        members: [],\n        ids: []\n      };\n\n      for (var i in groups) {\n        groupsGUI.groupsNames.push(i);\n        groupsGUI.members.push(groups[i]);\n        var ids = [];\n        for (var j in groups[i]) {\n          ids.push(i + '::' + groups[i][j]);\n        }\n        groupsGUI.ids.push(ids);\n      }\n\n      return groupsGUI;\n    }\n  }, {\n    key: 'getGroupsNames',\n    value: function getGroupsNames() {\n      return this.policyEngine.context.getGroupsNames();\n    }\n  }, {\n    key: 'removeFromGroup',\n    value: function removeFromGroup(groupName, user) {\n      this.policyEngine.context.removeFromGroup(groupName, user);\n    }\n  }, {\n    key: 'updatePolicy',\n    value: function updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n      var userPolicies = this.policyEngine.context.userPolicies;\n      userPolicies[policyTitle].deleteRule(rule);\n      if (!newSubscriptionType) {\n        userPolicies[policyTitle].createRule(newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n      } else {\n        var operator = newSubscriptionType === '*' ? 'equals' : 'in';\n        userPolicies[policyTitle].createRule(newDecision, [{ attribute: 'subscription', opeator: operator, params: newSubscriptionType }], rule.scope, rule.target, rule.priority);\n      }\n\n      this.policyEngine.context.savePolicies('USER');\n    }\n  }]);\n\n  return PoliciesManager;\n}();\n\nexports.default = PoliciesManager;\n\n},{}]},{},[1])(1)\n});\n\n","import PoliciesManager from './PoliciesManager';\r\n\r\nclass PoliciesGUI {\r\n\r\n  constructor(policyEngine) {\r\n    if (!policyEngine) throw Error('Policy Engine is not set!');\r\n    this.policiesManager = new PoliciesManager(policyEngine);\r\n    this.elements = this._setElements();\r\n    this._setListeners();\r\n  }\r\n\r\n  _addMember(event) {\r\n    let group = event.target.id;\r\n    $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\r\n    $('.member-new-modal').openModal();\r\n    $('.member-new-ok').off();\r\n    $('.member-new-ok').on('click', (event) => {\r\n      let member = $('#member-new').val();\r\n      $('#member-new').val('');\r\n      this.policiesManager.addToGroup(group, member);\r\n      $('.member-new-modal').closeModal();\r\n      this._manageGroups();\r\n    });\r\n  }\r\n\r\n  _createGroup(event) {\r\n    $('#group-new-name').val('');\r\n    $('.group-new-modal').openModal();\r\n    $('.group-new-ok').on('click', (event) => {\r\n      let groupName = $('#group-new-name').val();\r\n      this.policiesManager.createGroup(groupName);\r\n      this._manageGroups();\r\n    });\r\n  }\r\n\r\n  _addPolicy() {\r\n    $('#policy-new-title').val('');\r\n    $('.combining').html('');\r\n    let algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\r\n    $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\r\n    $('.policy-new').openModal();\r\n\r\n    $('.policy-new-ok').off();\r\n    $('.policy-new-ok').on('click', (event) => {\r\n      let policyTitle = $('#policy-new-title').val();\r\n      if (!policyTitle) {\r\n        Materialize.toast('Invalid policy title', 4000);\r\n      } else {\r\n        let combiningAlgorithm = $('#comb-algorithm').val();\r\n        this.policiesManager.addPolicy(policyTitle, combiningAlgorithm);\r\n        $('.help-menu').addClass('hide');\r\n        $('.policy-new').closeModal();\r\n        this._goHome();\r\n      }\r\n    });\r\n    $('.help-btn').off();\r\n    $('.help-btn').on('click', (event) => {\r\n      $('.help-menu').removeClass('hide');\r\n    });\r\n  }\r\n\r\n  _decreaseRulePriority(event) {\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\r\n    splitId.pop();\r\n    let policyTitle = splitId.join(':');\r\n    let lastPriority = this.policiesManager.getPolicy(policyTitle).getLastPriority();\r\n    if (lastPriority != thisPriority) {\r\n      let newPriority = parseInt(thisPriority + 1);\r\n      this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority);\r\n      this._goHome();\r\n    }\r\n  }\r\n\r\n  _deleteMember(event) {\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split('::');\r\n    let member = splitId[splitId.length - 1];\r\n    splitId.pop();\r\n    let group = splitId.join('::');\r\n    this.policiesManager.removeFromGroup(group, member);\r\n    this._manageGroups();\r\n  }\r\n\r\n  _deleteGroup(event) {\r\n    let groupName = event.target.closest('tr').children[0].id;\r\n    this.policiesManager.deleteGroup(groupName);\r\n    this._manageGroups();\r\n  }\r\n\r\n  _deletePolicy(event) {\r\n    let policyTitle = event.target.closest('tr').id;\r\n    this.policiesManager.deletePolicy(policyTitle);\r\n    this._goHome();\r\n  }\r\n\r\n  _deleteRule(event) {\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let priority = splitId[splitId.length - 1];\r\n    splitId.pop();\r\n    let policyTitle = splitId.join(':');\r\n    let rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\r\n\r\n    this.policiesManager.deleteRule(policyTitle, rule);\r\n    this._goHome();\r\n  }\r\n\r\n  _getActivePolicy() {\r\n    $('.policy-active').html('');\r\n    let activeUserPolicy = this.policiesManager.getActivePolicy();\r\n    let policies = this.policiesManager.getPoliciesTitles();\r\n    policies.push('Deactivate all policies');\r\n\r\n    $('.policy-active').append(this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\r\n\r\n    $('#policies-list').on('click', (event) => {\r\n      let policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\r\n      if (policyTitle === 'Deactivate all policies') {\r\n        policyTitle = undefined;\r\n      }\r\n      this.policiesManager.updateActivePolicy(policyTitle);\r\n    });\r\n  }\r\n\r\n  _getGroupOptions(title, keys, scopes, lists) {\r\n    let list = '<option disabled selected>' + title + '</option>';\r\n\r\n    for (let i in keys) {\r\n      list += '<optgroup label=' + keys[i] + '>';\r\n      for (let j in lists[i]) {\r\n        list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  _getInfo(variable) {\r\n    let info;\r\n\r\n    switch(variable) {\r\n      case 'Date':\r\n        info = $('.config').find('input').val();\r\n        if (info.indexOf(',') !== -1) { //20 July, 2016\r\n          let splitInfo = info.split(' '); //['20', 'July,',' '2016']\r\n          splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\r\n          let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n          info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\r\n        } else { // 2016-07-20\r\n          let splitInfo = info.split('-');\r\n          info = splitInfo[2] + '/' + splitInfo[1] + '/' + splitInfo[0];\r\n        }\r\n        break;\r\n      case 'Group of users':\r\n        info = $('#group').find(\":selected\").text();\r\n        break;\r\n      case 'Subscription preferences':\r\n        if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\r\n          info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\r\n        }\r\n        break;\r\n      case 'Weekday':\r\n        info = $('#weekday').find(\":selected\").text();\r\n        break;\r\n      default:\r\n        info = $('.config').find('input').val();\r\n        break;\r\n    }\r\n\r\n    return info;\r\n  }\r\n\r\n  _getList(items) {\r\n      let list = '';\r\n      let numItems = items.length;\r\n\r\n      for (let i = 0; i < numItems; i++) {\r\n        list += '<li class=\"divider\"></li>';\r\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\r\n      }\r\n\r\n      return list;\r\n    }\r\n\r\n  _getOptions(id, title, list, selected) {\r\n    let options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\r\n    for (let i in list) {\r\n      if (selected !== undefined & selected === list[i]) {\r\n        options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\r\n      } else {\r\n        options += '<option id=\"' + id + '\">' + list[i] + '</option>';\r\n      }\r\n    }\r\n    options += '</select>';\r\n\r\n    return options;\r\n  }\r\n\r\n  _getPoliciesTable() {\r\n    $('.policies-no').addClass('hide');\r\n    $('.policies-current').html('');\r\n\r\n    let policies = this.policiesManager.getFormattedPolicies();\r\n    let policiesTitles = [];\r\n    let rulesTitles = [];\r\n    let ids = [];\r\n\r\n    for (let i in policies) {\r\n      policiesTitles.push(policies[i].title);\r\n      rulesTitles.push(policies[i].rulesTitles);\r\n      ids.push(policies[i].ids);\r\n    }\r\n\r\n    let table = '<table>';\r\n    let isEmpty = policiesTitles.length === 0;\r\n\r\n    for (let i in policiesTitles) {\r\n      table += '<thead><tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\r\n\r\n      for (let j in rulesTitles[i]) {\r\n        table += '<tr id=\"' + ids[i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\r\n      }\r\n      table += '<tr id=\"' + policiesTitles[i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\r\n    }\r\n    if (!isEmpty) {\r\n      table += '</tbody></table>';\r\n      $('.policies-current').append(table);\r\n    } else {\r\n      $('.policies-no').removeClass('hide');\r\n    }\r\n    $('.rule-add').on('click', (event) => { this._showVariablesTypes(event); });\r\n    $('.rule-delete').on('click', (event) => { this._deleteRule(event); });\r\n    $('.rule-show').on('click', (event) => { this._showRule(event); });\r\n    $('.rule-priority-increase').on('click', (event) => { this._increaseRulePriority(event); });\r\n    $('.rule-priority-decrease').on('click', (event) => { this._decreaseRulePriority(event); });\r\n    $('.policy-add').off();\r\n    $('.policy-add').on('click', (event) => { this._addPolicy(event); });\r\n    $('.policy-delete').on('click', (event) => { this._deletePolicy(event); });\r\n  }\r\n\r\n  _goHome() {\r\n    this._getActivePolicy();\r\n    this._getPoliciesTable();\r\n  }\r\n\r\n  _increaseRulePriority(event) {\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\r\n    if (thisPriority !== 0) {\r\n      splitId.pop();\r\n      let policyTitle = splitId.join(':');\r\n      let newPriority = thisPriority - 1;\r\n\r\n      this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority);\r\n      this._goHome();\r\n    }\r\n  }\r\n\r\n  _manageGroups() {\r\n    $('.groups-current').html('');\r\n    let groupsPE = this.policiesManager.getGroups();\r\n    let groups = groupsPE.groupsNames;\r\n    let members = groupsPE.members;\r\n    let ids = groupsPE.ids;\r\n\r\n    let table = '<table>';\r\n    let isEmpty = groups.length === 0;\r\n\r\n    for (let i in groups) {\r\n      table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\r\n      for (let j in members[i]) {\r\n        table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\r\n      }\r\n\r\n      table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\r\n    }\r\n\r\n    if (!isEmpty) {\r\n      table += '</tbody></table>';\r\n      $('.groups-current').append(table);\r\n    } else {\r\n      $('.groups-current').append('<p>There are no groups set.</p>');\r\n    }\r\n\r\n    $('.member-add').off();\r\n    $('.member-add').on('click', (event) => { this._addMember(event); });\r\n    $('.member-delete').on('click', (event) => { this._deleteMember(event); });\r\n    $('.group-add').off();\r\n    $('.group-add').on('click', (event) => { this._createGroup(event); });\r\n    $('.group-delete').on('click', (event) => { this._deleteGroup(event); });\r\n  }\r\n\r\n  _parseFileContent(content) {\r\n    let parsedContent = JSON.parse(content);\r\n    for (let i in parsedContent) {\r\n      this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\r\n    }\r\n    $('.policy-new').closeModal();\r\n  }\r\n\r\n  _setElements() {\r\n    return {\r\n      date: (params) => { return '<input type=\"date\" class=\"datepicker\">'; },\r\n      select: (params) => { return this._getOptions(params[0], params[1], params[2]); },\r\n      form: (params) => { return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>'; }\r\n    };\r\n  }\r\n\r\n  _showNewConfigurationPanel(policyTitle) {\r\n    let variable = event.target.text;\r\n    $('.variable').html(this._getNewConfiguration(policyTitle, variable));\r\n    $('.scopes').empty().html('');\r\n\r\n    let keys = ['Email', 'Hyperty', 'All'];\r\n    let scopes = ['identity', 'hyperty', 'global'];\r\n    let lists = [];\r\n\r\n    lists.push(this.policiesManager.getMyEmails());\r\n    lists.push(this.policiesManager.getMyHyperties());\r\n    lists.push(['All identities and hyperties']);\r\n    $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\r\n    $('.variable').removeClass('hide');\r\n  }\r\n\r\n  _showVariablesTypes(event) {\r\n    let policyTitle = event.target.closest('tr').id;\r\n\r\n    $('#variables-types').empty().html('');\r\n    let variables = this.policiesManager.getVariables();\r\n    $('#variables-types').append(this._getList(variables));\r\n    $('.variable').addClass('hide');\r\n    $('.rule-new').openModal();\r\n    $('#variables-types').off();\r\n    $('#variables-types').on('click', (event) => { this._showNewConfigurationPanel(policyTitle); });\r\n  }\r\n\r\n  _getNewConfiguration(policyTitle, variable) {\r\n    let info = this.policiesManager.getVariableInfo(variable);\r\n    $('.rule-new-title').html(info.title);\r\n    $('.description').html(info.description);\r\n    $('.config').html('');\r\n\r\n    if (variable === 'Subscription preferences') {\r\n      $('.subscription-type').removeClass('hide');\r\n    } else {\r\n      $('.subscription-type').addClass('hide');\r\n      let tags = info.input;\r\n      for (let i in tags) {\r\n        if (variable === 'Group of users') {\r\n          tags[i][1].push(this.policiesManager.getGroupsNames());\r\n        }\r\n        $('.config').append(this.elements[tags[i][0]](tags[i][1]));\r\n        if (variable === 'Group of users') {\r\n          tags[i][1].pop();\r\n        }\r\n      }\r\n      if (variable ==='date') {\r\n        $('.datepicker').pickadate({\r\n          selectMonths: true,\r\n          selectYears: 15\r\n        });\r\n      }\r\n    }\r\n    document.getElementById('allow').checked = false;\r\n    document.getElementById('block').checked = false;\r\n    $('.ok-btn').off();\r\n    $('.ok-btn').on('click', (event) => {\r\n      if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\r\n        let info = this._getInfo(variable);\r\n        let decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\r\n        decision = decision === 'allow';\r\n        let scope = $('.scopes').find(\":selected\")[0].id;\r\n        let target = $('.scopes').find(\":selected\")[0].textContent;\r\n        target = (target === 'All identities and hyperties') ? 'global' : target;\r\n        this.policiesManager.setInfo(variable, policyTitle, info, decision, scope, target);\r\n        $('.rule-new').closeModal();\r\n        this._goHome();\r\n      } else {\r\n        throw Error('INFORMATION MISSING: please specify an authorisation decision.');\r\n      }\r\n    });\r\n  }\r\n\r\n  _deleteInfo(resourceType) {\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let scope = splitId[0];\r\n    splitId.shift();\r\n    let target = splitId.join('');\r\n    let condition = event.target.closest('tr').children[0].id;\r\n    this.policiesManager.deleteInfo(resourceType, scope, target, condition);\r\n    this._goHome();\r\n  }\r\n\r\n  _setListeners() {\r\n    $('.settings-btn').on('click', (event) => {\r\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n      $('.admin-page').removeClass('hide');\r\n      document.getElementsByTagName('body')[0].style = 'background-color:white;';\r\n    });\r\n\r\n    $('.policies-page-show').on('click', (event) => {\r\n      $('.policies-section').removeClass('hide');\r\n      $('.identities-section').addClass('hide');\r\n      $('.graphConnector-section').addClass('hide');\r\n      this._goHome();\r\n      this._manageGroups();\r\n    });\r\n\r\n    $('.admin-page-exit').on('click', (event) => {\r\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n      $('.admin-page').addClass('hide');\r\n      document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\r\n    });\r\n\r\n    $('.exit-btn').on('click', (event) => {\r\n      $('.subscription-type').addClass('hide');\r\n      $('.help-menu').addClass('hide');\r\n    });\r\n\r\n    $('#policy-file').on('change', (event) => {\r\n      let file = event.target.files[0];\r\n      let reader = new FileReader();\r\n      reader.readAsText(file, \"UTF-8\");\r\n      reader.onload = (event) => {\r\n        this._parseFileContent(event.target.result);\r\n        this._goHome();\r\n      }\r\n      reader.onerror = (event) => {\r\n        throw Error(\"Error reading the file\");\r\n      }\r\n    });\r\n  }\r\n\r\n  _showRule(event) {\r\n    let ruleTitle = event.target.textContent;\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let priority = splitId[splitId.length - 1];\r\n    splitId.pop();\r\n    let policyTitle = splitId.join(':');\r\n    let rule = this.policiesManager.getRuleOfPolicy(policyTitle, priority);\r\n    if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\r\n      $('.authorise-btns').addClass('hide');\r\n    } else {\r\n      let element;\r\n      if (rule.decision) {\r\n        element = document.getElementById('btn-allow');\r\n      } else {\r\n        element = document.getElementById('btn-block');\r\n      }\r\n      element.checked = true;\r\n      $('.authorise-btns').removeClass('hide');\r\n    }\r\n    $('.member-add').addClass('hide');\r\n    $('.member-new-btn').addClass('hide');\r\n\r\n    $('.rule-details').openModal();\r\n    $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\r\n    if (rule.condition.attribute === 'subscription') {\r\n      $('.subscription-type').removeClass('hide');\r\n    }\r\n    $('.subscription-decision').on('click', (event) => { this._updateRule(event, 'subscription', policyTitle, rule); });\r\n    $('.decision').off();\r\n    $('.decision').on('click', (event) => { this._updateRule('authorisation', policyTitle, rule);});\r\n  }\r\n\r\n  _updateRule(event, type, policyTitle, rule) {\r\n    let title = $('.rule-title').text();\r\n    let splitTitle = title.split(' ');\r\n    let index = splitTitle.indexOf('is');\r\n    if (index === -1) {\r\n      index = splitTitle.indexOf('are');\r\n    }\r\n    switch (type) {\r\n      case 'authorisation':\r\n        let newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\r\n\r\n        if (newDecision === 'btn-allow') {\r\n          splitTitle[index + 1] = 'allowed';\r\n          newDecision = true;\r\n        } else {\r\n          splitTitle[index + 1] = 'blocked';\r\n          newDecision = false;\r\n        }\r\n        title = splitTitle.join(' ');\r\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\r\n        this.policiesManager.updatePolicy(policyTitle, rule, newDecision);\r\n        break;\r\n      case 'subscription':\r\n        let newSubscriptionType = event.target.labels[0].textContent;\r\n\r\n        let decision = splitTitle[index + 1];\r\n        splitTitle = title.split('hyperties are');\r\n        if (newSubscriptionType === 'All subscribers') {\r\n          $('.authorise-btns').removeClass('hide');\r\n          newDecision = rule.decision;\r\n          newSubscriptionType = '*';\r\n          title = 'Subscriptions from all hyperties are' + splitTitle[1];\r\n        } else {\r\n          $('.authorise-btns').addClass('hide');\r\n          newDecision = true;\r\n          newSubscriptionType = 'preauthorised';\r\n          title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\r\n        }\r\n\r\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\r\n        this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType);\r\n        break;\r\n    }\r\n    this._goHome();\r\n  }\r\n}\r\n\r\nexport default PoliciesGUI;\r\n","class PoliciesManager {\n\n  constructor(policyEngine) {\n    this.policyEngine = policyEngine;\n    this.policies = this.policyEngine.context.userPolicies;\n    this.variables = this.setVariables();\n    this.addition = this.setAdditionMethods();\n    this.validation = this.setValidationMethods();\n  }\n\n  addToGroup(groupName, user) {\n    this.policyEngine.context.addToGroup(groupName, user);\n  }\n\n  createGroup(groupName) {\n    this.policyEngine.context.createGroup(groupName);\n  }\n\n  addPolicy(title, combiningAlgorithm, policy) {\n    if (policy === undefined) {\n      switch (combiningAlgorithm) {\n        case 'Block overrides':\n          combiningAlgorithm = 'blockOverrides';\n          break;\n        case 'Allow overrides':\n          combiningAlgorithm = 'allowOverrides';\n          break;\n        case 'First applicable':\n          combiningAlgorithm = 'firstApplicable';\n          break;\n        default:\n          combiningAlgorithm = undefined;\n      }\n    }\n\n    this.policyEngine.addPolicy('USER', title, policy, combiningAlgorithm);\n  }\n\n  decreaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  deleteGroup(groupName) {\n    this.policyEngine.context.deleteGroup(groupName);\n  }\n\n  deletePolicy(title) {\n    this.policyEngine.removePolicy('USER', title);\n  }\n\n  deleteRule(policyTitle, rule) {\n    let userPolicies = this.policyEngine.context.userPolicies;\n    userPolicies[policyTitle].deleteRule(rule);\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  getActivePolicy() {\n    return this.policyEngine.context.activeUserPolicy;\n  }\n\n  getPolicy(key) {\n    return this.policyEngine.context.userPolicies[key];\n  }\n\n  getPoliciesTitles() {\n    let policies = this.policyEngine.context.userPolicies;\n    let titles = [];\n\n    for (let i in policies) {\n      titles.push(i);\n    }\n\n    return titles;\n  }\n\n  getTargets(scope) {\n    let targets = [];\n\n    for (let i in this.policies[scope]) {\n      if (targets.indexOf(i) === -1) {\n        targets.push(i);\n      }\n    }\n\n    return targets;\n  }\n\n  increaseRulePriority(policyTitle, thisPriority, newPriority) {\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n  setVariables() {\n    return {\n      'Date': {\n        title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Date:</p>',\n        input: [\n          ['date', []]\n        ]\n      },\n      'Domain': {\n        title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Domain:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      'Group of users': {\n        title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Group name:</p>',\n        input: [\n          ['select', ['group', 'Select a group:']]\n        ]\n      },\n      'Subscription preferences': {\n        title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        input: []\n      },\n      'Time of the day': {\n        title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\n        description: '<p>Timeslot:</p>',\n        input: [\n          ['form', []]\n        ]\n      },\n      Weekday: {\n        title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\n        description: '<p>Weekday:</p>',\n        input: [\n          ['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]\n        ]\n      }\n    };\n  }\n\n  setAdditionMethods() {\n    return {\n      Date: (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule(params[4], { attribute: 'date', operator: 'equals', params: params[3] }, params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      Domain: (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule(params[4], { attribute: 'domain', operator: 'equals', params: params[3] }, params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Group of users': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule(params[4], { attribute: 'source', operator: 'in', params: params[3] }, params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Subscription preferences': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        let operator = 'equals';\n        if (params[3] === 'preauthorised') {\n          operator = 'in';\n        }\n        userPolicies[policyTitle].createRule(params[4], { attribute: 'subscription', operator: thisOperator, params: params[3] }, params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n      'Time of the day': (params) => {\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        params[3] = params[3].split(' to ');\n        let start = params[3][0].split(':');\n        start = start.join('');\n        let end = params[3][1].split(':');\n        end = end.join('');\n        userPolicies[policyTitle].createRule(params[4], { attribute: 'time', operator: 'between', params: [start, end] }, params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      },\n\n      Weekday: (params) => {\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        params[3] = weekdays.indexOf(params[3]);\n        let policyTitle = params[0];\n        let userPolicies = this.policyEngine.context.userPolicies;\n        userPolicies[policyTitle].createRule(params[4], { attribute: 'weekday', operator: 'equals', params: params[3] }, params[1], params[2]);\n        this.policyEngine.context.savePolicies('USER');\n      }\n    };\n  }\n\n  setValidationMethods() {\n    return {\n      Date: (scope, info) => { return this.isValidDate(info) & this.isValidScope(scope); },\n      'Group of users': (scope, info) => { return this.isValidString(info) & this.isValidScope(scope); },\n      Domain: (scope, info) => { return this.isValidDomain(info) & this.isValidScope(scope); },\n      Weekday: (scope, info) => { return true & this.isValidScope(scope); },\n      'Subscription preferences': (scope, info) => { return this.isValidSubscriptionType(info) & this.isValidScope(scope); },\n      'Time of the day': (scope, info) => { return this.isValidTimeslot(info) & this.isValidScope(scope); }\n    };\n  }\n\n  updateActivePolicy(title) {\n    this.policyEngine.context.activeUserPolicy = title;\n    this.policyEngine.context.saveActivePolicy();\n  }\n\n  isValidEmail(info) {\n    let pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidDomain(info) {\n    let pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\n    return pattern.test(info);\n  }\n\n  isValidString(info) {\n    let pattern = /[a-z0-9.-]$/;\n    return pattern.test(info);\n  }\n\n  isValidSubscriptionType(info) {\n    return true;\n  }\n\n  isValidDate(info) {\n    let infoSplit = info.split('/');\n    let day = parseInt(infoSplit[0]);\n    let month = parseInt(infoSplit[1]);\n    let year = parseInt(infoSplit[2]);\n\n    let date = new Date(year, month-1, day);\n    let isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n    let formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\n    let now = new Date();\n    let today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\n\n    let isFuture = false;\n    if (date.getFullYear() > now.getFullYear()) {\n      isFuture = true;\n    } else {\n      if (date.getFullYear() == now.getFullYear()) {\n        if ((date.getMonth() + 1) > (now.getMonth() + 1)) {\n          isFuture = true;\n        } else {\n          if ((date.getMonth() + 1) == (now.getMonth() + 1)) {\n            if (date.getDate() >= (now.getDate())) {\n              isFuture = true;\n            }\n          }\n        }\n      }\n    }\n\n    return (isValidFormat && isFuture);\n  }\n\n  isValidScope(scope) {\n    return scope !== '';\n  }\n\n  isValidTimeslot(info) {\n    if (!info) {\n      return false;\n    }\n    let splitInfo = info.split(' to '); // [12:00, 13:00]\n    let twoTimes = splitInfo.length === 2;\n    if (!twoTimes) {\n      return false;\n    }\n    let splitStart = splitInfo[0].split(':'); // [12, 00]\n    let splitEnd = splitInfo[1].split(':'); // [13, 00]\n    if (splitStart.length !== 2 || splitEnd.length !== 2) {\n      return false;\n    }\n    let okSize = (splitStart[0].length === 2) && (splitStart[1].length === 2) && (splitEnd[0].length === 2) && (splitEnd[1].length === 2);\n    let areIntegers = (splitStart[0] == parseInt(splitStart[0], 10)) && (splitStart[1] == parseInt(splitStart[1], 10)) && (splitEnd[0] == parseInt(splitEnd[0], 10)) && (splitEnd[1] == parseInt(splitEnd[1], 10));\n    return twoTimes && okSize && areIntegers;\n  }\n\n  getFormattedPolicies() {\n    let policiesPE = this.policyEngine.context.userPolicies;\n    let policiesGUI = [];\n\n    for (let i in policiesPE) {\n      let policy = {\n        title: policiesPE[i].key,\n        rulesTitles: [],\n        ids: []\n      }\n\n      if (policiesPE[i].rules.length !== 0) {\n        policiesPE[i].rules = policiesPE[i].sortRules();\n        for (let j in policiesPE[i].rules) {\n          let title = this._getTitle(policiesPE[i].rules[j]);\n          policy.rulesTitles.push(title);\n          policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\n        }\n      }\n\n      policiesGUI.push(policy);\n    }\n\n    return policiesGUI;\n  }\n\n  getRuleOfPolicy(title, priority) {\n    let policies = this.policyEngine.context.userPolicies;\n    let policy = policies[title];\n    return policy.getRuleByPriority(priority);\n  }\n\n  _getTitle(rule) {\n    let condition = rule.condition;\n    let authorise = (rule.decision) ? 'allowed' : 'blocked';\n    let target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\n    let attribute = condition.attribute;\n    switch(attribute) {\n      case 'date':\n        return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n      case 'domain':\n        return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n      case 'source':\n        if (condition.operator === 'in') {\n          return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.operator === 'equals') {\n            return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\n          }\n        }\n      case 'subscription':\n        if (condition.params === '*') {\n          return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\n        } else {\n          if (condition.params === 'preauthorised') {\n            return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\n          }\n        }\n      case 'time':\n        let start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\n        let end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\n        return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\n      case 'weekday':\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        let weekdayID = condition.params;\n        return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\n      default:\n        return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\n    }\n  }\n\n  getVariables() {\n    let variablesTitles = [];\n    for (let i in this.variables) {\n      variablesTitles.push(i);\n    }\n    return variablesTitles;\n  }\n\n  getVariableInfo(variable) {\n    return this.variables[variable];\n  }\n\n  getMyEmails() {\n    return this.policyEngine.context.getMyEmails();\n  }\n\n  getMyHyperties() {\n    return this.policyEngine.context.getMyHyperties();\n  }\n\n  //TODO If there is a problem with the input, show it to the user\n  setInfo(variable, policyTitle, info, authorise, scope, target) {\n    if (this.validation[variable](scope, info)) {\n      this.addition[variable]([policyTitle, scope, target, info, authorise]);\n    } else {\n      throw Error('Invalid configuration');\n    }\n  }\n\n  getInfo(scope, title) {\n    let policies = this.policies[scope];\n    let policy = {};\n    for (let i in policies) {\n      if (policies[i].condition === title) {\n        policy = policies[i];\n      }\n    }\n    if (policy !== {}) {\n      let condition = policy.condition.split(' ');\n      return this.policyEngine.getList(scope, condition[2]);\n    } else {\n      throw Error('Policy <' + title + '> not found!');\n    }\n  }\n\n  deleteInfo(variable, scope, target, info) {\n    let params = [scope, target, info];\n    if (variable === 'member') {\n      let conditionSplit = info.split(' ');\n      let groupName = conditionSplit[2];\n      params = [scope, groupName, info];\n    }\n    this.deletion[variable](params);\n  }\n\n  getGroup(scope, target, groupName) {\n    return this.policyEngine.context.getGroup(scope, target, groupName);\n  }\n\n  getGroups() {\n    let groups = this.policyEngine.context.groups;\n    let groupsGUI = {\n      groupsNames: [],\n      members: [],\n      ids: []\n    };\n\n    for (let i in groups) {\n      groupsGUI.groupsNames.push(i);\n      groupsGUI.members.push(groups[i]);\n      let ids = [];\n      for (let j in groups[i]) {\n        ids.push(i + '::' + groups[i][j]);\n      }\n      groupsGUI.ids.push(ids);\n    }\n\n    return groupsGUI;\n  }\n\n  getGroupsNames() {\n    return this.policyEngine.context.getGroupsNames();\n  }\n\n  removeFromGroup(groupName, user) {\n    this.policyEngine.context.removeFromGroup(groupName, user);\n  }\n\n  updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\n    let userPolicies = this.policyEngine.context.userPolicies;\n    userPolicies[policyTitle].deleteRule(rule);\n    if (!newSubscriptionType) {\n      userPolicies[policyTitle].createRule(newDecision, rule.condition, rule.scope, rule.target, rule.priority);\n    } else {\n      let operator = (newSubscriptionType === '*') ? 'equals' : 'in';\n      userPolicies[policyTitle].createRule(newDecision, [{ attribute: 'subscription', opeator: operator, params: newSubscriptionType }], rule.scope, rule.target, rule.priority);\n    }\n\n    this.policyEngine.context.savePolicies('USER');\n  }\n\n}\n\nexport default PoliciesManager;\n"]}