{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/admin/PoliciesGUI.js","src/admin/PoliciesManager.js"],"names":[],"mappings":"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","file":"policies-gui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import PoliciesManager from './PoliciesManager';\r\n\r\nclass PoliciesGUI {\r\n\r\n  constructor(pepGuiURL, pepURL, messageBus) {\r\n    let _this = this;\r\n    _this.policiesManager = new PoliciesManager(pepGuiURL, pepURL, messageBus);\r\n    // assume prepareAttributes is called after this\r\n  }\r\n\r\n  prepareAttributes() {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.policiesManager.prepareAttributes().then(() => {\r\n        _this.elements = _this._setElements();\r\n        _this._setListeners();\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  _addMember() {\r\n    let _this = this;\r\n    let group = event.target.id;\r\n    $('.member-new-intro').html('<h5>Add a member to a group</h5><p>Insert a user email below to add to the \"' + group + '\" group.</p>');\r\n    $('.member-new-modal').openModal();\r\n    $('.member-new-ok').off();\r\n    $('.member-new-ok').on('click', (event) => {\r\n      let member = $('#member-new').val();\r\n      $('#member-new').val('');\r\n      _this.policiesManager.addToGroup(group, member).then(() => {\r\n        $('.member-new-modal').closeModal();\r\n        _this._manageGroups();\r\n      });\r\n    });\r\n  }\r\n\r\n  _createGroup() {\r\n    let _this = this;\r\n    $('#group-new-name').val('');\r\n    $('.group-new-modal').openModal();\r\n    $('.group-new-ok').on('click', (event) => {\r\n      let groupName = $('#group-new-name').val();\r\n      _this.policiesManager.createGroup(groupName).then(() => {\r\n        _this._manageGroups();\r\n      });\r\n    });\r\n  }\r\n\r\n  _addPolicy() {\r\n    let _this = this;\r\n    $('#policy-new-title').val('');\r\n    $('.combining').html('');\r\n    let algorithms = ['Block overrides', 'Allow overrides', 'First applicable'];\r\n    $('.combining').append(this._getOptions('comb-algorithm', 'Choose a combining algorithm', algorithms));\r\n    $('.policy-new').openModal();\r\n\r\n    $('.policy-new-ok').off();\r\n    $('.policy-new-ok').on('click', (event) => {\r\n      let policyTitle = $('#policy-new-title').val();\r\n      if (!policyTitle) {\r\n        Materialize.toast('Invalid policy title', 4000);\r\n      } else {\r\n        let combiningAlgorithm = $('#comb-algorithm').val();\r\n        _this.policiesManager.addPolicy(policyTitle, combiningAlgorithm).then(() => {\r\n          $('.help-menu').addClass('hide');\r\n          $('.policy-new').closeModal();\r\n          _this._goHome();\r\n        });\r\n      }\r\n    });\r\n    $('.help-btn').off();\r\n    $('.help-btn').on('click', (event) => {\r\n      $('.help-menu').removeClass('hide');\r\n    });\r\n  }\r\n\r\n  _decreaseRulePriority() {\r\n    let _this = this;\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\r\n    splitId.pop();\r\n    let policyTitle = splitId.join(':');\r\n    _this.policiesManager.getPolicy(policyTitle).then((policy) => {\r\n      let lastPriority = policy.getLastPriority();\r\n      if (lastPriority != thisPriority) {\r\n        let newPriority = parseInt(thisPriority + 1);\r\n        _this.policiesManager.decreaseRulePriority(policyTitle, thisPriority, newPriority).then(() => {\r\n          _this._goHome();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  _deleteMember() {\r\n    let _this = this;\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split('::');\r\n    let member = splitId[splitId.length - 1];\r\n    splitId.pop();\r\n    let group = splitId.join('::');\r\n    _this.policiesManager.removeFromGroup(group, member).then(() => {\r\n      _this._manageGroups();\r\n    });\r\n  }\r\n\r\n  _deleteGroup() {\r\n    let _this = this;\r\n    let groupName = event.target.closest('tr').children[0].id;\r\n    _this.policiesManager.deleteGroup(groupName).then(() => {\r\n      _this._manageGroups();\r\n    });\r\n  }\r\n\r\n  _deletePolicy() {\r\n    let _this = this;\r\n    let policyTitle = event.target.closest('tr').id;\r\n    _this.policiesManager.deletePolicy(policyTitle).then(() => {\r\n      _this._goHome();\r\n    });\r\n  }\r\n\r\n  _deleteRule() {\r\n    let _this = this;\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let priority = splitId[splitId.length - 1];\r\n    splitId.pop();\r\n    let policyTitle = splitId.join(':');\r\n    let rule = _this.policiesManager.getRuleOfPolicy(policyTitle, priority);\r\n\r\n    _this.policiesManager.deleteRule(policyTitle, rule).then(() => {\r\n      _this._goHome();\r\n    });\r\n  }\r\n\r\n  _getActivePolicy() {\r\n    let _this = this;\r\n    _this.policiesManager.getActivePolicy().then((activeUserPolicy) => {\r\n      $('.policy-active').html('');\r\n      _this.policiesManager.getPoliciesTitles().then((policies) => {\r\n        policies.push('Deactivate all policies');\r\n\r\n        $('.policy-active').append(_this._getOptions('policies-list', 'Click to activate a policy', policies, activeUserPolicy));\r\n\r\n        $('#policies-list').on('click', (event) => {\r\n          let policyTitle = $('#policies-list').find(\":selected\")[0].textContent;\r\n          if (policyTitle === 'Deactivate all policies') {\r\n            policyTitle = undefined;\r\n          }\r\n          _this.policiesManager.updateActivePolicy(policyTitle);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  _getGroupOptions(title, keys, scopes, lists) {\r\n    let list = '<option disabled selected>' + title + '</option>';\r\n\r\n    for (let i in keys) {\r\n      list += '<optgroup label=' + keys[i] + '>';\r\n      for (let j in lists[i]) {\r\n        list += '<option id=\"' + scopes[i] + '\">' + lists[i][j] + '</option>';\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  _getInfo(variable) {\r\n    let info;\r\n\r\n    switch(variable) {\r\n      case 'Date':\r\n        info = $('.config').find('input').val();\r\n        if (info.indexOf(',') !== -1) { //20 July, 2016\r\n          let splitInfo = info.split(' '); //['20', 'July,',' '2016']\r\n          splitInfo[1] = splitInfo[1].substring(0, splitInfo[1].length - 1); //'July'\r\n          let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n          info = splitInfo[0] + '/' + (months.indexOf(splitInfo[1]) + 1) + '/' + splitInfo[2];\r\n        } else { // 2016-07-20\r\n          let splitInfo = info.split('-');\r\n          info = splitInfo[2] + '/' + splitInfo[1] + '/' + splitInfo[0];\r\n        }\r\n        break;\r\n      case 'Group of users':\r\n        info = $('#group').find(\":selected\").text();\r\n        break;\r\n      case 'Subscription preferences':\r\n        if (info = $(\"input[name='rule-new-subscription']:checked\")[0] !== undefined) {\r\n          info = $(\"input[name='rule-new-subscription']:checked\")[0].id;\r\n        }\r\n        break;\r\n      case 'Weekday':\r\n        info = $('#weekday').find(\":selected\").text();\r\n        break;\r\n      default:\r\n        info = $('.config').find('input').val();\r\n        break;\r\n    }\r\n\r\n    return info;\r\n  }\r\n\r\n  _getList(items) {\r\n      let list = '';\r\n      let numItems = items.length;\r\n\r\n      for (let i = 0; i < numItems; i++) {\r\n        list += '<li class=\"divider\"></li>';\r\n        list += '<li><a class=\"center-align\">' + items[i] + '</a></li>';\r\n      }\r\n\r\n      return list;\r\n    }\r\n\r\n  _getOptions(id, title, list, selected) {\r\n    let options = '<select id=\"' + id + '\" class=\"browser-default\"><option disabled selected>' + title + '</option>';\r\n    for (let i in list) {\r\n      if (selected !== undefined & selected === list[i]) {\r\n        options += '<option selected id=\"' + id + '\">' + list[i] + '</option>';\r\n      } else {\r\n        options += '<option id=\"' + id + '\">' + list[i] + '</option>';\r\n      }\r\n    }\r\n    options += '</select>';\r\n\r\n    return options;\r\n  }\r\n\r\n  _getPoliciesTable() {\r\n    let _this = this;\r\n\r\n    _this.policiesManager.getFormattedPolicies().then((policies) => {\r\n      $('.policies-no').addClass('hide');\r\n      $('.policies-current').html('');\r\n\r\n      let policiesTitles = [];\r\n      let rulesTitles = [];\r\n      let ids = [];\r\n\r\n      for (let i in policies) {\r\n        policiesTitles.push(policies[i].title);\r\n        rulesTitles.push(policies[i].rulesTitles);\r\n        ids.push(policies[i].ids);\r\n      }\r\n\r\n      let table = '<table>';\r\n      let isEmpty = policiesTitles.length === 0;\r\n\r\n      for (let i in policiesTitles) {\r\n        table += '<thead><tr id=\"' + policiesTitles[i] + '\"><td></td><td></td><th class=\"center-align\">' + policiesTitles[i] + '</th><td><i class=\"material-icons clickable-cell policy-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\r\n\r\n        for (let j in rulesTitles[i]) {\r\n          table += '<tr id=\"' + ids[i][j] + '\" ><td><i class=\"material-icons clickable-cell rule-priority-increase\" style=\"cursor: pointer; vertical-align: middle\">arrow_upward</i></td><td><i class=\"material-icons clickable-cell rule-priority-decrease\" style=\"cursor: pointer; vertical-align: middle\">arrow_downward</i></td><td class=\"rule-show clickable-cell\" style=\"cursor: pointer\">' + rulesTitles[i][j] + '</td><td><i class=\"material-icons clickable-cell rule-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\r\n        }\r\n        table += '<tr id=\"' + policiesTitles[i] + '\"></td><td></td><td></td><td style=\"text-align:center\"><i class=\"material-icons clickable-cell center-align rule-add\" style=\"cursor: pointer\">add_circle</i></td></tr>';\r\n      }\r\n      if (!isEmpty) {\r\n        table += '</tbody></table>';\r\n        $('.policies-current').append(table);\r\n      } else {\r\n        $('.policies-no').removeClass('hide');\r\n      }\r\n      $('.rule-add').on('click', (event) => { _this._showVariablesTypes(); });\r\n      $('.rule-delete').on('click', (event) => { _this._deleteRule(); });\r\n      $('.rule-show').on('click', (event) => { _this._showRule(); });\r\n      $('.rule-priority-increase').on('click', (event) => { _this._increaseRulePriority(); });\r\n      $('.rule-priority-decrease').on('click', (event) => { _this._decreaseRulePriority(); });\r\n      $('.policy-add').off();\r\n      $('.policy-add').on('click', (event) => { _this._addPolicy(); });\r\n      $('.policy-delete').on('click', (event) => { _this._deletePolicy(); });\r\n    });\r\n  }\r\n\r\n  _goHome() {\r\n    this._getActivePolicy();\r\n    this._getPoliciesTable();\r\n  }\r\n\r\n  _increaseRulePriority() {\r\n    let _this = this;\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let thisPriority = parseInt(splitId[splitId.length - 1]);\r\n    if (thisPriority !== 0) {\r\n      splitId.pop();\r\n      let policyTitle = splitId.join(':');\r\n      let newPriority = thisPriority - 1;\r\n\r\n      _this.policiesManager.increaseRulePriority(policyTitle, thisPriority, newPriority).then(() => {\r\n        _this._goHome();\r\n      });\r\n    }\r\n  }\r\n\r\n  _manageGroups() {\r\n    let _this = this;\r\n    _this.policiesManager.getGroups().then((groupsPE) => {\r\n      $('.groups-current').html('');\r\n      let groups = groupsPE.groupsNames;\r\n      let members = groupsPE.members;\r\n      let ids = groupsPE.ids;\r\n\r\n      let table = '<table>';\r\n      let isEmpty = groups.length === 0;\r\n\r\n      for (let i in groups) {\r\n        table += '<thead><tr><th id=\"' + groups[i] + '\">' + groups[i] + '</th><td style=\"text-align:right\"><i class=\"material-icons clickable-cell group-delete\" style=\"cursor: pointer; vertical-align: middle\">delete_forever</i></td></tr></thead><tbody>';\r\n        for (let j in members[i]) {\r\n          table += '<tr id=\"' + ids[i][j] + '\" ><td style=\"cursor: pointer\">' + members[i][j] + '</td><td style=\"text-align:right\"><i class=\"material-icons clickable-cell member-delete\" style=\"cursor: pointer; vertical-align: middle\">clear</i></td></tr>';\r\n        }\r\n\r\n        table += '<tr id=\"' + groups[i] + '\"><td><i class=\"material-icons clickable-cell member-add\" id=\"' + groups[i] + '\" style=\"cursor: pointer\">add_circle</i></td></tr>';\r\n      }\r\n\r\n      if (!isEmpty) {\r\n        table += '</tbody></table>';\r\n        $('.groups-current').append(table);\r\n      } else {\r\n        $('.groups-current').append('<p>There are no groups set.</p>');\r\n      }\r\n\r\n      $('.member-add').off();\r\n      $('.member-add').on('click', (event) => { _this._addMember(); });\r\n      $('.member-delete').on('click', (event) => { _this._deleteMember(); });\r\n      $('.group-add').off();\r\n      $('.group-add').on('click', (event) => { _this._createGroup(); });\r\n      $('.group-delete').on('click', (event) => { _this._deleteGroup(); });\r\n    });\r\n  }\r\n\r\n  _parseFileContent(content) {\r\n    let parsedContent = JSON.parse(content);\r\n    for (let i in parsedContent) {\r\n      this.policiesManager.addPolicy(i, undefined, parsedContent[i]);\r\n    }\r\n    $('.policy-new').closeModal();\r\n  }\r\n\r\n  _setElements() {\r\n    return {\r\n      date: (params) => { return '<input type=\"date\" class=\"datepicker\">'; },\r\n      select: (params) => { return this._getOptions(params[0], params[1], params[2]); },\r\n      form: (params) => { return '<form><input type=\"text\" placeholder=\"' + params + '\"></input></form>'; }\r\n    };\r\n  }\r\n\r\n  _showNewConfigurationPanel(policyTitle) {\r\n    let variable = event.target.text;\r\n    $('.variable').html(this._getNewConfiguration(policyTitle, variable));\r\n    $('.scopes').empty().html('');\r\n\r\n    let keys = ['Email', 'Hyperty', 'All'];\r\n    let scopes = ['identity', 'hyperty', 'global'];\r\n    let lists = [];\r\n\r\n    this.policiesManager.getMyEmails().then((emails) => {\r\n      lists.push(emails);\r\n      this.policiesManager.getMyHyperties().then((hyperties) => {\r\n        lists.push(hyperties);\r\n        lists.push(['All identities and hyperties']);\r\n        $('.scopes').append(this._getGroupOptions('Apply this configuration to:', keys, scopes, lists));\r\n        $('.variable').removeClass('hide');\r\n      });\r\n    });\r\n  }\r\n\r\n  _showVariablesTypes(event) {\r\n    let policyTitle = event.target.closest('tr').id;\r\n\r\n    $('#variables-types').empty().html('');\r\n    let variables = this.policiesManager.getVariables();\r\n    $('#variables-types').append(this._getList(variables));\r\n    $('.variable').addClass('hide');\r\n    $('.rule-new').openModal();\r\n    $('#variables-types').off();\r\n    $('#variables-types').on('click', (event) => { this._showNewConfigurationPanel(policyTitle); });\r\n  }\r\n\r\n  _getNewConfiguration(policyTitle, variable) {\r\n    let _this = this;\r\n    let info = _this.policiesManager.getVariableInfo(variable);\r\n    $('.rule-new-title').html(info.title);\r\n    $('.description').html(info.description);\r\n    $('.config').html('');\r\n\r\n    if (variable === 'Subscription preferences') {\r\n      $('.subscription-type').removeClass('hide');\r\n    } else {\r\n      $('.subscription-type').addClass('hide');\r\n      let tags = info.input;\r\n      for (let i in tags) {\r\n        _this.policiesManager.getGroupsNames().then((groupsNames) => {\r\n          if (variable === 'Group of users') {\r\n            tags[i][1].push(groupsNames);\r\n          }\r\n          $('.config').append(_this.elements[tags[i][0]](tags[i][1]));\r\n          if (variable === 'Group of users') {\r\n            tags[i][1].pop();\r\n          }\r\n        });\r\n      }\r\n      if (variable ==='date') {\r\n        $('.datepicker').pickadate({\r\n          selectMonths: true,\r\n          selectYears: 15\r\n        });\r\n      }\r\n    }\r\n    document.getElementById('allow').checked = false;\r\n    document.getElementById('block').checked = false;\r\n    $('.ok-btn').off();\r\n    $('.ok-btn').on('click', (event) => {\r\n      if ($(\"input[name='rule-new-decision']:checked\")[0] !== undefined) {\r\n        let info = _this._getInfo(variable);\r\n        let decision = $(\"input[name='rule-new-decision']:checked\")[0].id;\r\n        decision = decision === 'allow';\r\n        let scope = $('.scopes').find(\":selected\")[0].id;\r\n        let target = $('.scopes').find(\":selected\")[0].textContent;\r\n        target = (target === 'All identities and hyperties') ? 'global' : target;\r\n        _this.policiesManager.setInfo(variable, policyTitle, info, decision, scope, target).then(() => {\r\n          $('.rule-new').closeModal();\r\n          _this._goHome();\r\n        });\r\n      } else {\r\n        throw Error('INFORMATION MISSING: please specify an authorisation decision.');\r\n      }\r\n    });\r\n  }\r\n\r\n  _deleteInfo(resourceType) {\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let scope = splitId[0];\r\n    splitId.shift();\r\n    let target = splitId.join('');\r\n    let condition = event.target.closest('tr').children[0].id;\r\n    this.policiesManager.deleteInfo(resourceType, scope, target, condition);\r\n    this._goHome();\r\n  }\r\n\r\n  _setListeners() {\r\n    $('.settings-btn').on('click', (event) => {\r\n      parent.postMessage({ body: { method: 'showAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n      $('.admin-page').removeClass('hide');\r\n      // document.getElementsByTagName('body')[0].style = 'background-color:white;';\r\n    });\r\n\r\n    $('.policies-page-show').on('click', (event) => {\r\n      $('.policies-section').removeClass('hide');\r\n      $('.identities-section').addClass('hide');\r\n      this._goHome();\r\n      this._manageGroups();\r\n    });\r\n\r\n    $('.admin-page-exit').on('click', (event) => {\r\n      parent.postMessage({ body: { method: 'hideAdminPage' }, to: 'runtime:gui-manager' }, '*');\r\n      $('.admin-page').addClass('hide');\r\n      // document.getElementsByTagName('body')[0].style = 'background-color:transparent;';\r\n    });\r\n\r\n    $('.exit-btn').on('click', (event) => {\r\n      $('.subscription-type').addClass('hide');\r\n      $('.help-menu').addClass('hide');\r\n    });\r\n\r\n    $('#policy-file').on('change', (event) => {\r\n      let file = event.target.files[0];\r\n      let reader = new FileReader();\r\n      reader.readAsText(file, \"UTF-8\");\r\n      reader.onload = (event) => {\r\n        this._parseFileContent(event.target.result);\r\n        this._goHome();\r\n      }\r\n      reader.onerror = (event) => {\r\n        throw Error(\"Error reading the file\");\r\n      }\r\n    });\r\n  }\r\n\r\n  _showRule(event) {\r\n    let ruleTitle = event.target.textContent;\r\n    let id = event.target.closest('tr').id;\r\n    let splitId = id.split(':');\r\n    let priority = splitId[splitId.length - 1];\r\n    splitId.pop();\r\n    let policyTitle = splitId.join(':');\r\n    this.policiesManager.getRuleOfPolicy(policyTitle, priority).then((rule) => {\r\n      if (rule.condition.attribute === 'subscription' && rule.condition.params === 'preauthorised') {\r\n        $('.authorise-btns').addClass('hide');\r\n      } else {\r\n        let element;\r\n        if (rule.decision) {\r\n          element = document.getElementById('btn-allow');\r\n        } else {\r\n          element = document.getElementById('btn-block');\r\n        }\r\n        element.checked = true;\r\n        $('.authorise-btns').removeClass('hide');\r\n      }\r\n      $('.member-add').addClass('hide');\r\n      $('.member-new-btn').addClass('hide');\r\n\r\n      $('.rule-details').openModal();\r\n      $('.rule-title').html('<h5><b>' + ruleTitle + '</b></h5>');\r\n      if (rule.condition.attribute === 'subscription') {\r\n        $('.subscription-type').removeClass('hide');\r\n      }\r\n      $('.subscription-decision').on('click', (event) => { this._updateRule('subscription', policyTitle, rule); });\r\n      $('.decision').off();\r\n      $('.decision').on('click', (event) => { this._updateRule('authorisation', policyTitle, rule);});\r\n    });\r\n  }\r\n\r\n  _updateRule(type, policyTitle, rule) {\r\n    let _this = this;\r\n    let title = $('.rule-title').text();\r\n    let splitTitle = title.split(' ');\r\n    let index = splitTitle.indexOf('is');\r\n    if (index === -1) {\r\n      index = splitTitle.indexOf('are');\r\n    }\r\n    switch (type) {\r\n      case 'authorisation':\r\n        let newDecision = $(\"input[name='rule-update-decision']:checked\")[0].id;\r\n\r\n        if (newDecision === 'btn-allow') {\r\n          splitTitle[index + 1] = 'allowed';\r\n          newDecision = true;\r\n        } else {\r\n          splitTitle[index + 1] = 'blocked';\r\n          newDecision = false;\r\n        }\r\n        title = splitTitle.join(' ');\r\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\r\n        _this.policiesManager.updatePolicy(policyTitle, rule, newDecision).then(() => {\r\n          _this._goHome();\r\n        });\r\n        break;\r\n      case 'subscription':\r\n        let newSubscriptionType = event.target.labels[0].textContent;\r\n\r\n        let decision = splitTitle[index + 1];\r\n        splitTitle = title.split('hyperties are');\r\n        if (newSubscriptionType === 'All subscribers') {\r\n          $('.authorise-btns').removeClass('hide');\r\n          newDecision = rule.decision;\r\n          newSubscriptionType = '*';\r\n          title = 'Subscriptions from all hyperties are' + splitTitle[1];\r\n        } else {\r\n          $('.authorise-btns').addClass('hide');\r\n          newDecision = true;\r\n          newSubscriptionType = 'preauthorised';\r\n          title = 'Subscriptions from previously authorised hyperties are' + splitTitle[1];\r\n        }\r\n\r\n        $('.rule-title').html('<h5><b>' + title + '</b></h5>');\r\n        _this.policiesManager.updatePolicy(policyTitle, rule, newDecision, newSubscriptionType).then(() => {\r\n          _this._goHome();\r\n        });\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PoliciesGUI;\r\n","class PoliciesManager {\r\n\r\n  constructor(pepGuiURL, pepURL, messageBus) {\r\n    let _this = this;\r\n    _this._guiURL = pepGuiURL;\r\n    _this._pepURL = pepURL;\r\n    _this._messageBus = messageBus;\r\n\r\n    // assume prepare attributes is called after this\r\n  }\r\n\r\n  callPolicyEngineFunc(methodName, parameters) {\r\n    let _this = this;\r\n    let message;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      message = { type: 'execute', to: _this._pepURL, from: _this._guiURL,\r\n        body: { resource: 'policy', method: methodName, params: parameters }, };\r\n      _this._messageBus.postMessage(message, (res) => {\r\n        let result = res.body.value;\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  prepareAttributes() {\r\n    return new Promise((resolve, reject) => {\r\n      let _this = this;\r\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n        _this.policies = userPolicies;\r\n        _this.variables = _this.setVariables();\r\n        _this.addition = _this.setAdditionMethods();\r\n        _this.validation = _this.setValidationMethods();\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  addToGroup(groupName, user) {\r\n    return this.callPolicyEngineFunc('addToGroup', {groupName: groupName, userEmail: user});\r\n  }\r\n\r\n  createGroup(groupName) {\r\n    return this.callPolicyEngineFunc('createGroup', {groupName: groupName});\r\n  }\r\n\r\n  addPolicy(title, combiningAlgorithm, policy) {\r\n    if (policy === undefined) {\r\n      switch (combiningAlgorithm) {\r\n        case 'Block overrides':\r\n          combiningAlgorithm = 'blockOverrides';\r\n          break;\r\n        case 'Allow overrides':\r\n          combiningAlgorithm = 'allowOverrides';\r\n          break;\r\n        case 'First applicable':\r\n          combiningAlgorithm = 'firstApplicable';\r\n          break;\r\n        default:\r\n          combiningAlgorithm = undefined;\r\n      }\r\n    }\r\n\r\n    return this.callPolicyEngineFunc('addPolicy',\r\n      {source: 'USER', key: title, policy: policy, combiningAlgorithm: combiningAlgorithm});\r\n  }\r\n\r\n  decreaseRulePriority(policyTitle, thisPriority, newPriority) {\r\n    this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\r\n    this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\r\n    return this.callPolicyEngineFunc('savePolicies', {source: 'USER'});\r\n  }\r\n\r\n  deleteGroup(groupName) {\r\n    return this.callPolicyEngineFunc('deleteGroup', {groupName: groupName});\r\n  }\r\n\r\n  deletePolicy(title) {\r\n    return this.callPolicyEngineFunc('removePolicy', {source: 'USER', key: title});\r\n  }\r\n\r\n  deleteRule(policyTitle, rule) {\r\n    let _this = this;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n        userPolicies[policyTitle].deleteRule(rule);\r\n        _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  getActivePolicy() {\r\n    return this.callPolicyEngineFunc('activeUserPolicy', {});\r\n  }\r\n\r\n  getPolicy(key) {\r\n    return this.callPolicyEngineFunc('userPolicy', {key: key});\r\n  }\r\n\r\n  getPoliciesTitles() {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policies) => {\r\n        let titles = [];\r\n\r\n        for (let i in policies) {\r\n          titles.push(i);\r\n        }\r\n\r\n        resolve(titles);\r\n      });\r\n    });\r\n  }\r\n\r\n  getTargets(scope) {\r\n    let targets = [];\r\n\r\n    for (let i in this.policies[scope]) {\r\n      if (targets.indexOf(i) === -1) {\r\n        targets.push(i);\r\n      }\r\n    }\r\n\r\n    return targets;\r\n  }\r\n\r\n  increaseRulePriority(policyTitle, thisPriority, newPriority) {\r\n    let _this = this;\r\n    _this.getRuleOfPolicy(policyTitle, thisPriority).priority = newPriority;\r\n    _this.getRuleOfPolicy(policyTitle, newPriority).priority = thisPriority;\r\n    return _this.callPolicyEngineFunc('savePolicies', {source: 'USER'});\r\n  }\r\n\r\n  setVariables() {\r\n    return {\r\n      'Date': {\r\n        title: '<br><h5>Updating date related configurations</h5><p>Incoming communications in the introduced date will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\r\n        description: '<p>Date:</p>',\r\n        input: [\r\n          ['date', []]\r\n        ]\r\n      },\r\n      'Domain': {\r\n        title: '<br><h5>Updating domain configurations</h5><p>Incoming communications from a user whose identity is from the introduced domain allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\r\n        description: '<p>Domain:</p>',\r\n        input: [\r\n          ['form', []]\r\n        ]\r\n      },\r\n      'Group of users': {\r\n        title: '<br><h5>Updating groups configurations</h5><p>Incoming communications from a user whose identity is in the introduced group will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\r\n        description: '<p>Group name:</p>',\r\n        input: [\r\n          ['select', ['group', 'Select a group:']]\r\n        ]\r\n      },\r\n      'Subscription preferences': {\r\n        title: '<br><h5>Updating subscriptions configurations</h5><p>The acceptance of subscriptions to your hyperties will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\r\n        input: []\r\n      },\r\n      'Time of the day': {\r\n        title: '<br><h5>Updating time configurations</h5><p>Incoming communications in the introduced timeslot will be blocked, but this can be changed in the preferences page.</p><p>Please introduce a new timeslot in the following format:</p><p class=\"center-align\">&lt;START-HOUR&gt;:&lt;START-MINUTES&gt; to &lt;END-HOUR&gt;:&lt;END-MINUTES&gt;</p><br>',\r\n        description: '<p>Timeslot:</p>',\r\n        input: [\r\n          ['form', []]\r\n        ]\r\n      },\r\n      Weekday: {\r\n        title: '<br><h5>Updating weekday configurations</h5><p>Incoming communications in the introduced weekday will be allowed or blocked according to your configurations, which can be changed in the preferences page.</p><br>',\r\n        description: '<p>Weekday:</p>',\r\n        input: [\r\n          ['select', ['weekday', 'Select a weekday:', ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]]\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  setAdditionMethods() {\r\n    let _this = this;\r\n    return {\r\n      Date: (params) => {\r\n        return new Promise((resolve, reject) => {\r\n          let policyTitle = params[0];\r\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'date', operator: 'equals', params: params[3] }, params[1], params[2]);\r\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      },\r\n      Domain: (params) => {\r\n        return new Promise((resolve, reject) => {\r\n          let policyTitle = params[0];\r\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'domain', operator: 'equals', params: params[3] }, params[1], params[2]);\r\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      },\r\n      'Group of users': (params) => {\r\n        return new Promise((resolve, reject) => {\r\n          let policyTitle = params[0];\r\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'source', operator: 'in', params: params[3] }, params[1], params[2]);\r\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      },\r\n      'Subscription preferences': (params) => {\r\n        return new Promise((resolve, reject) => {\r\n          let policyTitle = params[0];\r\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n            let operator = 'equals';\r\n            if (params[3] === 'preauthorised') {\r\n              operator = 'in';\r\n            }\r\n\r\n            // TIAGO: this is giving me an error...\r\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'subscription', operator: operator, params: params[3] }, params[1], params[2]);\r\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      },\r\n      'Time of the day': (params) => {\r\n        return new Promise((resolve, reject) => {\r\n          let policyTitle = params[0];\r\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n            params[3] = params[3].split(' to ');\r\n            let start = params[3][0].split(':');\r\n            start = start.join('');\r\n            let end = params[3][1].split(':');\r\n            end = end.join('');\r\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'time', operator: 'between', params: [start, end] }, params[1], params[2]);\r\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      },\r\n\r\n      Weekday: (params) => {\r\n        return new Promise((resolve, reject) => {\r\n          let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n          params[3] = weekdays.indexOf(params[3]);\r\n          let policyTitle = params[0];\r\n          _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n            userPolicies[policyTitle].createRule(params[4], { attribute: 'weekday', operator: 'equals', params: params[3] }, params[1], params[2]);\r\n            _this.callPolicyEngineFunc('savePolicies', {source: 'USER'}).then(() => {\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  setValidationMethods() {\r\n    return {\r\n      Date: (scope, info) => { return this.isValidDate(info) & this.isValidScope(scope); },\r\n      'Group of users': (scope, info) => { return this.isValidString(info) & this.isValidScope(scope); },\r\n      Domain: (scope, info) => { return this.isValidDomain(info) & this.isValidScope(scope); },\r\n      Weekday: (scope, info) => { return true & this.isValidScope(scope); },\r\n      'Subscription preferences': (scope, info) => { return this.isValidSubscriptionType(info) & this.isValidScope(scope); },\r\n      'Time of the day': (scope, info) => { return this.isValidTimeslot(info) & this.isValidScope(scope); }\r\n    };\r\n  }\r\n\r\n  updateActivePolicy(title) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('activeUserPolicy', {userPolicy: title}).then(() => {\r\n        _this.callPolicyEngineFunc('saveActivePolicy', {}).then(() => {\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  isValidEmail(info) {\r\n    let pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\r\n    return pattern.test(info);\r\n  }\r\n\r\n  isValidDomain(info) {\r\n    let pattern = /[a-z0-9.-]+\\.[a-z]{2,3}$/;\r\n    return pattern.test(info);\r\n  }\r\n\r\n  isValidString(info) {\r\n    let pattern = /[a-z0-9.-]$/;\r\n    return pattern.test(info);\r\n  }\r\n\r\n  isValidSubscriptionType(info) {\r\n    return true;\r\n  }\r\n\r\n  isValidDate(info) {\r\n    let infoSplit = info.split('/');\r\n    let day = parseInt(infoSplit[0]);\r\n    let month = parseInt(infoSplit[1]);\r\n    let year = parseInt(infoSplit[2]);\r\n\r\n    let date = new Date(year, month-1, day);\r\n    let isValidFormat = date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\r\n    let formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\r\n    let now = new Date();\r\n    let today = now.getDate() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear();\r\n\r\n    let isFuture = false;\r\n    if (date.getFullYear() > now.getFullYear()) {\r\n      isFuture = true;\r\n    } else {\r\n      if (date.getFullYear() == now.getFullYear()) {\r\n        if ((date.getMonth() + 1) > (now.getMonth() + 1)) {\r\n          isFuture = true;\r\n        } else {\r\n          if ((date.getMonth() + 1) == (now.getMonth() + 1)) {\r\n            if (date.getDate() >= (now.getDate())) {\r\n              isFuture = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return (isValidFormat && isFuture);\r\n  }\r\n\r\n  isValidScope(scope) {\r\n    return scope !== '';\r\n  }\r\n\r\n  isValidTimeslot(info) {\r\n    if (!info) {\r\n      return false;\r\n    }\r\n    let splitInfo = info.split(' to '); // [12:00, 13:00]\r\n    let twoTimes = splitInfo.length === 2;\r\n    if (!twoTimes) {\r\n      return false;\r\n    }\r\n    let splitStart = splitInfo[0].split(':'); // [12, 00]\r\n    let splitEnd = splitInfo[1].split(':'); // [13, 00]\r\n    if (splitStart.length !== 2 || splitEnd.length !== 2) {\r\n      return false;\r\n    }\r\n    let okSize = (splitStart[0].length === 2) && (splitStart[1].length === 2) && (splitEnd[0].length === 2) && (splitEnd[1].length === 2);\r\n    let areIntegers = (splitStart[0] == parseInt(splitStart[0], 10)) && (splitStart[1] == parseInt(splitStart[1], 10)) && (splitEnd[0] == parseInt(splitEnd[0], 10)) && (splitEnd[1] == parseInt(splitEnd[1], 10));\r\n    return twoTimes && okSize && areIntegers;\r\n  }\r\n\r\n  getFormattedPolicies() {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policiesPE) => {\r\n        let policiesGUI = [];\r\n\r\n        for (let i in policiesPE) {\r\n          let policy = {\r\n            title: policiesPE[i].key,\r\n            rulesTitles: [],\r\n            ids: []\r\n          }\r\n\r\n          if (policiesPE[i].rules.length !== 0) {\r\n            policiesPE[i].rules = policiesPE[i].sortRules();\r\n            for (let j in policiesPE[i].rules) {\r\n              let title = _this._getTitle(policiesPE[i].rules[j]);\r\n              policy.rulesTitles.push(title);\r\n              policy.ids.push(policy.title + ':' + policiesPE[i].rules[j].priority);\r\n            }\r\n          }\r\n\r\n          policiesGUI.push(policy);\r\n        }\r\n\r\n        resolve(policiesGUI);\r\n      });\r\n    });\r\n  }\r\n\r\n  getRuleOfPolicy(title, priority) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('userPolicies', {}).then((policies) => {\r\n        let policy = policies[title];\r\n        resolve(policy.getRuleByPriority(priority));\r\n      });\r\n    });\r\n  }\r\n\r\n  _getTitle(rule) {\r\n    let condition = rule.condition;\r\n    let authorise = (rule.decision) ? 'allowed' : 'blocked';\r\n    let target = rule.target === 'global' ? 'All identities and hyperties' : rule.target;\r\n    let attribute = condition.attribute;\r\n    switch(attribute) {\r\n      case 'date':\r\n        return 'Date ' + condition.params + ' is ' + authorise + ' (' + target + ')';\r\n      case 'domain':\r\n        return 'Domain \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\r\n      case 'source':\r\n        if (condition.operator === 'in') {\r\n          return 'Group \\\"' + condition.params + '\\\" is ' + authorise + ' (' + target + ')';\r\n        } else {\r\n          if (condition.operator === 'equals') {\r\n            return 'User ' + condition.params + ' is ' + authorise + ' (' + target + ')';\r\n          }\r\n        }\r\n      case 'subscription':\r\n        if (condition.params === '*') {\r\n          return 'Subscriptions from all hyperties are ' + authorise + ' (' + target + ')';\r\n        } else {\r\n          if (condition.params === 'preauthorised') {\r\n            return 'Subscriptions from previously authorised hyperties are allowed (' + target + ')';\r\n          }\r\n        }\r\n      case 'time':\r\n        let start = condition.params[0][0] + condition.params[0][1] + ':' + condition.params[0][2] + condition.params[0][3];\r\n        let end = condition.params[1][0] + condition.params[1][1] + ':' + condition.params[1][2] + condition.params[1][3];\r\n        return 'Timeslot from ' + start + ' to ' + end + ' is ' + authorise + ' (' + target + ')';\r\n      case 'weekday':\r\n        let weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        let weekdayID = condition.params;\r\n        return 'Weekday \\\"' + weekdays[weekdayID] + '\\\" is ' + authorise + ' (' + target + ')';\r\n      default:\r\n        return 'Rule ' + rule.priority + ' is ' + authorise + ' (' + target + ')';\r\n    }\r\n  }\r\n\r\n  getVariables() {\r\n    let variablesTitles = [];\r\n    for (let i in this.variables) {\r\n      variablesTitles.push(i);\r\n    }\r\n    return variablesTitles;\r\n  }\r\n\r\n  getVariableInfo(variable) {\r\n    return this.variables[variable];\r\n  }\r\n\r\n  getMyEmails() {\r\n    return this.callPolicyEngineFunc('getMyEmails', {});\r\n  }\r\n\r\n  getMyHyperties() {\r\n    return this.callPolicyEngineFunc('getMyHyperties', {});\r\n  }\r\n\r\n  //TODO If there is a problem with the input, show it to the user\r\n  setInfo(variable, policyTitle, info, authorise, scope, target) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      if (_this.validation[variable](scope, info)) {\r\n        _this.addition[variable]([policyTitle, scope, target, info, authorise]).then(() => {\r\n          resolve();\r\n        });\r\n      } else {\r\n        reject('Invalid configuration');\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteInfo(variable, scope, target, info) {\r\n    let params = [scope, target, info];\r\n    if (variable === 'member') {\r\n      let conditionSplit = info.split(' ');\r\n      let groupName = conditionSplit[2];\r\n      params = [scope, groupName, info];\r\n    }\r\n    this.deletion[variable](params);\r\n  }\r\n\r\n  getGroups() {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('groups', {}).then((groups) => {\r\n        let groupsGUI = {\r\n          groupsNames: [],\r\n          members: [],\r\n          ids: []\r\n        };\r\n\r\n        for (let i in groups) {\r\n          groupsGUI.groupsNames.push(i);\r\n          groupsGUI.members.push(groups[i]);\r\n          let ids = [];\r\n          for (let j in groups[i]) {\r\n            ids.push(i + '::' + groups[i][j]);\r\n          }\r\n          groupsGUI.ids.push(ids);\r\n        }\r\n\r\n        //console.log('TIAGO groups', groupsGUI)\r\n        resolve(groupsGUI);\r\n      });\r\n    });\r\n  }\r\n\r\n  getGroupsNames() {\r\n    return this.callPolicyEngineFunc('getGroupsNames', {});\r\n  }\r\n\r\n  removeFromGroup(groupName, user) {\r\n    return this.callPolicyEngineFunc('removeFromGroup', {groupName: groupName, userEmail: user});\r\n  }\r\n\r\n  updatePolicy(policyTitle, rule, newDecision, newSubscriptionType) {\r\n    let _this = this;\r\n    return new Promise((resolve, reject) => {\r\n      _this.callPolicyEngineFunc('userPolicies', {}).then((userPolicies) => {\r\n        userPolicies[policyTitle].deleteRule(rule);\r\n        if (!newSubscriptionType) {\r\n          userPolicies[policyTitle].createRule(newDecision, rule.condition, rule.scope, rule.target, rule.priority);\r\n        } else {\r\n          let operator = (newSubscriptionType === '*') ? 'equals' : 'in';\r\n          userPolicies[policyTitle].createRule(newDecision, [{ attribute: 'subscription', opeator: operator, params: newSubscriptionType }], rule.scope, rule.target, rule.priority);\r\n        }\r\n\r\n        _this.callPolicyEngineFunc('saveActivePolicy', {}).then(() => {\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default PoliciesManager;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}