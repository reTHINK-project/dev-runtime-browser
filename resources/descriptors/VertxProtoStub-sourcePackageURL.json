{"encoding":"Base64","sourceCodeClasname":"VertxProtoStub","sourceCode":"","signature":"","sourceCodeClassName":"VertxProtoStub"}