{
  "default": {
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "google.com": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTsKCmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGFjdGl2YXRlOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9Cgp2YXIgb3BlbklEQ29uZmlndXJhdGlvbiA9IHVuZGVmaW5lZDsKCnZhciBnb29nbGVJbmZvID0gewogIGNsaWVudFNlY3JldDogJ1h4NHJLdWNiNVpZVGFYbGNaWDlITGZaVycsCiAgY2xpZW50SUQ6ICc4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLAogIHJlZGlyZWN0VVJJOiBsb2NhdGlvbi5ocmVmLAogIGlzc3VlcjogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsCiAgdG9rZW5FbmRwb2ludDogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLAogIGp3a3NVcmk6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/JywKICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aD8nLAogIHVzZXJpbmZvOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLAogIHRva2VuSW5mbzogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49JywKICBhY2Nlc3NUeXBlOiAnb2ZmbGluZScsCiAgdHlwZTogJ2NvZGUgdG9rZW4gaWRfdG9rZW4nLAogIHNjb3BlOiAnb3BlbmlkJTIwZW1haWwlMjBwcm9maWxlJywKICBzdGF0ZTogJ3N0YXRlJwp9OwoKLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzCmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHsKICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFtdLywgJ1xcXFsnKS5yZXBsYWNlKC9bXF1dLywgJ1xcXF0nKTsKICB2YXIgcmVnZXhTID0gJ1tcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknOwogIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTsKICB2YXIgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTsKICBpZiAocmVzdWx0cyA9PT0gbnVsbCkgcmV0dXJuICcnO2Vsc2UgcmV0dXJuIHJlc3VsdHNbMV07Cn0KCmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkgewogIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7CiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHsKICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuCiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLgogICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7CiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7CiAgfSBlbHNlIHsKICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLgogICAgeGhyID0gbnVsbDsKICB9CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGlmICh4aHIpIHsKICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7CiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTsKICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7CiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgeGhyLnNlbmQoKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7CiAgICB9CiAgfSk7Cn0KCi8qKgoqIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW4KKgoqLwp2YXIgZXhjaGFuZ2VDb2RlID0gZnVuY3Rpb24gZXhjaGFuZ2VDb2RlKGNvZGUpIHsKICB2YXIgaSA9IGdvb2dsZUluZm87CgogIHZhciBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSc7CgogIC8vbGV0IFVSTCA9ID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIGNvZGUgKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7CgogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHsKICAgICAgcmVzb2x2ZShpbmZvKTsKICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICByZWplY3QoZXJyb3IpOwogICAgfSk7CiAgfSk7Cn07CgovKioKKiBJZGVudGl0eSBQcm92aWRlciBQcm94eQoqLwp2YXIgSWRwUHJveHkgPSB7CgogIC8qKgogICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uCiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb24KICAqCiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZAogICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvbgogICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyCiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvbgogICovCiAgZ2VuZXJhdGVBc3NlcnRpb246IGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXJ0aW9uKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpIHsKICAgIHZhciBpID0gZ29vZ2xlSW5mbzsKICAgIHZhciB0b2tlbklEID0gY29udGVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBpZiAob3JpZ2luICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGkudG9rZW5JbmZvICsgdG9rZW5JRCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHZhciB0b2tlbklESlNPTiA9IHZhbHVlOwogICAgICAgICAgdmFyIGVuY29kZWRDb250ZW50ID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHRva2VuSUQ6IHRva2VuSUQsIHRva2VuSURKU09OOiB0b2tlbklESlNPTiB9KSk7CiAgICAgICAgICByZXNvbHZlKGVuY29kZWRDb250ZW50KTsKICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVqZWN0KCdlcnInKTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgLyoqCiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWQKICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb24KICAqCiAgKiBAcGFyYW0gIHthc3NlcnRpb259ICAgIElkZW50aXR5IEFzc2VydGlvbiB0byBiZSB2YWxpZGF0ZWQKICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb24KICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0CiAgKi8KICB2YWxpZGF0ZUFzc2VydGlvbjogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4pIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBpID0gZ29vZ2xlSW5mbzsKCiAgICAgIHZhciBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTsKICAgICAgdmFyIGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTsKICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpLnRva2VuSW5mbyArIGNvbnRlbnQudG9rZW5JRCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CgogICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShyZXN1bHQpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50LnRva2VuSURKU09OKSkgewogICAgICAgICAgcmVzb2x2ZSgndmFsaWQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7CiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CgogICAgICAgIHJlamVjdChlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH0sCgogIC8qKgogICogRnVuY3Rpb24gdG8gb2J0YWluIGFuIHVzZXIgaWRlbnRpdHkKICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uCiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSBhbiBVUkwgc28gdGhlIElkZW50aXR5IE1vZHVsZSBjYW4gdXNlIHRvIG9idGFpbiBhbiBpZGVudGl0eQogICoKICAqIEBwYXJhbSAge3Njb3BlfSAgICAgU2NvcGUKICAqLwogIGdldElkZW50aXR5QXNzZXJ0aW9uOiBmdW5jdGlvbiBnZXRJZGVudGl0eUFzc2VydGlvbihjb250ZW50cykgewogICAgdmFyIGkgPSBnb29nbGVJbmZvOwoKICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlCiAgICAvL1RPRE8gbGF0ZXIgc2hvdWxkIGJlIGRlZmluZWQgYSBiZXR0ZXIgYXBwcm9hY2gKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIGlmICghY29udGVudHMpIHsKICAgICAgICAvKnRyeSB7CiAgICAgICAgICBpZiAod2luZG93KSB7CiAgICAgICAgICAgIHJlc29sdmUoJ3VybCcpOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ki8KCiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBpLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdzY29wZT0nICsgaS5zY29wZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJnJlc3BvbnNlX3R5cGU9JyArIGkudHlwZSArICcmc3RhdGU9JyArIGkuc3RhdGUgKyAnJmFjY2Vzc190eXBlPScgKyBpLmFjY2Vzc1R5cGU7CgogICAgICAgIHJlamVjdChyZXF1ZXN0VXJsKTsKCiAgICAgICAgLy8gIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIHRoZSByZXF1ZXN0IGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUsIHNvIGlkcFBSb3h5IHdpbGwgZXhjaGFuZ2UgdGhlIHRva2VucyBhbG9uZyB0byB0aGUgaWRwLCB0byBvYnRhaW4gdGhlIGluZm9ybWF0aW9uIG5lY2Vzc2FyeQogICAgICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGNvbnRlbnRzLCAnYWNjZXNzX3Rva2VuJyk7CiAgICAgICAgICB2YXIgaWRUb2tlbiA9IHVybFBhcnNlcihjb250ZW50cywgJ2lkX3Rva2VuJyk7CiAgICAgICAgICB2YXIgY29kZSA9IHVybFBhcnNlcihjb250ZW50cywgJ2NvZGUnKTsKCiAgICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgdmFyIGlkZW50aXR5QnVuZGxlID0geyBhY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiB2YWx1ZS5yZWZyZXNoX3Rva2VuLCB0b2tlblR5cGU6IHZhbHVlLnRva2VuX3R5cGUgfTsKCiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyCiAgICAgICAgICAgIHZhciBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuOwogICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbiAoaW5mb1Rva2VuKSB7CgogICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIsIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGUKICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbiA9IGluZm9Ub2tlbjsKICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5pbmZvVG9rZW4gPSBpbmZvVG9rZW47CiAgICAgICAgICAgICAgdmFyIGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuOwoKICAgICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuCiAgICAgICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpZFRva2VuVVJMKS50aGVuKGZ1bmN0aW9uIChpZFRva2VuKSB7CiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5pZFRva2VuSlNPTiA9IGlkVG9rZW47CiAgICAgICAgICAgICAgICByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9KTsKICB9Cn07CgovKioKKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViCiovCgp2YXIgSWRwUHJveHlQcm90b1N0dWIgPSAoZnVuY3Rpb24gKCkgewoKICAvKioKICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViCiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZAogICoKICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTAogICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uCiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb24KICAqLwoKICBmdW5jdGlvbiBJZHBQcm94eVByb3RvU3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElkcFByb3h5UHJvdG9TdHViKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzOwogICAgX3RoaXMuY29uZmlnID0gY29uZmlnOwoKICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgIGlmIChtc2cudG8gPT0gJ2RvbWFpbjovL2dvb2dsZS5jb20nKSB7CiAgICAgICAgLypsZXQgbmV3VmFsdWUgPSBJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbigpOwogICAgICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLAogICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiBuZXdWYWx1ZSwgYnVzOiBidXMsIHJ1bnRpbWVQcm90b1N0dWJVUkw6IHJ1bnRpbWVQcm90b1N0dWJVUkx9fTsKICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsqLwogICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpOwogICAgICB9CiAgICB9KTsKICB9CgogIC8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViOwoKICAvKioKICAgKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi4KICAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkwKICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24KICAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb24KICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YgogICAqLwoKICAvKioKICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb24KICAqCiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzCiAgKi8KCiAgX2NyZWF0ZUNsYXNzKElkcFByb3h5UHJvdG9TdHViLCBbewogICAga2V5OiAncmVxdWVzdFRvSWRwJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0VG9JZHAobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7CiAgICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7CiAgICAgICAgY2FzZSAnbG9naW4nOgogICAgICAgICAgX3RoaXMubG9naW4ocGFyYW1zKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzoKICAgICAgICAgIF90aGlzLmdlbmVyYXRlKHBhcmFtcykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6CiAgICAgICAgICBfdGhpcy52YWxpZGF0ZShwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIGZ1bmN0aW9uIHRoYXQgbWFrZXMgYSByZXF1ZXN0IGZvciBhbiBpZGVudGl0eSBhc3NlcnRpb24gdG8gdGhlIHdlYiB3b3JrZXIgcnVubmluZyB0aGUgaWRwUHJveHkKICAgICoKICAgICogQHBhcmFtICB7cGFyYW1zfSAgcGFyYW1ldGVycyByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZS4gSW4gdGhpcyBjYXNlIGNvbnRhaW5zIHRoZSBjb250ZW50LCBvcmlnaW4gYW5kIHVzZXJuYW1laGludAogICAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvbiBnZW5lcmF0ZSBieSB0aGUgaWRwUHJveHkKICAgICovCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlKHBhcmFtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogZnVuY3Rpb24gdGhhdCBtYWtlcyBhIHJlcXVlc3QgdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgYXNzZXJ0aW9uIHRvIHRoZSB3ZWIgd29ya2VyIHJ1bm5pbmcgdGhlIGlkcFByb3h5CiAgICAqCiAgICAqIEBwYXJhbSAge3BhcmFtc30gIHBhcmFtZXRlcnMgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2UuIEluIHRoaXMgY2FzZSBjb250YWlucyB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIGFuZCBvcmlnaW4KICAgICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0LCByZWNlaXZlZCBieSB0aGUgaWRwUHJveHkKICAgICovCiAgfSwgewogICAga2V5OiAndmFsaWRhdGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKHBhcmFtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGZ1bmN0aW9uIHRoYXQgbWFrZXMgYSByZXF1ZXN0IGZvciBhIHVzZXIgaWRlbnRpdHkgdG8gdGhlIHdlYiB3b3JrZXIgcnVubmluZyB0aGUgaWRwUHJveHkKICAgICoKICAgICogQHBhcmFtICB7cGFyYW1zfSAgcGFyYW1ldGVycyByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZS4gSW4gdGhpcyBjYXNlIGNvbnRhaW5zIHRoZSBsb2dpbiBzY29wZQogICAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSBhbiBVUkwgc28gdGhlIElkZW50aXR5IE1vZHVsZSBjYW4gdXNlIHRvIG9idGFpbiBhbiBpZGVudGl0eQogICAgKi8KICB9LCB7CiAgICBrZXk6ICdsb2dpbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9naW4ocGFyYW1zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIElkcFByb3h5LmdldElkZW50aXR5QXNzZXJ0aW9uKHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkgewoKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkCiAgICAqCiAgICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZAogICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmQKICAgICovCiAgfSwgewogICAga2V5OiAncmVwbHlNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLAogICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCB2YWx1ZTogdmFsdWUgfSB9OwoKICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJZHBQcm94eVByb3RvU3R1YjsKfSkoKTsKCmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsKICByZXR1cm4gewogICAgbmFtZTogJ0lkcFByb3h5UHJvdG9TdHViJywKICAgIGluc3RhbmNlOiBuZXcgSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZykKICB9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0se31dfSx7fSxbMV0pKDEpCn0pOw==",
      "sourceCodeClassname": "IdpProxyProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of IdpProxyProtoStub",
    "objectName": "IdpProxyProtoStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}
